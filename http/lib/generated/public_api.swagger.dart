// ignore_for_file: type=lint

import 'package:json_annotation/json_annotation.dart';
import 'package:json_annotation/json_annotation.dart' as json;
import 'package:collection/collection.dart';
import 'dart:convert';

import 'package:chopper/chopper.dart';

import 'client_mapping.dart';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:http/http.dart' show MultipartFile;
import 'package:chopper/chopper.dart' as chopper;
import 'public_api.enums.swagger.dart' as enums;
export 'public_api.enums.swagger.dart';

part 'public_api.swagger.chopper.dart';
part 'public_api.swagger.g.dart';

// **************************************************************************
// SwaggerChopperGenerator
// **************************************************************************

@ChopperApi()
abstract class PublicApi extends ChopperService {
  static PublicApi create({
    ChopperClient? client,
    http.Client? httpClient,
    Authenticator? authenticator,
    ErrorConverter? errorConverter,
    Converter? converter,
    Uri? baseUrl,
    List<Interceptor>? interceptors,
  }) {
    if (client != null) {
      return _$PublicApi(client);
    }

    final newClient = ChopperClient(
        services: [_$PublicApi()],
        converter: converter ?? $JsonSerializableConverter(),
        interceptors: interceptors ?? [],
        client: httpClient,
        authenticator: authenticator,
        errorConverter: errorConverter,
        baseUrl: baseUrl ?? Uri.parse('http://api.turnkey.com'));
    return _$PublicApi(newClient);
  }

  ///Get Activity
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1QueryGetActivityPost(
      {required V1GetActivityRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetActivityRequest, () => V1GetActivityRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1QueryGetActivityPost(body: body);
  }

  ///Get Activity
  ///@param body
  @Post(path: '/public/v1/query/get_activity')
  Future<chopper.Response<V1ActivityResponse>> _publicV1QueryGetActivityPost(
      {@Body() required V1GetActivityRequest? body});

  ///Get API key
  ///@param body
  Future<chopper.Response<V1GetApiKeyResponse>> publicV1QueryGetApiKeyPost(
      {required V1GetApiKeyRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetApiKeyRequest, () => V1GetApiKeyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetApiKeyResponse, () => V1GetApiKeyResponse.fromJsonFactory);

    return _publicV1QueryGetApiKeyPost(body: body);
  }

  ///Get API key
  ///@param body
  @Post(path: '/public/v1/query/get_api_key')
  Future<chopper.Response<V1GetApiKeyResponse>> _publicV1QueryGetApiKeyPost(
      {@Body() required V1GetApiKeyRequest? body});

  ///Get API key
  ///@param body
  Future<chopper.Response<V1GetApiKeysResponse>> publicV1QueryGetApiKeysPost(
      {required V1GetApiKeysRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetApiKeysRequest, () => V1GetApiKeysRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetApiKeysResponse, () => V1GetApiKeysResponse.fromJsonFactory);

    return _publicV1QueryGetApiKeysPost(body: body);
  }

  ///Get API key
  ///@param body
  @Post(path: '/public/v1/query/get_api_keys')
  Future<chopper.Response<V1GetApiKeysResponse>> _publicV1QueryGetApiKeysPost(
      {@Body() required V1GetApiKeysRequest? body});

  ///Attestation
  ///@param body
  Future<chopper.Response<V1GetAttestationDocumentResponse>>
      publicV1QueryGetAttestationPost(
          {required V1GetAttestationDocumentRequest? body}) {
    generatedMapping.putIfAbsent(V1GetAttestationDocumentRequest,
        () => V1GetAttestationDocumentRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetAttestationDocumentResponse,
        () => V1GetAttestationDocumentResponse.fromJsonFactory);

    return _publicV1QueryGetAttestationPost(body: body);
  }

  ///Attestation
  ///@param body
  @Post(path: '/public/v1/query/get_attestation')
  Future<chopper.Response<V1GetAttestationDocumentResponse>>
      _publicV1QueryGetAttestationPost(
          {@Body() required V1GetAttestationDocumentRequest? body});

  ///Get Authenticator
  ///@param body
  Future<chopper.Response<V1GetAuthenticatorResponse>>
      publicV1QueryGetAuthenticatorPost(
          {required V1GetAuthenticatorRequest? body}) {
    generatedMapping.putIfAbsent(V1GetAuthenticatorRequest,
        () => V1GetAuthenticatorRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetAuthenticatorResponse,
        () => V1GetAuthenticatorResponse.fromJsonFactory);

    return _publicV1QueryGetAuthenticatorPost(body: body);
  }

  ///Get Authenticator
  ///@param body
  @Post(path: '/public/v1/query/get_authenticator')
  Future<chopper.Response<V1GetAuthenticatorResponse>>
      _publicV1QueryGetAuthenticatorPost(
          {@Body() required V1GetAuthenticatorRequest? body});

  ///Get Authenticators
  ///@param body
  Future<chopper.Response<V1GetAuthenticatorsResponse>>
      publicV1QueryGetAuthenticatorsPost(
          {required V1GetAuthenticatorsRequest? body}) {
    generatedMapping.putIfAbsent(V1GetAuthenticatorsRequest,
        () => V1GetAuthenticatorsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetAuthenticatorsResponse,
        () => V1GetAuthenticatorsResponse.fromJsonFactory);

    return _publicV1QueryGetAuthenticatorsPost(body: body);
  }

  ///Get Authenticators
  ///@param body
  @Post(path: '/public/v1/query/get_authenticators')
  Future<chopper.Response<V1GetAuthenticatorsResponse>>
      _publicV1QueryGetAuthenticatorsPost(
          {@Body() required V1GetAuthenticatorsRequest? body});

  ///Get Oauth providers
  ///@param body
  Future<chopper.Response<V1GetOauthProvidersResponse>>
      publicV1QueryGetOauthProvidersPost(
          {required V1GetOauthProvidersRequest? body}) {
    generatedMapping.putIfAbsent(V1GetOauthProvidersRequest,
        () => V1GetOauthProvidersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetOauthProvidersResponse,
        () => V1GetOauthProvidersResponse.fromJsonFactory);

    return _publicV1QueryGetOauthProvidersPost(body: body);
  }

  ///Get Oauth providers
  ///@param body
  @Post(path: '/public/v1/query/get_oauth_providers')
  Future<chopper.Response<V1GetOauthProvidersResponse>>
      _publicV1QueryGetOauthProvidersPost(
          {@Body() required V1GetOauthProvidersRequest? body});

  ///Get Organization
  ///@param body
  Future<chopper.Response<V1GetOrganizationResponse>>
      publicV1QueryGetOrganizationPost(
          {required V1GetOrganizationRequest? body}) {
    generatedMapping.putIfAbsent(V1GetOrganizationRequest,
        () => V1GetOrganizationRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetOrganizationResponse,
        () => V1GetOrganizationResponse.fromJsonFactory);

    return _publicV1QueryGetOrganizationPost(body: body);
  }

  ///Get Organization
  ///@param body
  @Post(path: '/public/v1/query/get_organization')
  Future<chopper.Response<V1GetOrganizationResponse>>
      _publicV1QueryGetOrganizationPost(
          {@Body() required V1GetOrganizationRequest? body});

  ///Get Configs
  ///@param body
  Future<chopper.Response<V1GetOrganizationConfigsResponse>>
      publicV1QueryGetOrganizationConfigsPost(
          {required V1GetOrganizationConfigsRequest? body}) {
    generatedMapping.putIfAbsent(V1GetOrganizationConfigsRequest,
        () => V1GetOrganizationConfigsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetOrganizationConfigsResponse,
        () => V1GetOrganizationConfigsResponse.fromJsonFactory);

    return _publicV1QueryGetOrganizationConfigsPost(body: body);
  }

  ///Get Configs
  ///@param body
  @Post(path: '/public/v1/query/get_organization_configs')
  Future<chopper.Response<V1GetOrganizationConfigsResponse>>
      _publicV1QueryGetOrganizationConfigsPost(
          {@Body() required V1GetOrganizationConfigsRequest? body});

  ///Get Policy
  ///@param body
  Future<chopper.Response<V1GetPolicyResponse>> publicV1QueryGetPolicyPost(
      {required V1GetPolicyRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetPolicyRequest, () => V1GetPolicyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetPolicyResponse, () => V1GetPolicyResponse.fromJsonFactory);

    return _publicV1QueryGetPolicyPost(body: body);
  }

  ///Get Policy
  ///@param body
  @Post(path: '/public/v1/query/get_policy')
  Future<chopper.Response<V1GetPolicyResponse>> _publicV1QueryGetPolicyPost(
      {@Body() required V1GetPolicyRequest? body});

  ///Get Private Key
  ///@param body
  Future<chopper.Response<V1GetPrivateKeyResponse>>
      publicV1QueryGetPrivateKeyPost({required V1GetPrivateKeyRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetPrivateKeyRequest, () => V1GetPrivateKeyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetPrivateKeyResponse, () => V1GetPrivateKeyResponse.fromJsonFactory);

    return _publicV1QueryGetPrivateKeyPost(body: body);
  }

  ///Get Private Key
  ///@param body
  @Post(path: '/public/v1/query/get_private_key')
  Future<chopper.Response<V1GetPrivateKeyResponse>>
      _publicV1QueryGetPrivateKeyPost(
          {@Body() required V1GetPrivateKeyRequest? body});

  ///Get User
  ///@param body
  Future<chopper.Response<V1GetUserResponse>> publicV1QueryGetUserPost(
      {required V1GetUserRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetUserRequest, () => V1GetUserRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetUserResponse, () => V1GetUserResponse.fromJsonFactory);

    return _publicV1QueryGetUserPost(body: body);
  }

  ///Get User
  ///@param body
  @Post(path: '/public/v1/query/get_user')
  Future<chopper.Response<V1GetUserResponse>> _publicV1QueryGetUserPost(
      {@Body() required V1GetUserRequest? body});

  ///Get Wallet
  ///@param body
  Future<chopper.Response<V1GetWalletResponse>> publicV1QueryGetWalletPost(
      {required V1GetWalletRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetWalletRequest, () => V1GetWalletRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetWalletResponse, () => V1GetWalletResponse.fromJsonFactory);

    return _publicV1QueryGetWalletPost(body: body);
  }

  ///Get Wallet
  ///@param body
  @Post(path: '/public/v1/query/get_wallet')
  Future<chopper.Response<V1GetWalletResponse>> _publicV1QueryGetWalletPost(
      {@Body() required V1GetWalletRequest? body});

  ///List Activities
  ///@param body
  Future<chopper.Response<V1GetActivitiesResponse>>
      publicV1QueryListActivitiesPost({required V1GetActivitiesRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetActivitiesRequest, () => V1GetActivitiesRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetActivitiesResponse, () => V1GetActivitiesResponse.fromJsonFactory);

    return _publicV1QueryListActivitiesPost(body: body);
  }

  ///List Activities
  ///@param body
  @Post(path: '/public/v1/query/list_activities')
  Future<chopper.Response<V1GetActivitiesResponse>>
      _publicV1QueryListActivitiesPost(
          {@Body() required V1GetActivitiesRequest? body});

  ///List Policies
  ///@param body
  Future<chopper.Response<V1GetPoliciesResponse>> publicV1QueryListPoliciesPost(
      {required V1GetPoliciesRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetPoliciesRequest, () => V1GetPoliciesRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetPoliciesResponse, () => V1GetPoliciesResponse.fromJsonFactory);

    return _publicV1QueryListPoliciesPost(body: body);
  }

  ///List Policies
  ///@param body
  @Post(path: '/public/v1/query/list_policies')
  Future<chopper.Response<V1GetPoliciesResponse>>
      _publicV1QueryListPoliciesPost(
          {@Body() required V1GetPoliciesRequest? body});

  ///List Private Key Tags
  ///@param body
  Future<chopper.Response<V1ListPrivateKeyTagsResponse>>
      publicV1QueryListPrivateKeyTagsPost(
          {required V1ListPrivateKeyTagsRequest? body}) {
    generatedMapping.putIfAbsent(V1ListPrivateKeyTagsRequest,
        () => V1ListPrivateKeyTagsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1ListPrivateKeyTagsResponse,
        () => V1ListPrivateKeyTagsResponse.fromJsonFactory);

    return _publicV1QueryListPrivateKeyTagsPost(body: body);
  }

  ///List Private Key Tags
  ///@param body
  @Post(path: '/public/v1/query/list_private_key_tags')
  Future<chopper.Response<V1ListPrivateKeyTagsResponse>>
      _publicV1QueryListPrivateKeyTagsPost(
          {@Body() required V1ListPrivateKeyTagsRequest? body});

  ///List Private Keys
  ///@param body
  Future<chopper.Response<V1GetPrivateKeysResponse>>
      publicV1QueryListPrivateKeysPost(
          {required V1GetPrivateKeysRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetPrivateKeysRequest, () => V1GetPrivateKeysRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetPrivateKeysResponse,
        () => V1GetPrivateKeysResponse.fromJsonFactory);

    return _publicV1QueryListPrivateKeysPost(body: body);
  }

  ///List Private Keys
  ///@param body
  @Post(path: '/public/v1/query/list_private_keys')
  Future<chopper.Response<V1GetPrivateKeysResponse>>
      _publicV1QueryListPrivateKeysPost(
          {@Body() required V1GetPrivateKeysRequest? body});

  ///Get Suborgs
  ///@param body
  Future<chopper.Response<V1GetSubOrgIdsResponse>> publicV1QueryListSuborgsPost(
      {required V1GetSubOrgIdsRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetSubOrgIdsRequest, () => V1GetSubOrgIdsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetSubOrgIdsResponse, () => V1GetSubOrgIdsResponse.fromJsonFactory);

    return _publicV1QueryListSuborgsPost(body: body);
  }

  ///Get Suborgs
  ///@param body
  @Post(path: '/public/v1/query/list_suborgs')
  Future<chopper.Response<V1GetSubOrgIdsResponse>>
      _publicV1QueryListSuborgsPost(
          {@Body() required V1GetSubOrgIdsRequest? body});

  ///List User Tags
  ///@param body
  Future<chopper.Response<V1ListUserTagsResponse>>
      publicV1QueryListUserTagsPost({required V1ListUserTagsRequest? body}) {
    generatedMapping.putIfAbsent(
        V1ListUserTagsRequest, () => V1ListUserTagsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ListUserTagsResponse, () => V1ListUserTagsResponse.fromJsonFactory);

    return _publicV1QueryListUserTagsPost(body: body);
  }

  ///List User Tags
  ///@param body
  @Post(path: '/public/v1/query/list_user_tags')
  Future<chopper.Response<V1ListUserTagsResponse>>
      _publicV1QueryListUserTagsPost(
          {@Body() required V1ListUserTagsRequest? body});

  ///List Users
  ///@param body
  Future<chopper.Response<V1GetUsersResponse>> publicV1QueryListUsersPost(
      {required V1GetUsersRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetUsersRequest, () => V1GetUsersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetUsersResponse, () => V1GetUsersResponse.fromJsonFactory);

    return _publicV1QueryListUsersPost(body: body);
  }

  ///List Users
  ///@param body
  @Post(path: '/public/v1/query/list_users')
  Future<chopper.Response<V1GetUsersResponse>> _publicV1QueryListUsersPost(
      {@Body() required V1GetUsersRequest? body});

  ///Get Verified Suborgs
  ///@param body
  Future<chopper.Response<V1GetVerifiedSubOrgIdsResponse>>
      publicV1QueryListVerifiedSuborgsPost(
          {required V1GetVerifiedSubOrgIdsRequest? body}) {
    generatedMapping.putIfAbsent(V1GetVerifiedSubOrgIdsRequest,
        () => V1GetVerifiedSubOrgIdsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetVerifiedSubOrgIdsResponse,
        () => V1GetVerifiedSubOrgIdsResponse.fromJsonFactory);

    return _publicV1QueryListVerifiedSuborgsPost(body: body);
  }

  ///Get Verified Suborgs
  ///@param body
  @Post(path: '/public/v1/query/list_verified_suborgs')
  Future<chopper.Response<V1GetVerifiedSubOrgIdsResponse>>
      _publicV1QueryListVerifiedSuborgsPost(
          {@Body() required V1GetVerifiedSubOrgIdsRequest? body});

  ///List Wallets Accounts
  ///@param body
  Future<chopper.Response<V1GetWalletAccountsResponse>>
      publicV1QueryListWalletAccountsPost(
          {required V1GetWalletAccountsRequest? body}) {
    generatedMapping.putIfAbsent(V1GetWalletAccountsRequest,
        () => V1GetWalletAccountsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(V1GetWalletAccountsResponse,
        () => V1GetWalletAccountsResponse.fromJsonFactory);

    return _publicV1QueryListWalletAccountsPost(body: body);
  }

  ///List Wallets Accounts
  ///@param body
  @Post(path: '/public/v1/query/list_wallet_accounts')
  Future<chopper.Response<V1GetWalletAccountsResponse>>
      _publicV1QueryListWalletAccountsPost(
          {@Body() required V1GetWalletAccountsRequest? body});

  ///List Wallets
  ///@param body
  Future<chopper.Response<V1GetWalletsResponse>> publicV1QueryListWalletsPost(
      {required V1GetWalletsRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetWalletsRequest, () => V1GetWalletsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetWalletsResponse, () => V1GetWalletsResponse.fromJsonFactory);

    return _publicV1QueryListWalletsPost(body: body);
  }

  ///List Wallets
  ///@param body
  @Post(path: '/public/v1/query/list_wallets')
  Future<chopper.Response<V1GetWalletsResponse>> _publicV1QueryListWalletsPost(
      {@Body() required V1GetWalletsRequest? body});

  ///Who am I?
  ///@param body
  Future<chopper.Response<V1GetWhoamiResponse>> publicV1QueryWhoamiPost(
      {required V1GetWhoamiRequest? body}) {
    generatedMapping.putIfAbsent(
        V1GetWhoamiRequest, () => V1GetWhoamiRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1GetWhoamiResponse, () => V1GetWhoamiResponse.fromJsonFactory);

    return _publicV1QueryWhoamiPost(body: body);
  }

  ///Who am I?
  ///@param body
  @Post(path: '/public/v1/query/whoami')
  Future<chopper.Response<V1GetWhoamiResponse>> _publicV1QueryWhoamiPost(
      {@Body() required V1GetWhoamiRequest? body});

  ///Approve Activity
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitApproveActivityPost(
          {required V1ApproveActivityRequest? body}) {
    generatedMapping.putIfAbsent(V1ApproveActivityRequest,
        () => V1ApproveActivityRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitApproveActivityPost(body: body);
  }

  ///Approve Activity
  ///@param body
  @Post(path: '/public/v1/submit/approve_activity')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitApproveActivityPost(
          {@Body() required V1ApproveActivityRequest? body});

  ///Create API Keys
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitCreateApiKeysPost(
      {required V1CreateApiKeysRequest? body}) {
    generatedMapping.putIfAbsent(
        V1CreateApiKeysRequest, () => V1CreateApiKeysRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateApiKeysPost(body: body);
  }

  ///Create API Keys
  ///@param body
  @Post(path: '/public/v1/submit/create_api_keys')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitCreateApiKeysPost(
      {@Body() required V1CreateApiKeysRequest? body});

  ///Create API-only Users
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateApiOnlyUsersPost(
          {required V1CreateApiOnlyUsersRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateApiOnlyUsersRequest,
        () => V1CreateApiOnlyUsersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateApiOnlyUsersPost(body: body);
  }

  ///Create API-only Users
  ///@param body
  @Post(path: '/public/v1/submit/create_api_only_users')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateApiOnlyUsersPost(
          {@Body() required V1CreateApiOnlyUsersRequest? body});

  ///Create Authenticators
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateAuthenticatorsPost(
          {required V1CreateAuthenticatorsRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateAuthenticatorsRequest,
        () => V1CreateAuthenticatorsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateAuthenticatorsPost(body: body);
  }

  ///Create Authenticators
  ///@param body
  @Post(path: '/public/v1/submit/create_authenticators')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateAuthenticatorsPost(
          {@Body() required V1CreateAuthenticatorsRequest? body});

  ///Create Invitations
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateInvitationsPost(
          {required V1CreateInvitationsRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateInvitationsRequest,
        () => V1CreateInvitationsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateInvitationsPost(body: body);
  }

  ///Create Invitations
  ///@param body
  @Post(path: '/public/v1/submit/create_invitations')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateInvitationsPost(
          {@Body() required V1CreateInvitationsRequest? body});

  ///Create Oauth Providers
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateOauthProvidersPost(
          {required V1CreateOauthProvidersRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateOauthProvidersRequest,
        () => V1CreateOauthProvidersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateOauthProvidersPost(body: body);
  }

  ///Create Oauth Providers
  ///@param body
  @Post(path: '/public/v1/submit/create_oauth_providers')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateOauthProvidersPost(
          {@Body() required V1CreateOauthProvidersRequest? body});

  ///Create Policies
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitCreatePoliciesPost(
      {required V1CreatePoliciesRequest? body}) {
    generatedMapping.putIfAbsent(
        V1CreatePoliciesRequest, () => V1CreatePoliciesRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreatePoliciesPost(body: body);
  }

  ///Create Policies
  ///@param body
  @Post(path: '/public/v1/submit/create_policies')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreatePoliciesPost(
          {@Body() required V1CreatePoliciesRequest? body});

  ///Create Policy
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitCreatePolicyPost(
      {required V1CreatePolicyRequest? body}) {
    generatedMapping.putIfAbsent(
        V1CreatePolicyRequest, () => V1CreatePolicyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreatePolicyPost(body: body);
  }

  ///Create Policy
  ///@param body
  @Post(path: '/public/v1/submit/create_policy')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitCreatePolicyPost(
      {@Body() required V1CreatePolicyRequest? body});

  ///Create Private Key Tag
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreatePrivateKeyTagPost(
          {required V1CreatePrivateKeyTagRequest? body}) {
    generatedMapping.putIfAbsent(V1CreatePrivateKeyTagRequest,
        () => V1CreatePrivateKeyTagRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreatePrivateKeyTagPost(body: body);
  }

  ///Create Private Key Tag
  ///@param body
  @Post(path: '/public/v1/submit/create_private_key_tag')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreatePrivateKeyTagPost(
          {@Body() required V1CreatePrivateKeyTagRequest? body});

  ///Create Private Keys
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreatePrivateKeysPost(
          {required V1CreatePrivateKeysRequest? body}) {
    generatedMapping.putIfAbsent(V1CreatePrivateKeysRequest,
        () => V1CreatePrivateKeysRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreatePrivateKeysPost(body: body);
  }

  ///Create Private Keys
  ///@param body
  @Post(path: '/public/v1/submit/create_private_keys')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreatePrivateKeysPost(
          {@Body() required V1CreatePrivateKeysRequest? body});

  ///Create Read Only Session
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateReadOnlySessionPost(
          {required V1CreateReadOnlySessionRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateReadOnlySessionRequest,
        () => V1CreateReadOnlySessionRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateReadOnlySessionPost(body: body);
  }

  ///Create Read Only Session
  ///@param body
  @Post(path: '/public/v1/submit/create_read_only_session')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateReadOnlySessionPost(
          {@Body() required V1CreateReadOnlySessionRequest? body});

  ///Create Read Write Session
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateReadWriteSessionPost(
          {required V1CreateReadWriteSessionRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateReadWriteSessionRequest,
        () => V1CreateReadWriteSessionRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateReadWriteSessionPost(body: body);
  }

  ///Create Read Write Session
  ///@param body
  @Post(path: '/public/v1/submit/create_read_write_session')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateReadWriteSessionPost(
          {@Body() required V1CreateReadWriteSessionRequest? body});

  ///Create Sub-Organization
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateSubOrganizationPost(
          {required V1CreateSubOrganizationRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateSubOrganizationRequest,
        () => V1CreateSubOrganizationRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateSubOrganizationPost(body: body);
  }

  ///Create Sub-Organization
  ///@param body
  @Post(path: '/public/v1/submit/create_sub_organization')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateSubOrganizationPost(
          {@Body() required V1CreateSubOrganizationRequest? body});

  ///Create User Tag
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitCreateUserTagPost(
      {required V1CreateUserTagRequest? body}) {
    generatedMapping.putIfAbsent(
        V1CreateUserTagRequest, () => V1CreateUserTagRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateUserTagPost(body: body);
  }

  ///Create User Tag
  ///@param body
  @Post(path: '/public/v1/submit/create_user_tag')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitCreateUserTagPost(
      {@Body() required V1CreateUserTagRequest? body});

  ///Create Users
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitCreateUsersPost(
      {required V1CreateUsersRequest? body}) {
    generatedMapping.putIfAbsent(
        V1CreateUsersRequest, () => V1CreateUsersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateUsersPost(body: body);
  }

  ///Create Users
  ///@param body
  @Post(path: '/public/v1/submit/create_users')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitCreateUsersPost(
      {@Body() required V1CreateUsersRequest? body});

  ///Create Wallet
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitCreateWalletPost(
      {required V1CreateWalletRequest? body}) {
    generatedMapping.putIfAbsent(
        V1CreateWalletRequest, () => V1CreateWalletRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateWalletPost(body: body);
  }

  ///Create Wallet
  ///@param body
  @Post(path: '/public/v1/submit/create_wallet')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitCreateWalletPost(
      {@Body() required V1CreateWalletRequest? body});

  ///Create Wallet Accounts
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitCreateWalletAccountsPost(
          {required V1CreateWalletAccountsRequest? body}) {
    generatedMapping.putIfAbsent(V1CreateWalletAccountsRequest,
        () => V1CreateWalletAccountsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitCreateWalletAccountsPost(body: body);
  }

  ///Create Wallet Accounts
  ///@param body
  @Post(path: '/public/v1/submit/create_wallet_accounts')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitCreateWalletAccountsPost(
          {@Body() required V1CreateWalletAccountsRequest? body});

  ///Delete API Keys
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitDeleteApiKeysPost(
      {required V1DeleteApiKeysRequest? body}) {
    generatedMapping.putIfAbsent(
        V1DeleteApiKeysRequest, () => V1DeleteApiKeysRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteApiKeysPost(body: body);
  }

  ///Delete API Keys
  ///@param body
  @Post(path: '/public/v1/submit/delete_api_keys')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitDeleteApiKeysPost(
      {@Body() required V1DeleteApiKeysRequest? body});

  ///Delete Authenticators
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitDeleteAuthenticatorsPost(
          {required V1DeleteAuthenticatorsRequest? body}) {
    generatedMapping.putIfAbsent(V1DeleteAuthenticatorsRequest,
        () => V1DeleteAuthenticatorsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteAuthenticatorsPost(body: body);
  }

  ///Delete Authenticators
  ///@param body
  @Post(path: '/public/v1/submit/delete_authenticators')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeleteAuthenticatorsPost(
          {@Body() required V1DeleteAuthenticatorsRequest? body});

  ///Delete Invitation
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitDeleteInvitationPost(
          {required V1DeleteInvitationRequest? body}) {
    generatedMapping.putIfAbsent(V1DeleteInvitationRequest,
        () => V1DeleteInvitationRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteInvitationPost(body: body);
  }

  ///Delete Invitation
  ///@param body
  @Post(path: '/public/v1/submit/delete_invitation')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeleteInvitationPost(
          {@Body() required V1DeleteInvitationRequest? body});

  ///Delete Oauth Providers
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitDeleteOauthProvidersPost(
          {required V1DeleteOauthProvidersRequest? body}) {
    generatedMapping.putIfAbsent(V1DeleteOauthProvidersRequest,
        () => V1DeleteOauthProvidersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteOauthProvidersPost(body: body);
  }

  ///Delete Oauth Providers
  ///@param body
  @Post(path: '/public/v1/submit/delete_oauth_providers')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeleteOauthProvidersPost(
          {@Body() required V1DeleteOauthProvidersRequest? body});

  ///Delete Policy
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitDeletePolicyPost(
      {required V1DeletePolicyRequest? body}) {
    generatedMapping.putIfAbsent(
        V1DeletePolicyRequest, () => V1DeletePolicyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeletePolicyPost(body: body);
  }

  ///Delete Policy
  ///@param body
  @Post(path: '/public/v1/submit/delete_policy')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitDeletePolicyPost(
      {@Body() required V1DeletePolicyRequest? body});

  ///Delete Private Key Tags
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitDeletePrivateKeyTagsPost(
          {required V1DeletePrivateKeyTagsRequest? body}) {
    generatedMapping.putIfAbsent(V1DeletePrivateKeyTagsRequest,
        () => V1DeletePrivateKeyTagsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeletePrivateKeyTagsPost(body: body);
  }

  ///Delete Private Key Tags
  ///@param body
  @Post(path: '/public/v1/submit/delete_private_key_tags')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeletePrivateKeyTagsPost(
          {@Body() required V1DeletePrivateKeyTagsRequest? body});

  ///Delete Private Keys
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitDeletePrivateKeysPost(
          {required V1DeletePrivateKeysRequest? body}) {
    generatedMapping.putIfAbsent(V1DeletePrivateKeysRequest,
        () => V1DeletePrivateKeysRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeletePrivateKeysPost(body: body);
  }

  ///Delete Private Keys
  ///@param body
  @Post(path: '/public/v1/submit/delete_private_keys')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeletePrivateKeysPost(
          {@Body() required V1DeletePrivateKeysRequest? body});

  ///Delete Sub Organization
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitDeleteSubOrganizationPost(
          {required V1DeleteSubOrganizationRequest? body}) {
    generatedMapping.putIfAbsent(V1DeleteSubOrganizationRequest,
        () => V1DeleteSubOrganizationRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteSubOrganizationPost(body: body);
  }

  ///Delete Sub Organization
  ///@param body
  @Post(path: '/public/v1/submit/delete_sub_organization')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeleteSubOrganizationPost(
          {@Body() required V1DeleteSubOrganizationRequest? body});

  ///Delete User Tags
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitDeleteUserTagsPost(
      {required V1DeleteUserTagsRequest? body}) {
    generatedMapping.putIfAbsent(
        V1DeleteUserTagsRequest, () => V1DeleteUserTagsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteUserTagsPost(body: body);
  }

  ///Delete User Tags
  ///@param body
  @Post(path: '/public/v1/submit/delete_user_tags')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitDeleteUserTagsPost(
          {@Body() required V1DeleteUserTagsRequest? body});

  ///Delete Users
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitDeleteUsersPost(
      {required V1DeleteUsersRequest? body}) {
    generatedMapping.putIfAbsent(
        V1DeleteUsersRequest, () => V1DeleteUsersRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteUsersPost(body: body);
  }

  ///Delete Users
  ///@param body
  @Post(path: '/public/v1/submit/delete_users')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitDeleteUsersPost(
      {@Body() required V1DeleteUsersRequest? body});

  ///Delete Wallets
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitDeleteWalletsPost(
      {required V1DeleteWalletsRequest? body}) {
    generatedMapping.putIfAbsent(
        V1DeleteWalletsRequest, () => V1DeleteWalletsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitDeleteWalletsPost(body: body);
  }

  ///Delete Wallets
  ///@param body
  @Post(path: '/public/v1/submit/delete_wallets')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitDeleteWalletsPost(
      {@Body() required V1DeleteWalletsRequest? body});

  ///Perform Email Auth
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitEmailAuthPost(
      {required V1EmailAuthRequest? body}) {
    generatedMapping.putIfAbsent(
        V1EmailAuthRequest, () => V1EmailAuthRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitEmailAuthPost(body: body);
  }

  ///Perform Email Auth
  ///@param body
  @Post(path: '/public/v1/submit/email_auth')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitEmailAuthPost(
      {@Body() required V1EmailAuthRequest? body});

  ///Export Private Key
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitExportPrivateKeyPost(
          {required V1ExportPrivateKeyRequest? body}) {
    generatedMapping.putIfAbsent(V1ExportPrivateKeyRequest,
        () => V1ExportPrivateKeyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitExportPrivateKeyPost(body: body);
  }

  ///Export Private Key
  ///@param body
  @Post(path: '/public/v1/submit/export_private_key')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitExportPrivateKeyPost(
          {@Body() required V1ExportPrivateKeyRequest? body});

  ///Export Wallet
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitExportWalletPost(
      {required V1ExportWalletRequest? body}) {
    generatedMapping.putIfAbsent(
        V1ExportWalletRequest, () => V1ExportWalletRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitExportWalletPost(body: body);
  }

  ///Export Wallet
  ///@param body
  @Post(path: '/public/v1/submit/export_wallet')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitExportWalletPost(
      {@Body() required V1ExportWalletRequest? body});

  ///Export Wallet Account
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitExportWalletAccountPost(
          {required V1ExportWalletAccountRequest? body}) {
    generatedMapping.putIfAbsent(V1ExportWalletAccountRequest,
        () => V1ExportWalletAccountRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitExportWalletAccountPost(body: body);
  }

  ///Export Wallet Account
  ///@param body
  @Post(path: '/public/v1/submit/export_wallet_account')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitExportWalletAccountPost(
          {@Body() required V1ExportWalletAccountRequest? body});

  ///Import Private Key
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitImportPrivateKeyPost(
          {required V1ImportPrivateKeyRequest? body}) {
    generatedMapping.putIfAbsent(V1ImportPrivateKeyRequest,
        () => V1ImportPrivateKeyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitImportPrivateKeyPost(body: body);
  }

  ///Import Private Key
  ///@param body
  @Post(path: '/public/v1/submit/import_private_key')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitImportPrivateKeyPost(
          {@Body() required V1ImportPrivateKeyRequest? body});

  ///Import Wallet
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitImportWalletPost(
      {required V1ImportWalletRequest? body}) {
    generatedMapping.putIfAbsent(
        V1ImportWalletRequest, () => V1ImportWalletRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitImportWalletPost(body: body);
  }

  ///Import Wallet
  ///@param body
  @Post(path: '/public/v1/submit/import_wallet')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitImportWalletPost(
      {@Body() required V1ImportWalletRequest? body});

  ///Init Import Private Key
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitInitImportPrivateKeyPost(
          {required V1InitImportPrivateKeyRequest? body}) {
    generatedMapping.putIfAbsent(V1InitImportPrivateKeyRequest,
        () => V1InitImportPrivateKeyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitInitImportPrivateKeyPost(body: body);
  }

  ///Init Import Private Key
  ///@param body
  @Post(path: '/public/v1/submit/init_import_private_key')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitInitImportPrivateKeyPost(
          {@Body() required V1InitImportPrivateKeyRequest? body});

  ///Init Import Wallet
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitInitImportWalletPost(
          {required V1InitImportWalletRequest? body}) {
    generatedMapping.putIfAbsent(V1InitImportWalletRequest,
        () => V1InitImportWalletRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitInitImportWalletPost(body: body);
  }

  ///Init Import Wallet
  ///@param body
  @Post(path: '/public/v1/submit/init_import_wallet')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitInitImportWalletPost(
          {@Body() required V1InitImportWalletRequest? body});

  ///Init OTP auth
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitInitOtpAuthPost(
      {required V1InitOtpAuthRequest? body}) {
    generatedMapping.putIfAbsent(
        V1InitOtpAuthRequest, () => V1InitOtpAuthRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitInitOtpAuthPost(body: body);
  }

  ///Init OTP auth
  ///@param body
  @Post(path: '/public/v1/submit/init_otp_auth')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitInitOtpAuthPost(
      {@Body() required V1InitOtpAuthRequest? body});

  ///Init Email Recovery
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitInitUserEmailRecoveryPost(
          {required V1InitUserEmailRecoveryRequest? body}) {
    generatedMapping.putIfAbsent(V1InitUserEmailRecoveryRequest,
        () => V1InitUserEmailRecoveryRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitInitUserEmailRecoveryPost(body: body);
  }

  ///Init Email Recovery
  ///@param body
  @Post(path: '/public/v1/submit/init_user_email_recovery')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitInitUserEmailRecoveryPost(
          {@Body() required V1InitUserEmailRecoveryRequest? body});

  ///Oauth
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitOauthPost(
      {required V1OauthRequest? body}) {
    generatedMapping.putIfAbsent(
        V1OauthRequest, () => V1OauthRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitOauthPost(body: body);
  }

  ///Oauth
  ///@param body
  @Post(path: '/public/v1/submit/oauth')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitOauthPost(
      {@Body() required V1OauthRequest? body});

  ///OTP auth
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitOtpAuthPost(
      {required V1OtpAuthRequest? body}) {
    generatedMapping.putIfAbsent(
        V1OtpAuthRequest, () => V1OtpAuthRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitOtpAuthPost(body: body);
  }

  ///OTP auth
  ///@param body
  @Post(path: '/public/v1/submit/otp_auth')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitOtpAuthPost(
      {@Body() required V1OtpAuthRequest? body});

  ///Recover a user
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitRecoverUserPost(
      {required V1RecoverUserRequest? body}) {
    generatedMapping.putIfAbsent(
        V1RecoverUserRequest, () => V1RecoverUserRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitRecoverUserPost(body: body);
  }

  ///Recover a user
  ///@param body
  @Post(path: '/public/v1/submit/recover_user')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitRecoverUserPost(
      {@Body() required V1RecoverUserRequest? body});

  ///Reject Activity
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitRejectActivityPost(
      {required V1RejectActivityRequest? body}) {
    generatedMapping.putIfAbsent(
        V1RejectActivityRequest, () => V1RejectActivityRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitRejectActivityPost(body: body);
  }

  ///Reject Activity
  ///@param body
  @Post(path: '/public/v1/submit/reject_activity')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitRejectActivityPost(
          {@Body() required V1RejectActivityRequest? body});

  ///Remove Organization Feature
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitRemoveOrganizationFeaturePost(
          {required V1RemoveOrganizationFeatureRequest? body}) {
    generatedMapping.putIfAbsent(V1RemoveOrganizationFeatureRequest,
        () => V1RemoveOrganizationFeatureRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitRemoveOrganizationFeaturePost(body: body);
  }

  ///Remove Organization Feature
  ///@param body
  @Post(path: '/public/v1/submit/remove_organization_feature')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitRemoveOrganizationFeaturePost(
          {@Body() required V1RemoveOrganizationFeatureRequest? body});

  ///Set Organization Feature
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitSetOrganizationFeaturePost(
          {required V1SetOrganizationFeatureRequest? body}) {
    generatedMapping.putIfAbsent(V1SetOrganizationFeatureRequest,
        () => V1SetOrganizationFeatureRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitSetOrganizationFeaturePost(body: body);
  }

  ///Set Organization Feature
  ///@param body
  @Post(path: '/public/v1/submit/set_organization_feature')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitSetOrganizationFeaturePost(
          {@Body() required V1SetOrganizationFeatureRequest? body});

  ///Sign Raw Payload
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitSignRawPayloadPost(
      {required V1SignRawPayloadRequest? body}) {
    generatedMapping.putIfAbsent(
        V1SignRawPayloadRequest, () => V1SignRawPayloadRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitSignRawPayloadPost(body: body);
  }

  ///Sign Raw Payload
  ///@param body
  @Post(path: '/public/v1/submit/sign_raw_payload')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitSignRawPayloadPost(
          {@Body() required V1SignRawPayloadRequest? body});

  ///Sign Raw Payloads
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitSignRawPayloadsPost(
          {required V1SignRawPayloadsRequest? body}) {
    generatedMapping.putIfAbsent(V1SignRawPayloadsRequest,
        () => V1SignRawPayloadsRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitSignRawPayloadsPost(body: body);
  }

  ///Sign Raw Payloads
  ///@param body
  @Post(path: '/public/v1/submit/sign_raw_payloads')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitSignRawPayloadsPost(
          {@Body() required V1SignRawPayloadsRequest? body});

  ///Sign Transaction
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitSignTransactionPost(
          {required V1SignTransactionRequest? body}) {
    generatedMapping.putIfAbsent(V1SignTransactionRequest,
        () => V1SignTransactionRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitSignTransactionPost(body: body);
  }

  ///Sign Transaction
  ///@param body
  @Post(path: '/public/v1/submit/sign_transaction')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitSignTransactionPost(
          {@Body() required V1SignTransactionRequest? body});

  ///Update Policy
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitUpdatePolicyPost(
      {required V1UpdatePolicyRequest? body}) {
    generatedMapping.putIfAbsent(
        V1UpdatePolicyRequest, () => V1UpdatePolicyRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitUpdatePolicyPost(body: body);
  }

  ///Update Policy
  ///@param body
  @Post(path: '/public/v1/submit/update_policy')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitUpdatePolicyPost(
      {@Body() required V1UpdatePolicyRequest? body});

  ///Update Private Key Tag
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitUpdatePrivateKeyTagPost(
          {required V1UpdatePrivateKeyTagRequest? body}) {
    generatedMapping.putIfAbsent(V1UpdatePrivateKeyTagRequest,
        () => V1UpdatePrivateKeyTagRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitUpdatePrivateKeyTagPost(body: body);
  }

  ///Update Private Key Tag
  ///@param body
  @Post(path: '/public/v1/submit/update_private_key_tag')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitUpdatePrivateKeyTagPost(
          {@Body() required V1UpdatePrivateKeyTagRequest? body});

  ///Update Root Quorum
  ///@param body
  Future<chopper.Response<V1ActivityResponse>>
      publicV1SubmitUpdateRootQuorumPost(
          {required V1UpdateRootQuorumRequest? body}) {
    generatedMapping.putIfAbsent(V1UpdateRootQuorumRequest,
        () => V1UpdateRootQuorumRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitUpdateRootQuorumPost(body: body);
  }

  ///Update Root Quorum
  ///@param body
  @Post(path: '/public/v1/submit/update_root_quorum')
  Future<chopper.Response<V1ActivityResponse>>
      _publicV1SubmitUpdateRootQuorumPost(
          {@Body() required V1UpdateRootQuorumRequest? body});

  ///Update User
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitUpdateUserPost(
      {required V1UpdateUserRequest? body}) {
    generatedMapping.putIfAbsent(
        V1UpdateUserRequest, () => V1UpdateUserRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitUpdateUserPost(body: body);
  }

  ///Update User
  ///@param body
  @Post(path: '/public/v1/submit/update_user')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitUpdateUserPost(
      {@Body() required V1UpdateUserRequest? body});

  ///Update User Tag
  ///@param body
  Future<chopper.Response<V1ActivityResponse>> publicV1SubmitUpdateUserTagPost(
      {required V1UpdateUserTagRequest? body}) {
    generatedMapping.putIfAbsent(
        V1UpdateUserTagRequest, () => V1UpdateUserTagRequest.fromJsonFactory);
    generatedMapping.putIfAbsent(
        V1ActivityResponse, () => V1ActivityResponse.fromJsonFactory);

    return _publicV1SubmitUpdateUserTagPost(body: body);
  }

  ///Update User Tag
  ///@param body
  @Post(path: '/public/v1/submit/update_user_tag')
  Future<chopper.Response<V1ActivityResponse>> _publicV1SubmitUpdateUserTagPost(
      {@Body() required V1UpdateUserTagRequest? body});

  ///
  Future<chopper.Response<V1NOOPCodegenAnchorResponse>>
      tkhqApiV1NoopCodegenAnchorPost() {
    generatedMapping.putIfAbsent(V1NOOPCodegenAnchorResponse,
        () => V1NOOPCodegenAnchorResponse.fromJsonFactory);

    return _tkhqApiV1NoopCodegenAnchorPost();
  }

  ///
  @Post(
    path: '/tkhq/api/v1/noop-codegen-anchor',
    optionalBody: true,
  )
  Future<chopper.Response<V1NOOPCodegenAnchorResponse>>
      _tkhqApiV1NoopCodegenAnchorPost();
}

@JsonSerializable(explicitToJson: true)
class ApiApiKeyParams {
  const ApiApiKeyParams({
    required this.apiKeyName,
    required this.publicKey,
    this.expirationSeconds,
  });

  factory ApiApiKeyParams.fromJson(Map<String, dynamic> json) =>
      _$ApiApiKeyParamsFromJson(json);

  static const toJsonFactory = _$ApiApiKeyParamsToJson;
  Map<String, dynamic> toJson() => _$ApiApiKeyParamsToJson(this);

  @JsonKey(name: 'apiKeyName')
  final String apiKeyName;
  @JsonKey(name: 'publicKey')
  final String publicKey;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  static const fromJsonFactory = _$ApiApiKeyParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is ApiApiKeyParams &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.publicKey, publicKey) ||
                const DeepCollectionEquality()
                    .equals(other.publicKey, publicKey)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(publicKey) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      runtimeType.hashCode;
}

extension $ApiApiKeyParamsExtension on ApiApiKeyParams {
  ApiApiKeyParams copyWith(
      {String? apiKeyName, String? publicKey, String? expirationSeconds}) {
    return ApiApiKeyParams(
        apiKeyName: apiKeyName ?? this.apiKeyName,
        publicKey: publicKey ?? this.publicKey,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds);
  }

  ApiApiKeyParams copyWithWrapped(
      {Wrapped<String>? apiKeyName,
      Wrapped<String>? publicKey,
      Wrapped<String?>? expirationSeconds}) {
    return ApiApiKeyParams(
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        publicKey: (publicKey != null ? publicKey.value : this.publicKey),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingActivateBillingTierIntent {
  const BillingActivateBillingTierIntent({
    required this.productId,
  });

  factory BillingActivateBillingTierIntent.fromJson(
          Map<String, dynamic> json) =>
      _$BillingActivateBillingTierIntentFromJson(json);

  static const toJsonFactory = _$BillingActivateBillingTierIntentToJson;
  Map<String, dynamic> toJson() =>
      _$BillingActivateBillingTierIntentToJson(this);

  @JsonKey(name: 'productId')
  final String productId;
  static const fromJsonFactory = _$BillingActivateBillingTierIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingActivateBillingTierIntent &&
            (identical(other.productId, productId) ||
                const DeepCollectionEquality()
                    .equals(other.productId, productId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(productId) ^ runtimeType.hashCode;
}

extension $BillingActivateBillingTierIntentExtension
    on BillingActivateBillingTierIntent {
  BillingActivateBillingTierIntent copyWith({String? productId}) {
    return BillingActivateBillingTierIntent(
        productId: productId ?? this.productId);
  }

  BillingActivateBillingTierIntent copyWithWrapped(
      {Wrapped<String>? productId}) {
    return BillingActivateBillingTierIntent(
        productId: (productId != null ? productId.value : this.productId));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingActivateBillingTierResult {
  const BillingActivateBillingTierResult({
    required this.productId,
  });

  factory BillingActivateBillingTierResult.fromJson(
          Map<String, dynamic> json) =>
      _$BillingActivateBillingTierResultFromJson(json);

  static const toJsonFactory = _$BillingActivateBillingTierResultToJson;
  Map<String, dynamic> toJson() =>
      _$BillingActivateBillingTierResultToJson(this);

  @JsonKey(name: 'productId')
  final String productId;
  static const fromJsonFactory = _$BillingActivateBillingTierResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingActivateBillingTierResult &&
            (identical(other.productId, productId) ||
                const DeepCollectionEquality()
                    .equals(other.productId, productId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(productId) ^ runtimeType.hashCode;
}

extension $BillingActivateBillingTierResultExtension
    on BillingActivateBillingTierResult {
  BillingActivateBillingTierResult copyWith({String? productId}) {
    return BillingActivateBillingTierResult(
        productId: productId ?? this.productId);
  }

  BillingActivateBillingTierResult copyWithWrapped(
      {Wrapped<String>? productId}) {
    return BillingActivateBillingTierResult(
        productId: (productId != null ? productId.value : this.productId));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingDeletePaymentMethodIntent {
  const BillingDeletePaymentMethodIntent({
    required this.paymentMethodId,
  });

  factory BillingDeletePaymentMethodIntent.fromJson(
          Map<String, dynamic> json) =>
      _$BillingDeletePaymentMethodIntentFromJson(json);

  static const toJsonFactory = _$BillingDeletePaymentMethodIntentToJson;
  Map<String, dynamic> toJson() =>
      _$BillingDeletePaymentMethodIntentToJson(this);

  @JsonKey(name: 'paymentMethodId')
  final String paymentMethodId;
  static const fromJsonFactory = _$BillingDeletePaymentMethodIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingDeletePaymentMethodIntent &&
            (identical(other.paymentMethodId, paymentMethodId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentMethodId, paymentMethodId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(paymentMethodId) ^
      runtimeType.hashCode;
}

extension $BillingDeletePaymentMethodIntentExtension
    on BillingDeletePaymentMethodIntent {
  BillingDeletePaymentMethodIntent copyWith({String? paymentMethodId}) {
    return BillingDeletePaymentMethodIntent(
        paymentMethodId: paymentMethodId ?? this.paymentMethodId);
  }

  BillingDeletePaymentMethodIntent copyWithWrapped(
      {Wrapped<String>? paymentMethodId}) {
    return BillingDeletePaymentMethodIntent(
        paymentMethodId: (paymentMethodId != null
            ? paymentMethodId.value
            : this.paymentMethodId));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingDeletePaymentMethodResult {
  const BillingDeletePaymentMethodResult({
    required this.paymentMethodId,
  });

  factory BillingDeletePaymentMethodResult.fromJson(
          Map<String, dynamic> json) =>
      _$BillingDeletePaymentMethodResultFromJson(json);

  static const toJsonFactory = _$BillingDeletePaymentMethodResultToJson;
  Map<String, dynamic> toJson() =>
      _$BillingDeletePaymentMethodResultToJson(this);

  @JsonKey(name: 'paymentMethodId')
  final String paymentMethodId;
  static const fromJsonFactory = _$BillingDeletePaymentMethodResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingDeletePaymentMethodResult &&
            (identical(other.paymentMethodId, paymentMethodId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentMethodId, paymentMethodId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(paymentMethodId) ^
      runtimeType.hashCode;
}

extension $BillingDeletePaymentMethodResultExtension
    on BillingDeletePaymentMethodResult {
  BillingDeletePaymentMethodResult copyWith({String? paymentMethodId}) {
    return BillingDeletePaymentMethodResult(
        paymentMethodId: paymentMethodId ?? this.paymentMethodId);
  }

  BillingDeletePaymentMethodResult copyWithWrapped(
      {Wrapped<String>? paymentMethodId}) {
    return BillingDeletePaymentMethodResult(
        paymentMethodId: (paymentMethodId != null
            ? paymentMethodId.value
            : this.paymentMethodId));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingSetPaymentMethodIntent {
  const BillingSetPaymentMethodIntent({
    required this.number,
    required this.cvv,
    required this.expiryMonth,
    required this.expiryYear,
    required this.cardHolderEmail,
    required this.cardHolderName,
  });

  factory BillingSetPaymentMethodIntent.fromJson(Map<String, dynamic> json) =>
      _$BillingSetPaymentMethodIntentFromJson(json);

  static const toJsonFactory = _$BillingSetPaymentMethodIntentToJson;
  Map<String, dynamic> toJson() => _$BillingSetPaymentMethodIntentToJson(this);

  @JsonKey(name: 'number')
  final String number;
  @JsonKey(name: 'cvv')
  final String cvv;
  @JsonKey(name: 'expiryMonth')
  final String expiryMonth;
  @JsonKey(name: 'expiryYear')
  final String expiryYear;
  @JsonKey(name: 'cardHolderEmail')
  final String cardHolderEmail;
  @JsonKey(name: 'cardHolderName')
  final String cardHolderName;
  static const fromJsonFactory = _$BillingSetPaymentMethodIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingSetPaymentMethodIntent &&
            (identical(other.number, number) ||
                const DeepCollectionEquality().equals(other.number, number)) &&
            (identical(other.cvv, cvv) ||
                const DeepCollectionEquality().equals(other.cvv, cvv)) &&
            (identical(other.expiryMonth, expiryMonth) ||
                const DeepCollectionEquality()
                    .equals(other.expiryMonth, expiryMonth)) &&
            (identical(other.expiryYear, expiryYear) ||
                const DeepCollectionEquality()
                    .equals(other.expiryYear, expiryYear)) &&
            (identical(other.cardHolderEmail, cardHolderEmail) ||
                const DeepCollectionEquality()
                    .equals(other.cardHolderEmail, cardHolderEmail)) &&
            (identical(other.cardHolderName, cardHolderName) ||
                const DeepCollectionEquality()
                    .equals(other.cardHolderName, cardHolderName)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(number) ^
      const DeepCollectionEquality().hash(cvv) ^
      const DeepCollectionEquality().hash(expiryMonth) ^
      const DeepCollectionEquality().hash(expiryYear) ^
      const DeepCollectionEquality().hash(cardHolderEmail) ^
      const DeepCollectionEquality().hash(cardHolderName) ^
      runtimeType.hashCode;
}

extension $BillingSetPaymentMethodIntentExtension
    on BillingSetPaymentMethodIntent {
  BillingSetPaymentMethodIntent copyWith(
      {String? number,
      String? cvv,
      String? expiryMonth,
      String? expiryYear,
      String? cardHolderEmail,
      String? cardHolderName}) {
    return BillingSetPaymentMethodIntent(
        number: number ?? this.number,
        cvv: cvv ?? this.cvv,
        expiryMonth: expiryMonth ?? this.expiryMonth,
        expiryYear: expiryYear ?? this.expiryYear,
        cardHolderEmail: cardHolderEmail ?? this.cardHolderEmail,
        cardHolderName: cardHolderName ?? this.cardHolderName);
  }

  BillingSetPaymentMethodIntent copyWithWrapped(
      {Wrapped<String>? number,
      Wrapped<String>? cvv,
      Wrapped<String>? expiryMonth,
      Wrapped<String>? expiryYear,
      Wrapped<String>? cardHolderEmail,
      Wrapped<String>? cardHolderName}) {
    return BillingSetPaymentMethodIntent(
        number: (number != null ? number.value : this.number),
        cvv: (cvv != null ? cvv.value : this.cvv),
        expiryMonth:
            (expiryMonth != null ? expiryMonth.value : this.expiryMonth),
        expiryYear: (expiryYear != null ? expiryYear.value : this.expiryYear),
        cardHolderEmail: (cardHolderEmail != null
            ? cardHolderEmail.value
            : this.cardHolderEmail),
        cardHolderName: (cardHolderName != null
            ? cardHolderName.value
            : this.cardHolderName));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingSetPaymentMethodIntentV2 {
  const BillingSetPaymentMethodIntentV2({
    required this.paymentMethodId,
    required this.cardHolderEmail,
    required this.cardHolderName,
  });

  factory BillingSetPaymentMethodIntentV2.fromJson(Map<String, dynamic> json) =>
      _$BillingSetPaymentMethodIntentV2FromJson(json);

  static const toJsonFactory = _$BillingSetPaymentMethodIntentV2ToJson;
  Map<String, dynamic> toJson() =>
      _$BillingSetPaymentMethodIntentV2ToJson(this);

  @JsonKey(name: 'paymentMethodId')
  final String paymentMethodId;
  @JsonKey(name: 'cardHolderEmail')
  final String cardHolderEmail;
  @JsonKey(name: 'cardHolderName')
  final String cardHolderName;
  static const fromJsonFactory = _$BillingSetPaymentMethodIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingSetPaymentMethodIntentV2 &&
            (identical(other.paymentMethodId, paymentMethodId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentMethodId, paymentMethodId)) &&
            (identical(other.cardHolderEmail, cardHolderEmail) ||
                const DeepCollectionEquality()
                    .equals(other.cardHolderEmail, cardHolderEmail)) &&
            (identical(other.cardHolderName, cardHolderName) ||
                const DeepCollectionEquality()
                    .equals(other.cardHolderName, cardHolderName)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(paymentMethodId) ^
      const DeepCollectionEquality().hash(cardHolderEmail) ^
      const DeepCollectionEquality().hash(cardHolderName) ^
      runtimeType.hashCode;
}

extension $BillingSetPaymentMethodIntentV2Extension
    on BillingSetPaymentMethodIntentV2 {
  BillingSetPaymentMethodIntentV2 copyWith(
      {String? paymentMethodId,
      String? cardHolderEmail,
      String? cardHolderName}) {
    return BillingSetPaymentMethodIntentV2(
        paymentMethodId: paymentMethodId ?? this.paymentMethodId,
        cardHolderEmail: cardHolderEmail ?? this.cardHolderEmail,
        cardHolderName: cardHolderName ?? this.cardHolderName);
  }

  BillingSetPaymentMethodIntentV2 copyWithWrapped(
      {Wrapped<String>? paymentMethodId,
      Wrapped<String>? cardHolderEmail,
      Wrapped<String>? cardHolderName}) {
    return BillingSetPaymentMethodIntentV2(
        paymentMethodId: (paymentMethodId != null
            ? paymentMethodId.value
            : this.paymentMethodId),
        cardHolderEmail: (cardHolderEmail != null
            ? cardHolderEmail.value
            : this.cardHolderEmail),
        cardHolderName: (cardHolderName != null
            ? cardHolderName.value
            : this.cardHolderName));
  }
}

@JsonSerializable(explicitToJson: true)
class BillingSetPaymentMethodResult {
  const BillingSetPaymentMethodResult({
    required this.lastFour,
    required this.cardHolderName,
    required this.cardHolderEmail,
  });

  factory BillingSetPaymentMethodResult.fromJson(Map<String, dynamic> json) =>
      _$BillingSetPaymentMethodResultFromJson(json);

  static const toJsonFactory = _$BillingSetPaymentMethodResultToJson;
  Map<String, dynamic> toJson() => _$BillingSetPaymentMethodResultToJson(this);

  @JsonKey(name: 'lastFour')
  final String lastFour;
  @JsonKey(name: 'cardHolderName')
  final String cardHolderName;
  @JsonKey(name: 'cardHolderEmail')
  final String cardHolderEmail;
  static const fromJsonFactory = _$BillingSetPaymentMethodResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is BillingSetPaymentMethodResult &&
            (identical(other.lastFour, lastFour) ||
                const DeepCollectionEquality()
                    .equals(other.lastFour, lastFour)) &&
            (identical(other.cardHolderName, cardHolderName) ||
                const DeepCollectionEquality()
                    .equals(other.cardHolderName, cardHolderName)) &&
            (identical(other.cardHolderEmail, cardHolderEmail) ||
                const DeepCollectionEquality()
                    .equals(other.cardHolderEmail, cardHolderEmail)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(lastFour) ^
      const DeepCollectionEquality().hash(cardHolderName) ^
      const DeepCollectionEquality().hash(cardHolderEmail) ^
      runtimeType.hashCode;
}

extension $BillingSetPaymentMethodResultExtension
    on BillingSetPaymentMethodResult {
  BillingSetPaymentMethodResult copyWith(
      {String? lastFour, String? cardHolderName, String? cardHolderEmail}) {
    return BillingSetPaymentMethodResult(
        lastFour: lastFour ?? this.lastFour,
        cardHolderName: cardHolderName ?? this.cardHolderName,
        cardHolderEmail: cardHolderEmail ?? this.cardHolderEmail);
  }

  BillingSetPaymentMethodResult copyWithWrapped(
      {Wrapped<String>? lastFour,
      Wrapped<String>? cardHolderName,
      Wrapped<String>? cardHolderEmail}) {
    return BillingSetPaymentMethodResult(
        lastFour: (lastFour != null ? lastFour.value : this.lastFour),
        cardHolderName: (cardHolderName != null
            ? cardHolderName.value
            : this.cardHolderName),
        cardHolderEmail: (cardHolderEmail != null
            ? cardHolderEmail.value
            : this.cardHolderEmail));
  }
}

@JsonSerializable(explicitToJson: true)
class Datav1Tag {
  const Datav1Tag({
    required this.tagId,
    required this.tagName,
    required this.tagType,
    required this.createdAt,
    required this.updatedAt,
  });

  factory Datav1Tag.fromJson(Map<String, dynamic> json) =>
      _$Datav1TagFromJson(json);

  static const toJsonFactory = _$Datav1TagToJson;
  Map<String, dynamic> toJson() => _$Datav1TagToJson(this);

  @JsonKey(name: 'tagId')
  final String tagId;
  @JsonKey(name: 'tagName')
  final String tagName;
  @JsonKey(
    name: 'tagType',
    toJson: v1TagTypeToJson,
    fromJson: v1TagTypeFromJson,
  )
  final enums.V1TagType tagType;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  static const fromJsonFactory = _$Datav1TagFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is Datav1Tag &&
            (identical(other.tagId, tagId) ||
                const DeepCollectionEquality().equals(other.tagId, tagId)) &&
            (identical(other.tagName, tagName) ||
                const DeepCollectionEquality()
                    .equals(other.tagName, tagName)) &&
            (identical(other.tagType, tagType) ||
                const DeepCollectionEquality()
                    .equals(other.tagType, tagType)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(tagId) ^
      const DeepCollectionEquality().hash(tagName) ^
      const DeepCollectionEquality().hash(tagType) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      runtimeType.hashCode;
}

extension $Datav1TagExtension on Datav1Tag {
  Datav1Tag copyWith(
      {String? tagId,
      String? tagName,
      enums.V1TagType? tagType,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt}) {
    return Datav1Tag(
        tagId: tagId ?? this.tagId,
        tagName: tagName ?? this.tagName,
        tagType: tagType ?? this.tagType,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  Datav1Tag copyWithWrapped(
      {Wrapped<String>? tagId,
      Wrapped<String>? tagName,
      Wrapped<enums.V1TagType>? tagType,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt}) {
    return Datav1Tag(
        tagId: (tagId != null ? tagId.value : this.tagId),
        tagName: (tagName != null ? tagName.value : this.tagName),
        tagType: (tagType != null ? tagType.value : this.tagType),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class Externaldatav1Address {
  const Externaldatav1Address({
    this.format,
    this.address,
  });

  factory Externaldatav1Address.fromJson(Map<String, dynamic> json) =>
      _$Externaldatav1AddressFromJson(json);

  static const toJsonFactory = _$Externaldatav1AddressToJson;
  Map<String, dynamic> toJson() => _$Externaldatav1AddressToJson(this);

  @JsonKey(
    name: 'format',
    toJson: v1AddressFormatNullableToJson,
    fromJson: v1AddressFormatNullableFromJson,
  )
  final enums.V1AddressFormat? format;
  @JsonKey(name: 'address')
  final String? address;
  static const fromJsonFactory = _$Externaldatav1AddressFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is Externaldatav1Address &&
            (identical(other.format, format) ||
                const DeepCollectionEquality().equals(other.format, format)) &&
            (identical(other.address, address) ||
                const DeepCollectionEquality().equals(other.address, address)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(format) ^
      const DeepCollectionEquality().hash(address) ^
      runtimeType.hashCode;
}

extension $Externaldatav1AddressExtension on Externaldatav1Address {
  Externaldatav1Address copyWith(
      {enums.V1AddressFormat? format, String? address}) {
    return Externaldatav1Address(
        format: format ?? this.format, address: address ?? this.address);
  }

  Externaldatav1Address copyWithWrapped(
      {Wrapped<enums.V1AddressFormat?>? format, Wrapped<String?>? address}) {
    return Externaldatav1Address(
        format: (format != null ? format.value : this.format),
        address: (address != null ? address.value : this.address));
  }
}

@JsonSerializable(explicitToJson: true)
class Externaldatav1Credential {
  const Externaldatav1Credential({
    required this.publicKey,
    required this.type,
  });

  factory Externaldatav1Credential.fromJson(Map<String, dynamic> json) =>
      _$Externaldatav1CredentialFromJson(json);

  static const toJsonFactory = _$Externaldatav1CredentialToJson;
  Map<String, dynamic> toJson() => _$Externaldatav1CredentialToJson(this);

  @JsonKey(name: 'publicKey')
  final String publicKey;
  @JsonKey(
    name: 'type',
    toJson: v1CredentialTypeToJson,
    fromJson: v1CredentialTypeFromJson,
  )
  final enums.V1CredentialType type;
  static const fromJsonFactory = _$Externaldatav1CredentialFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is Externaldatav1Credential &&
            (identical(other.publicKey, publicKey) ||
                const DeepCollectionEquality()
                    .equals(other.publicKey, publicKey)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(publicKey) ^
      const DeepCollectionEquality().hash(type) ^
      runtimeType.hashCode;
}

extension $Externaldatav1CredentialExtension on Externaldatav1Credential {
  Externaldatav1Credential copyWith(
      {String? publicKey, enums.V1CredentialType? type}) {
    return Externaldatav1Credential(
        publicKey: publicKey ?? this.publicKey, type: type ?? this.type);
  }

  Externaldatav1Credential copyWithWrapped(
      {Wrapped<String>? publicKey, Wrapped<enums.V1CredentialType>? type}) {
    return Externaldatav1Credential(
        publicKey: (publicKey != null ? publicKey.value : this.publicKey),
        type: (type != null ? type.value : this.type));
  }
}

@JsonSerializable(explicitToJson: true)
class Externaldatav1Quorum {
  const Externaldatav1Quorum({
    required this.threshold,
    required this.userIds,
  });

  factory Externaldatav1Quorum.fromJson(Map<String, dynamic> json) =>
      _$Externaldatav1QuorumFromJson(json);

  static const toJsonFactory = _$Externaldatav1QuorumToJson;
  Map<String, dynamic> toJson() => _$Externaldatav1QuorumToJson(this);

  @JsonKey(name: 'threshold')
  final int threshold;
  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$Externaldatav1QuorumFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is Externaldatav1Quorum &&
            (identical(other.threshold, threshold) ||
                const DeepCollectionEquality()
                    .equals(other.threshold, threshold)) &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(threshold) ^
      const DeepCollectionEquality().hash(userIds) ^
      runtimeType.hashCode;
}

extension $Externaldatav1QuorumExtension on Externaldatav1Quorum {
  Externaldatav1Quorum copyWith({int? threshold, List<String>? userIds}) {
    return Externaldatav1Quorum(
        threshold: threshold ?? this.threshold,
        userIds: userIds ?? this.userIds);
  }

  Externaldatav1Quorum copyWithWrapped(
      {Wrapped<int>? threshold, Wrapped<List<String>>? userIds}) {
    return Externaldatav1Quorum(
        threshold: (threshold != null ? threshold.value : this.threshold),
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class Externaldatav1Timestamp {
  const Externaldatav1Timestamp({
    required this.seconds,
    required this.nanos,
  });

  factory Externaldatav1Timestamp.fromJson(Map<String, dynamic> json) =>
      _$Externaldatav1TimestampFromJson(json);

  static const toJsonFactory = _$Externaldatav1TimestampToJson;
  Map<String, dynamic> toJson() => _$Externaldatav1TimestampToJson(this);

  @JsonKey(name: 'seconds')
  final String seconds;
  @JsonKey(name: 'nanos')
  final String nanos;
  static const fromJsonFactory = _$Externaldatav1TimestampFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is Externaldatav1Timestamp &&
            (identical(other.seconds, seconds) ||
                const DeepCollectionEquality()
                    .equals(other.seconds, seconds)) &&
            (identical(other.nanos, nanos) ||
                const DeepCollectionEquality().equals(other.nanos, nanos)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(seconds) ^
      const DeepCollectionEquality().hash(nanos) ^
      runtimeType.hashCode;
}

extension $Externaldatav1TimestampExtension on Externaldatav1Timestamp {
  Externaldatav1Timestamp copyWith({String? seconds, String? nanos}) {
    return Externaldatav1Timestamp(
        seconds: seconds ?? this.seconds, nanos: nanos ?? this.nanos);
  }

  Externaldatav1Timestamp copyWithWrapped(
      {Wrapped<String>? seconds, Wrapped<String>? nanos}) {
    return Externaldatav1Timestamp(
        seconds: (seconds != null ? seconds.value : this.seconds),
        nanos: (nanos != null ? nanos.value : this.nanos));
  }
}

@JsonSerializable(explicitToJson: true)
class Immutableactivityv1Address {
  const Immutableactivityv1Address({
    this.format,
    this.address,
  });

  factory Immutableactivityv1Address.fromJson(Map<String, dynamic> json) =>
      _$Immutableactivityv1AddressFromJson(json);

  static const toJsonFactory = _$Immutableactivityv1AddressToJson;
  Map<String, dynamic> toJson() => _$Immutableactivityv1AddressToJson(this);

  @JsonKey(
    name: 'format',
    toJson: v1AddressFormatNullableToJson,
    fromJson: v1AddressFormatNullableFromJson,
  )
  final enums.V1AddressFormat? format;
  @JsonKey(name: 'address')
  final String? address;
  static const fromJsonFactory = _$Immutableactivityv1AddressFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is Immutableactivityv1Address &&
            (identical(other.format, format) ||
                const DeepCollectionEquality().equals(other.format, format)) &&
            (identical(other.address, address) ||
                const DeepCollectionEquality().equals(other.address, address)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(format) ^
      const DeepCollectionEquality().hash(address) ^
      runtimeType.hashCode;
}

extension $Immutableactivityv1AddressExtension on Immutableactivityv1Address {
  Immutableactivityv1Address copyWith(
      {enums.V1AddressFormat? format, String? address}) {
    return Immutableactivityv1Address(
        format: format ?? this.format, address: address ?? this.address);
  }

  Immutableactivityv1Address copyWithWrapped(
      {Wrapped<enums.V1AddressFormat?>? format, Wrapped<String?>? address}) {
    return Immutableactivityv1Address(
        format: (format != null ? format.value : this.format),
        address: (address != null ? address.value : this.address));
  }
}

@JsonSerializable(explicitToJson: true)
class ProtobufAny {
  const ProtobufAny({
    this.type,
  });

  factory ProtobufAny.fromJson(Map<String, dynamic> json) =>
      _$ProtobufAnyFromJson(json);

  static const toJsonFactory = _$ProtobufAnyToJson;
  Map<String, dynamic> toJson() => _$ProtobufAnyToJson(this);

  @JsonKey(name: '@type')
  final String? type;
  static const fromJsonFactory = _$ProtobufAnyFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is ProtobufAny &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^ runtimeType.hashCode;
}

extension $ProtobufAnyExtension on ProtobufAny {
  ProtobufAny copyWith({String? type}) {
    return ProtobufAny(type: type ?? this.type);
  }

  ProtobufAny copyWithWrapped({Wrapped<String?>? type}) {
    return ProtobufAny(type: (type != null ? type.value : this.type));
  }
}

@JsonSerializable(explicitToJson: true)
class RpcStatus {
  const RpcStatus({
    this.code,
    this.message,
    this.details,
  });

  factory RpcStatus.fromJson(Map<String, dynamic> json) =>
      _$RpcStatusFromJson(json);

  static const toJsonFactory = _$RpcStatusToJson;
  Map<String, dynamic> toJson() => _$RpcStatusToJson(this);

  @JsonKey(name: 'code')
  final int? code;
  @JsonKey(name: 'message')
  final String? message;
  @JsonKey(name: 'details', defaultValue: <ProtobufAny>[])
  final List<ProtobufAny>? details;
  static const fromJsonFactory = _$RpcStatusFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is RpcStatus &&
            (identical(other.code, code) ||
                const DeepCollectionEquality().equals(other.code, code)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality()
                    .equals(other.message, message)) &&
            (identical(other.details, details) ||
                const DeepCollectionEquality().equals(other.details, details)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(code) ^
      const DeepCollectionEquality().hash(message) ^
      const DeepCollectionEquality().hash(details) ^
      runtimeType.hashCode;
}

extension $RpcStatusExtension on RpcStatus {
  RpcStatus copyWith({int? code, String? message, List<ProtobufAny>? details}) {
    return RpcStatus(
        code: code ?? this.code,
        message: message ?? this.message,
        details: details ?? this.details);
  }

  RpcStatus copyWithWrapped(
      {Wrapped<int?>? code,
      Wrapped<String?>? message,
      Wrapped<List<ProtobufAny>?>? details}) {
    return RpcStatus(
        code: (code != null ? code.value : this.code),
        message: (message != null ? message.value : this.message),
        details: (details != null ? details.value : this.details));
  }
}

@JsonSerializable(explicitToJson: true)
class V1AcceptInvitationIntent {
  const V1AcceptInvitationIntent({
    required this.invitationId,
    required this.userId,
    required this.authenticator,
  });

  factory V1AcceptInvitationIntent.fromJson(Map<String, dynamic> json) =>
      _$V1AcceptInvitationIntentFromJson(json);

  static const toJsonFactory = _$V1AcceptInvitationIntentToJson;
  Map<String, dynamic> toJson() => _$V1AcceptInvitationIntentToJson(this);

  @JsonKey(name: 'invitationId')
  final String invitationId;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'authenticator')
  final V1AuthenticatorParams authenticator;
  static const fromJsonFactory = _$V1AcceptInvitationIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1AcceptInvitationIntent &&
            (identical(other.invitationId, invitationId) ||
                const DeepCollectionEquality()
                    .equals(other.invitationId, invitationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.authenticator, authenticator) ||
                const DeepCollectionEquality()
                    .equals(other.authenticator, authenticator)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationId) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(authenticator) ^
      runtimeType.hashCode;
}

extension $V1AcceptInvitationIntentExtension on V1AcceptInvitationIntent {
  V1AcceptInvitationIntent copyWith(
      {String? invitationId,
      String? userId,
      V1AuthenticatorParams? authenticator}) {
    return V1AcceptInvitationIntent(
        invitationId: invitationId ?? this.invitationId,
        userId: userId ?? this.userId,
        authenticator: authenticator ?? this.authenticator);
  }

  V1AcceptInvitationIntent copyWithWrapped(
      {Wrapped<String>? invitationId,
      Wrapped<String>? userId,
      Wrapped<V1AuthenticatorParams>? authenticator}) {
    return V1AcceptInvitationIntent(
        invitationId:
            (invitationId != null ? invitationId.value : this.invitationId),
        userId: (userId != null ? userId.value : this.userId),
        authenticator:
            (authenticator != null ? authenticator.value : this.authenticator));
  }
}

@JsonSerializable(explicitToJson: true)
class V1AcceptInvitationIntentV2 {
  const V1AcceptInvitationIntentV2({
    required this.invitationId,
    required this.userId,
    required this.authenticator,
  });

  factory V1AcceptInvitationIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1AcceptInvitationIntentV2FromJson(json);

  static const toJsonFactory = _$V1AcceptInvitationIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1AcceptInvitationIntentV2ToJson(this);

  @JsonKey(name: 'invitationId')
  final String invitationId;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'authenticator')
  final V1AuthenticatorParamsV2 authenticator;
  static const fromJsonFactory = _$V1AcceptInvitationIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1AcceptInvitationIntentV2 &&
            (identical(other.invitationId, invitationId) ||
                const DeepCollectionEquality()
                    .equals(other.invitationId, invitationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.authenticator, authenticator) ||
                const DeepCollectionEquality()
                    .equals(other.authenticator, authenticator)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationId) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(authenticator) ^
      runtimeType.hashCode;
}

extension $V1AcceptInvitationIntentV2Extension on V1AcceptInvitationIntentV2 {
  V1AcceptInvitationIntentV2 copyWith(
      {String? invitationId,
      String? userId,
      V1AuthenticatorParamsV2? authenticator}) {
    return V1AcceptInvitationIntentV2(
        invitationId: invitationId ?? this.invitationId,
        userId: userId ?? this.userId,
        authenticator: authenticator ?? this.authenticator);
  }

  V1AcceptInvitationIntentV2 copyWithWrapped(
      {Wrapped<String>? invitationId,
      Wrapped<String>? userId,
      Wrapped<V1AuthenticatorParamsV2>? authenticator}) {
    return V1AcceptInvitationIntentV2(
        invitationId:
            (invitationId != null ? invitationId.value : this.invitationId),
        userId: (userId != null ? userId.value : this.userId),
        authenticator:
            (authenticator != null ? authenticator.value : this.authenticator));
  }
}

@JsonSerializable(explicitToJson: true)
class V1AcceptInvitationResult {
  const V1AcceptInvitationResult({
    required this.invitationId,
    required this.userId,
  });

  factory V1AcceptInvitationResult.fromJson(Map<String, dynamic> json) =>
      _$V1AcceptInvitationResultFromJson(json);

  static const toJsonFactory = _$V1AcceptInvitationResultToJson;
  Map<String, dynamic> toJson() => _$V1AcceptInvitationResultToJson(this);

  @JsonKey(name: 'invitationId')
  final String invitationId;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1AcceptInvitationResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1AcceptInvitationResult &&
            (identical(other.invitationId, invitationId) ||
                const DeepCollectionEquality()
                    .equals(other.invitationId, invitationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationId) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1AcceptInvitationResultExtension on V1AcceptInvitationResult {
  V1AcceptInvitationResult copyWith({String? invitationId, String? userId}) {
    return V1AcceptInvitationResult(
        invitationId: invitationId ?? this.invitationId,
        userId: userId ?? this.userId);
  }

  V1AcceptInvitationResult copyWithWrapped(
      {Wrapped<String>? invitationId, Wrapped<String>? userId}) {
    return V1AcceptInvitationResult(
        invitationId:
            (invitationId != null ? invitationId.value : this.invitationId),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Activity {
  const V1Activity({
    required this.id,
    required this.organizationId,
    required this.status,
    required this.type,
    required this.intent,
    required this.result,
    required this.votes,
    required this.fingerprint,
    required this.canApprove,
    required this.canReject,
    required this.createdAt,
    required this.updatedAt,
    this.failure,
  });

  factory V1Activity.fromJson(Map<String, dynamic> json) =>
      _$V1ActivityFromJson(json);

  static const toJsonFactory = _$V1ActivityToJson;
  Map<String, dynamic> toJson() => _$V1ActivityToJson(this);

  @JsonKey(name: 'id')
  final String id;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(
    name: 'status',
    toJson: v1ActivityStatusToJson,
    fromJson: v1ActivityStatusFromJson,
  )
  final enums.V1ActivityStatus status;
  @JsonKey(
    name: 'type',
    toJson: v1ActivityTypeToJson,
    fromJson: v1ActivityTypeFromJson,
  )
  final enums.V1ActivityType type;
  @JsonKey(name: 'intent')
  final V1Intent intent;
  @JsonKey(name: 'result')
  final V1Result result;
  @JsonKey(name: 'votes', defaultValue: <V1Vote>[])
  final List<V1Vote> votes;
  @JsonKey(name: 'fingerprint')
  final String fingerprint;
  @JsonKey(name: 'canApprove')
  final bool canApprove;
  @JsonKey(name: 'canReject')
  final bool canReject;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  @JsonKey(name: 'failure')
  final RpcStatus? failure;
  static const fromJsonFactory = _$V1ActivityFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Activity &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.intent, intent) ||
                const DeepCollectionEquality().equals(other.intent, intent)) &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.votes, votes) ||
                const DeepCollectionEquality().equals(other.votes, votes)) &&
            (identical(other.fingerprint, fingerprint) ||
                const DeepCollectionEquality()
                    .equals(other.fingerprint, fingerprint)) &&
            (identical(other.canApprove, canApprove) ||
                const DeepCollectionEquality()
                    .equals(other.canApprove, canApprove)) &&
            (identical(other.canReject, canReject) ||
                const DeepCollectionEquality()
                    .equals(other.canReject, canReject)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)) &&
            (identical(other.failure, failure) ||
                const DeepCollectionEquality().equals(other.failure, failure)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(intent) ^
      const DeepCollectionEquality().hash(result) ^
      const DeepCollectionEquality().hash(votes) ^
      const DeepCollectionEquality().hash(fingerprint) ^
      const DeepCollectionEquality().hash(canApprove) ^
      const DeepCollectionEquality().hash(canReject) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      const DeepCollectionEquality().hash(failure) ^
      runtimeType.hashCode;
}

extension $V1ActivityExtension on V1Activity {
  V1Activity copyWith(
      {String? id,
      String? organizationId,
      enums.V1ActivityStatus? status,
      enums.V1ActivityType? type,
      V1Intent? intent,
      V1Result? result,
      List<V1Vote>? votes,
      String? fingerprint,
      bool? canApprove,
      bool? canReject,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt,
      RpcStatus? failure}) {
    return V1Activity(
        id: id ?? this.id,
        organizationId: organizationId ?? this.organizationId,
        status: status ?? this.status,
        type: type ?? this.type,
        intent: intent ?? this.intent,
        result: result ?? this.result,
        votes: votes ?? this.votes,
        fingerprint: fingerprint ?? this.fingerprint,
        canApprove: canApprove ?? this.canApprove,
        canReject: canReject ?? this.canReject,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        failure: failure ?? this.failure);
  }

  V1Activity copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? organizationId,
      Wrapped<enums.V1ActivityStatus>? status,
      Wrapped<enums.V1ActivityType>? type,
      Wrapped<V1Intent>? intent,
      Wrapped<V1Result>? result,
      Wrapped<List<V1Vote>>? votes,
      Wrapped<String>? fingerprint,
      Wrapped<bool>? canApprove,
      Wrapped<bool>? canReject,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt,
      Wrapped<RpcStatus?>? failure}) {
    return V1Activity(
        id: (id != null ? id.value : this.id),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        status: (status != null ? status.value : this.status),
        type: (type != null ? type.value : this.type),
        intent: (intent != null ? intent.value : this.intent),
        result: (result != null ? result.value : this.result),
        votes: (votes != null ? votes.value : this.votes),
        fingerprint:
            (fingerprint != null ? fingerprint.value : this.fingerprint),
        canApprove: (canApprove != null ? canApprove.value : this.canApprove),
        canReject: (canReject != null ? canReject.value : this.canReject),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        failure: (failure != null ? failure.value : this.failure));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ActivityResponse {
  const V1ActivityResponse({
    required this.activity,
  });

  factory V1ActivityResponse.fromJson(Map<String, dynamic> json) =>
      _$V1ActivityResponseFromJson(json);

  static const toJsonFactory = _$V1ActivityResponseToJson;
  Map<String, dynamic> toJson() => _$V1ActivityResponseToJson(this);

  @JsonKey(name: 'activity')
  final V1Activity activity;
  static const fromJsonFactory = _$V1ActivityResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ActivityResponse &&
            (identical(other.activity, activity) ||
                const DeepCollectionEquality()
                    .equals(other.activity, activity)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(activity) ^ runtimeType.hashCode;
}

extension $V1ActivityResponseExtension on V1ActivityResponse {
  V1ActivityResponse copyWith({V1Activity? activity}) {
    return V1ActivityResponse(activity: activity ?? this.activity);
  }

  V1ActivityResponse copyWithWrapped({Wrapped<V1Activity>? activity}) {
    return V1ActivityResponse(
        activity: (activity != null ? activity.value : this.activity));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ApiKey {
  const V1ApiKey({
    required this.credential,
    required this.apiKeyId,
    required this.apiKeyName,
    required this.createdAt,
    required this.updatedAt,
    this.expirationSeconds,
  });

  factory V1ApiKey.fromJson(Map<String, dynamic> json) =>
      _$V1ApiKeyFromJson(json);

  static const toJsonFactory = _$V1ApiKeyToJson;
  Map<String, dynamic> toJson() => _$V1ApiKeyToJson(this);

  @JsonKey(name: 'credential')
  final Externaldatav1Credential credential;
  @JsonKey(name: 'apiKeyId')
  final String apiKeyId;
  @JsonKey(name: 'apiKeyName')
  final String apiKeyName;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  static const fromJsonFactory = _$V1ApiKeyFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ApiKey &&
            (identical(other.credential, credential) ||
                const DeepCollectionEquality()
                    .equals(other.credential, credential)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(credential) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      runtimeType.hashCode;
}

extension $V1ApiKeyExtension on V1ApiKey {
  V1ApiKey copyWith(
      {Externaldatav1Credential? credential,
      String? apiKeyId,
      String? apiKeyName,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt,
      String? expirationSeconds}) {
    return V1ApiKey(
        credential: credential ?? this.credential,
        apiKeyId: apiKeyId ?? this.apiKeyId,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds);
  }

  V1ApiKey copyWithWrapped(
      {Wrapped<Externaldatav1Credential>? credential,
      Wrapped<String>? apiKeyId,
      Wrapped<String>? apiKeyName,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt,
      Wrapped<String?>? expirationSeconds}) {
    return V1ApiKey(
        credential: (credential != null ? credential.value : this.credential),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ApiKeyParamsV2 {
  const V1ApiKeyParamsV2({
    required this.apiKeyName,
    required this.publicKey,
    required this.curveType,
    this.expirationSeconds,
  });

  factory V1ApiKeyParamsV2.fromJson(Map<String, dynamic> json) =>
      _$V1ApiKeyParamsV2FromJson(json);

  static const toJsonFactory = _$V1ApiKeyParamsV2ToJson;
  Map<String, dynamic> toJson() => _$V1ApiKeyParamsV2ToJson(this);

  @JsonKey(name: 'apiKeyName')
  final String apiKeyName;
  @JsonKey(name: 'publicKey')
  final String publicKey;
  @JsonKey(
    name: 'curveType',
    toJson: v1ApiKeyCurveToJson,
    fromJson: v1ApiKeyCurveFromJson,
  )
  final enums.V1ApiKeyCurve curveType;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  static const fromJsonFactory = _$V1ApiKeyParamsV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ApiKeyParamsV2 &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.publicKey, publicKey) ||
                const DeepCollectionEquality()
                    .equals(other.publicKey, publicKey)) &&
            (identical(other.curveType, curveType) ||
                const DeepCollectionEquality()
                    .equals(other.curveType, curveType)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(publicKey) ^
      const DeepCollectionEquality().hash(curveType) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      runtimeType.hashCode;
}

extension $V1ApiKeyParamsV2Extension on V1ApiKeyParamsV2 {
  V1ApiKeyParamsV2 copyWith(
      {String? apiKeyName,
      String? publicKey,
      enums.V1ApiKeyCurve? curveType,
      String? expirationSeconds}) {
    return V1ApiKeyParamsV2(
        apiKeyName: apiKeyName ?? this.apiKeyName,
        publicKey: publicKey ?? this.publicKey,
        curveType: curveType ?? this.curveType,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds);
  }

  V1ApiKeyParamsV2 copyWithWrapped(
      {Wrapped<String>? apiKeyName,
      Wrapped<String>? publicKey,
      Wrapped<enums.V1ApiKeyCurve>? curveType,
      Wrapped<String?>? expirationSeconds}) {
    return V1ApiKeyParamsV2(
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        publicKey: (publicKey != null ? publicKey.value : this.publicKey),
        curveType: (curveType != null ? curveType.value : this.curveType),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ApiOnlyUserParams {
  const V1ApiOnlyUserParams({
    required this.userName,
    this.userEmail,
    required this.userTags,
    required this.apiKeys,
  });

  factory V1ApiOnlyUserParams.fromJson(Map<String, dynamic> json) =>
      _$V1ApiOnlyUserParamsFromJson(json);

  static const toJsonFactory = _$V1ApiOnlyUserParamsToJson;
  Map<String, dynamic> toJson() => _$V1ApiOnlyUserParamsToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'userTags', defaultValue: <String>[])
  final List<String> userTags;
  @JsonKey(name: 'apiKeys', defaultValue: <ApiApiKeyParams>[])
  final List<ApiApiKeyParams> apiKeys;
  static const fromJsonFactory = _$V1ApiOnlyUserParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ApiOnlyUserParams &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.userTags, userTags) ||
                const DeepCollectionEquality()
                    .equals(other.userTags, userTags)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality().equals(other.apiKeys, apiKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(userTags) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      runtimeType.hashCode;
}

extension $V1ApiOnlyUserParamsExtension on V1ApiOnlyUserParams {
  V1ApiOnlyUserParams copyWith(
      {String? userName,
      String? userEmail,
      List<String>? userTags,
      List<ApiApiKeyParams>? apiKeys}) {
    return V1ApiOnlyUserParams(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        userTags: userTags ?? this.userTags,
        apiKeys: apiKeys ?? this.apiKeys);
  }

  V1ApiOnlyUserParams copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<List<String>>? userTags,
      Wrapped<List<ApiApiKeyParams>>? apiKeys}) {
    return V1ApiOnlyUserParams(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        userTags: (userTags != null ? userTags.value : this.userTags),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ApproveActivityIntent {
  const V1ApproveActivityIntent({
    required this.fingerprint,
  });

  factory V1ApproveActivityIntent.fromJson(Map<String, dynamic> json) =>
      _$V1ApproveActivityIntentFromJson(json);

  static const toJsonFactory = _$V1ApproveActivityIntentToJson;
  Map<String, dynamic> toJson() => _$V1ApproveActivityIntentToJson(this);

  @JsonKey(name: 'fingerprint')
  final String fingerprint;
  static const fromJsonFactory = _$V1ApproveActivityIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ApproveActivityIntent &&
            (identical(other.fingerprint, fingerprint) ||
                const DeepCollectionEquality()
                    .equals(other.fingerprint, fingerprint)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fingerprint) ^ runtimeType.hashCode;
}

extension $V1ApproveActivityIntentExtension on V1ApproveActivityIntent {
  V1ApproveActivityIntent copyWith({String? fingerprint}) {
    return V1ApproveActivityIntent(
        fingerprint: fingerprint ?? this.fingerprint);
  }

  V1ApproveActivityIntent copyWithWrapped({Wrapped<String>? fingerprint}) {
    return V1ApproveActivityIntent(
        fingerprint:
            (fingerprint != null ? fingerprint.value : this.fingerprint));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ApproveActivityRequest {
  const V1ApproveActivityRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1ApproveActivityRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ApproveActivityRequestFromJson(json);

  static const toJsonFactory = _$V1ApproveActivityRequestToJson;
  Map<String, dynamic> toJson() => _$V1ApproveActivityRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1ApproveActivityRequestTypeToJson,
    fromJson: v1ApproveActivityRequestTypeFromJson,
  )
  final enums.V1ApproveActivityRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1ApproveActivityIntent parameters;
  static const fromJsonFactory = _$V1ApproveActivityRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ApproveActivityRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1ApproveActivityRequestExtension on V1ApproveActivityRequest {
  V1ApproveActivityRequest copyWith(
      {enums.V1ApproveActivityRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1ApproveActivityIntent? parameters}) {
    return V1ApproveActivityRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1ApproveActivityRequest copyWithWrapped(
      {Wrapped<enums.V1ApproveActivityRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1ApproveActivityIntent>? parameters}) {
    return V1ApproveActivityRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Attestation {
  const V1Attestation({
    required this.credentialId,
    required this.clientDataJson,
    required this.attestationObject,
    required this.transports,
  });

  factory V1Attestation.fromJson(Map<String, dynamic> json) =>
      _$V1AttestationFromJson(json);

  static const toJsonFactory = _$V1AttestationToJson;
  Map<String, dynamic> toJson() => _$V1AttestationToJson(this);

  @JsonKey(name: 'credentialId')
  final String credentialId;
  @JsonKey(name: 'clientDataJson')
  final String clientDataJson;
  @JsonKey(name: 'attestationObject')
  final String attestationObject;
  @JsonKey(
    name: 'transports',
    toJson: v1AuthenticatorTransportListToJson,
    fromJson: v1AuthenticatorTransportListFromJson,
  )
  final List<enums.V1AuthenticatorTransport> transports;
  static const fromJsonFactory = _$V1AttestationFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Attestation &&
            (identical(other.credentialId, credentialId) ||
                const DeepCollectionEquality()
                    .equals(other.credentialId, credentialId)) &&
            (identical(other.clientDataJson, clientDataJson) ||
                const DeepCollectionEquality()
                    .equals(other.clientDataJson, clientDataJson)) &&
            (identical(other.attestationObject, attestationObject) ||
                const DeepCollectionEquality()
                    .equals(other.attestationObject, attestationObject)) &&
            (identical(other.transports, transports) ||
                const DeepCollectionEquality()
                    .equals(other.transports, transports)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(credentialId) ^
      const DeepCollectionEquality().hash(clientDataJson) ^
      const DeepCollectionEquality().hash(attestationObject) ^
      const DeepCollectionEquality().hash(transports) ^
      runtimeType.hashCode;
}

extension $V1AttestationExtension on V1Attestation {
  V1Attestation copyWith(
      {String? credentialId,
      String? clientDataJson,
      String? attestationObject,
      List<enums.V1AuthenticatorTransport>? transports}) {
    return V1Attestation(
        credentialId: credentialId ?? this.credentialId,
        clientDataJson: clientDataJson ?? this.clientDataJson,
        attestationObject: attestationObject ?? this.attestationObject,
        transports: transports ?? this.transports);
  }

  V1Attestation copyWithWrapped(
      {Wrapped<String>? credentialId,
      Wrapped<String>? clientDataJson,
      Wrapped<String>? attestationObject,
      Wrapped<List<enums.V1AuthenticatorTransport>>? transports}) {
    return V1Attestation(
        credentialId:
            (credentialId != null ? credentialId.value : this.credentialId),
        clientDataJson: (clientDataJson != null
            ? clientDataJson.value
            : this.clientDataJson),
        attestationObject: (attestationObject != null
            ? attestationObject.value
            : this.attestationObject),
        transports: (transports != null ? transports.value : this.transports));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Authenticator {
  const V1Authenticator({
    required this.transports,
    required this.attestationType,
    required this.aaguid,
    required this.credentialId,
    required this.model,
    required this.credential,
    required this.authenticatorId,
    required this.authenticatorName,
    required this.createdAt,
    required this.updatedAt,
  });

  factory V1Authenticator.fromJson(Map<String, dynamic> json) =>
      _$V1AuthenticatorFromJson(json);

  static const toJsonFactory = _$V1AuthenticatorToJson;
  Map<String, dynamic> toJson() => _$V1AuthenticatorToJson(this);

  @JsonKey(
    name: 'transports',
    toJson: v1AuthenticatorTransportListToJson,
    fromJson: v1AuthenticatorTransportListFromJson,
  )
  final List<enums.V1AuthenticatorTransport> transports;
  @JsonKey(name: 'attestationType')
  final String attestationType;
  @JsonKey(name: 'aaguid')
  final String aaguid;
  @JsonKey(name: 'credentialId')
  final String credentialId;
  @JsonKey(name: 'model')
  final String model;
  @JsonKey(name: 'credential')
  final Externaldatav1Credential credential;
  @JsonKey(name: 'authenticatorId')
  final String authenticatorId;
  @JsonKey(name: 'authenticatorName')
  final String authenticatorName;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  static const fromJsonFactory = _$V1AuthenticatorFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Authenticator &&
            (identical(other.transports, transports) ||
                const DeepCollectionEquality()
                    .equals(other.transports, transports)) &&
            (identical(other.attestationType, attestationType) ||
                const DeepCollectionEquality()
                    .equals(other.attestationType, attestationType)) &&
            (identical(other.aaguid, aaguid) ||
                const DeepCollectionEquality().equals(other.aaguid, aaguid)) &&
            (identical(other.credentialId, credentialId) ||
                const DeepCollectionEquality()
                    .equals(other.credentialId, credentialId)) &&
            (identical(other.model, model) ||
                const DeepCollectionEquality().equals(other.model, model)) &&
            (identical(other.credential, credential) ||
                const DeepCollectionEquality()
                    .equals(other.credential, credential)) &&
            (identical(other.authenticatorId, authenticatorId) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorId, authenticatorId)) &&
            (identical(other.authenticatorName, authenticatorName) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorName, authenticatorName)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(transports) ^
      const DeepCollectionEquality().hash(attestationType) ^
      const DeepCollectionEquality().hash(aaguid) ^
      const DeepCollectionEquality().hash(credentialId) ^
      const DeepCollectionEquality().hash(model) ^
      const DeepCollectionEquality().hash(credential) ^
      const DeepCollectionEquality().hash(authenticatorId) ^
      const DeepCollectionEquality().hash(authenticatorName) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      runtimeType.hashCode;
}

extension $V1AuthenticatorExtension on V1Authenticator {
  V1Authenticator copyWith(
      {List<enums.V1AuthenticatorTransport>? transports,
      String? attestationType,
      String? aaguid,
      String? credentialId,
      String? model,
      Externaldatav1Credential? credential,
      String? authenticatorId,
      String? authenticatorName,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt}) {
    return V1Authenticator(
        transports: transports ?? this.transports,
        attestationType: attestationType ?? this.attestationType,
        aaguid: aaguid ?? this.aaguid,
        credentialId: credentialId ?? this.credentialId,
        model: model ?? this.model,
        credential: credential ?? this.credential,
        authenticatorId: authenticatorId ?? this.authenticatorId,
        authenticatorName: authenticatorName ?? this.authenticatorName,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  V1Authenticator copyWithWrapped(
      {Wrapped<List<enums.V1AuthenticatorTransport>>? transports,
      Wrapped<String>? attestationType,
      Wrapped<String>? aaguid,
      Wrapped<String>? credentialId,
      Wrapped<String>? model,
      Wrapped<Externaldatav1Credential>? credential,
      Wrapped<String>? authenticatorId,
      Wrapped<String>? authenticatorName,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt}) {
    return V1Authenticator(
        transports: (transports != null ? transports.value : this.transports),
        attestationType: (attestationType != null
            ? attestationType.value
            : this.attestationType),
        aaguid: (aaguid != null ? aaguid.value : this.aaguid),
        credentialId:
            (credentialId != null ? credentialId.value : this.credentialId),
        model: (model != null ? model.value : this.model),
        credential: (credential != null ? credential.value : this.credential),
        authenticatorId: (authenticatorId != null
            ? authenticatorId.value
            : this.authenticatorId),
        authenticatorName: (authenticatorName != null
            ? authenticatorName.value
            : this.authenticatorName),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class V1AuthenticatorAttestationResponse {
  const V1AuthenticatorAttestationResponse({
    required this.clientDataJson,
    required this.attestationObject,
    this.transports,
    this.authenticatorAttachment,
  });

  factory V1AuthenticatorAttestationResponse.fromJson(
          Map<String, dynamic> json) =>
      _$V1AuthenticatorAttestationResponseFromJson(json);

  static const toJsonFactory = _$V1AuthenticatorAttestationResponseToJson;
  Map<String, dynamic> toJson() =>
      _$V1AuthenticatorAttestationResponseToJson(this);

  @JsonKey(name: 'clientDataJson')
  final String clientDataJson;
  @JsonKey(name: 'attestationObject')
  final String attestationObject;
  @JsonKey(
    name: 'transports',
    toJson: v1AuthenticatorTransportListToJson,
    fromJson: v1AuthenticatorTransportListFromJson,
  )
  final List<enums.V1AuthenticatorTransport>? transports;
  @JsonKey(
    name: 'authenticatorAttachment',
    toJson:
        v1AuthenticatorAttestationResponseAuthenticatorAttachmentNullableToJson,
    fromJson:
        v1AuthenticatorAttestationResponseAuthenticatorAttachmentNullableFromJson,
  )
  final enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment?
      authenticatorAttachment;
  static const fromJsonFactory = _$V1AuthenticatorAttestationResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1AuthenticatorAttestationResponse &&
            (identical(other.clientDataJson, clientDataJson) ||
                const DeepCollectionEquality()
                    .equals(other.clientDataJson, clientDataJson)) &&
            (identical(other.attestationObject, attestationObject) ||
                const DeepCollectionEquality()
                    .equals(other.attestationObject, attestationObject)) &&
            (identical(other.transports, transports) ||
                const DeepCollectionEquality()
                    .equals(other.transports, transports)) &&
            (identical(
                    other.authenticatorAttachment, authenticatorAttachment) ||
                const DeepCollectionEquality().equals(
                    other.authenticatorAttachment, authenticatorAttachment)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(clientDataJson) ^
      const DeepCollectionEquality().hash(attestationObject) ^
      const DeepCollectionEquality().hash(transports) ^
      const DeepCollectionEquality().hash(authenticatorAttachment) ^
      runtimeType.hashCode;
}

extension $V1AuthenticatorAttestationResponseExtension
    on V1AuthenticatorAttestationResponse {
  V1AuthenticatorAttestationResponse copyWith(
      {String? clientDataJson,
      String? attestationObject,
      List<enums.V1AuthenticatorTransport>? transports,
      enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment?
          authenticatorAttachment}) {
    return V1AuthenticatorAttestationResponse(
        clientDataJson: clientDataJson ?? this.clientDataJson,
        attestationObject: attestationObject ?? this.attestationObject,
        transports: transports ?? this.transports,
        authenticatorAttachment:
            authenticatorAttachment ?? this.authenticatorAttachment);
  }

  V1AuthenticatorAttestationResponse copyWithWrapped(
      {Wrapped<String>? clientDataJson,
      Wrapped<String>? attestationObject,
      Wrapped<List<enums.V1AuthenticatorTransport>?>? transports,
      Wrapped<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment?>?
          authenticatorAttachment}) {
    return V1AuthenticatorAttestationResponse(
        clientDataJson: (clientDataJson != null
            ? clientDataJson.value
            : this.clientDataJson),
        attestationObject: (attestationObject != null
            ? attestationObject.value
            : this.attestationObject),
        transports: (transports != null ? transports.value : this.transports),
        authenticatorAttachment: (authenticatorAttachment != null
            ? authenticatorAttachment.value
            : this.authenticatorAttachment));
  }
}

@JsonSerializable(explicitToJson: true)
class V1AuthenticatorParams {
  const V1AuthenticatorParams({
    required this.authenticatorName,
    required this.userId,
    required this.attestation,
    required this.challenge,
  });

  factory V1AuthenticatorParams.fromJson(Map<String, dynamic> json) =>
      _$V1AuthenticatorParamsFromJson(json);

  static const toJsonFactory = _$V1AuthenticatorParamsToJson;
  Map<String, dynamic> toJson() => _$V1AuthenticatorParamsToJson(this);

  @JsonKey(name: 'authenticatorName')
  final String authenticatorName;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'attestation')
  final V1PublicKeyCredentialWithAttestation attestation;
  @JsonKey(name: 'challenge')
  final String challenge;
  static const fromJsonFactory = _$V1AuthenticatorParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1AuthenticatorParams &&
            (identical(other.authenticatorName, authenticatorName) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorName, authenticatorName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.attestation, attestation) ||
                const DeepCollectionEquality()
                    .equals(other.attestation, attestation)) &&
            (identical(other.challenge, challenge) ||
                const DeepCollectionEquality()
                    .equals(other.challenge, challenge)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticatorName) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(attestation) ^
      const DeepCollectionEquality().hash(challenge) ^
      runtimeType.hashCode;
}

extension $V1AuthenticatorParamsExtension on V1AuthenticatorParams {
  V1AuthenticatorParams copyWith(
      {String? authenticatorName,
      String? userId,
      V1PublicKeyCredentialWithAttestation? attestation,
      String? challenge}) {
    return V1AuthenticatorParams(
        authenticatorName: authenticatorName ?? this.authenticatorName,
        userId: userId ?? this.userId,
        attestation: attestation ?? this.attestation,
        challenge: challenge ?? this.challenge);
  }

  V1AuthenticatorParams copyWithWrapped(
      {Wrapped<String>? authenticatorName,
      Wrapped<String>? userId,
      Wrapped<V1PublicKeyCredentialWithAttestation>? attestation,
      Wrapped<String>? challenge}) {
    return V1AuthenticatorParams(
        authenticatorName: (authenticatorName != null
            ? authenticatorName.value
            : this.authenticatorName),
        userId: (userId != null ? userId.value : this.userId),
        attestation:
            (attestation != null ? attestation.value : this.attestation),
        challenge: (challenge != null ? challenge.value : this.challenge));
  }
}

@JsonSerializable(explicitToJson: true)
class V1AuthenticatorParamsV2 {
  const V1AuthenticatorParamsV2({
    required this.authenticatorName,
    required this.challenge,
    required this.attestation,
  });

  factory V1AuthenticatorParamsV2.fromJson(Map<String, dynamic> json) =>
      _$V1AuthenticatorParamsV2FromJson(json);

  static const toJsonFactory = _$V1AuthenticatorParamsV2ToJson;
  Map<String, dynamic> toJson() => _$V1AuthenticatorParamsV2ToJson(this);

  @JsonKey(name: 'authenticatorName')
  final String authenticatorName;
  @JsonKey(name: 'challenge')
  final String challenge;
  @JsonKey(name: 'attestation')
  final V1Attestation attestation;
  static const fromJsonFactory = _$V1AuthenticatorParamsV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1AuthenticatorParamsV2 &&
            (identical(other.authenticatorName, authenticatorName) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorName, authenticatorName)) &&
            (identical(other.challenge, challenge) ||
                const DeepCollectionEquality()
                    .equals(other.challenge, challenge)) &&
            (identical(other.attestation, attestation) ||
                const DeepCollectionEquality()
                    .equals(other.attestation, attestation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticatorName) ^
      const DeepCollectionEquality().hash(challenge) ^
      const DeepCollectionEquality().hash(attestation) ^
      runtimeType.hashCode;
}

extension $V1AuthenticatorParamsV2Extension on V1AuthenticatorParamsV2 {
  V1AuthenticatorParamsV2 copyWith(
      {String? authenticatorName,
      String? challenge,
      V1Attestation? attestation}) {
    return V1AuthenticatorParamsV2(
        authenticatorName: authenticatorName ?? this.authenticatorName,
        challenge: challenge ?? this.challenge,
        attestation: attestation ?? this.attestation);
  }

  V1AuthenticatorParamsV2 copyWithWrapped(
      {Wrapped<String>? authenticatorName,
      Wrapped<String>? challenge,
      Wrapped<V1Attestation>? attestation}) {
    return V1AuthenticatorParamsV2(
        authenticatorName: (authenticatorName != null
            ? authenticatorName.value
            : this.authenticatorName),
        challenge: (challenge != null ? challenge.value : this.challenge),
        attestation:
            (attestation != null ? attestation.value : this.attestation));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Config {
  const V1Config({
    this.features,
    this.quorum,
  });

  factory V1Config.fromJson(Map<String, dynamic> json) =>
      _$V1ConfigFromJson(json);

  static const toJsonFactory = _$V1ConfigToJson;
  Map<String, dynamic> toJson() => _$V1ConfigToJson(this);

  @JsonKey(name: 'features', defaultValue: <V1Feature>[])
  final List<V1Feature>? features;
  @JsonKey(name: 'quorum')
  final Externaldatav1Quorum? quorum;
  static const fromJsonFactory = _$V1ConfigFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Config &&
            (identical(other.features, features) ||
                const DeepCollectionEquality()
                    .equals(other.features, features)) &&
            (identical(other.quorum, quorum) ||
                const DeepCollectionEquality().equals(other.quorum, quorum)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(features) ^
      const DeepCollectionEquality().hash(quorum) ^
      runtimeType.hashCode;
}

extension $V1ConfigExtension on V1Config {
  V1Config copyWith({List<V1Feature>? features, Externaldatav1Quorum? quorum}) {
    return V1Config(
        features: features ?? this.features, quorum: quorum ?? this.quorum);
  }

  V1Config copyWithWrapped(
      {Wrapped<List<V1Feature>?>? features,
      Wrapped<Externaldatav1Quorum?>? quorum}) {
    return V1Config(
        features: (features != null ? features.value : this.features),
        quorum: (quorum != null ? quorum.value : this.quorum));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiKeysIntent {
  const V1CreateApiKeysIntent({
    required this.apiKeys,
    required this.userId,
  });

  factory V1CreateApiKeysIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiKeysIntentFromJson(json);

  static const toJsonFactory = _$V1CreateApiKeysIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiKeysIntentToJson(this);

  @JsonKey(name: 'apiKeys', defaultValue: <ApiApiKeyParams>[])
  final List<ApiApiKeyParams> apiKeys;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1CreateApiKeysIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiKeysIntent &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1CreateApiKeysIntentExtension on V1CreateApiKeysIntent {
  V1CreateApiKeysIntent copyWith(
      {List<ApiApiKeyParams>? apiKeys, String? userId}) {
    return V1CreateApiKeysIntent(
        apiKeys: apiKeys ?? this.apiKeys, userId: userId ?? this.userId);
  }

  V1CreateApiKeysIntent copyWithWrapped(
      {Wrapped<List<ApiApiKeyParams>>? apiKeys, Wrapped<String>? userId}) {
    return V1CreateApiKeysIntent(
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiKeysIntentV2 {
  const V1CreateApiKeysIntentV2({
    required this.apiKeys,
    required this.userId,
  });

  factory V1CreateApiKeysIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiKeysIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreateApiKeysIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiKeysIntentV2ToJson(this);

  @JsonKey(name: 'apiKeys', defaultValue: <V1ApiKeyParamsV2>[])
  final List<V1ApiKeyParamsV2> apiKeys;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1CreateApiKeysIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiKeysIntentV2 &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1CreateApiKeysIntentV2Extension on V1CreateApiKeysIntentV2 {
  V1CreateApiKeysIntentV2 copyWith(
      {List<V1ApiKeyParamsV2>? apiKeys, String? userId}) {
    return V1CreateApiKeysIntentV2(
        apiKeys: apiKeys ?? this.apiKeys, userId: userId ?? this.userId);
  }

  V1CreateApiKeysIntentV2 copyWithWrapped(
      {Wrapped<List<V1ApiKeyParamsV2>>? apiKeys, Wrapped<String>? userId}) {
    return V1CreateApiKeysIntentV2(
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiKeysRequest {
  const V1CreateApiKeysRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateApiKeysRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiKeysRequestFromJson(json);

  static const toJsonFactory = _$V1CreateApiKeysRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiKeysRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateApiKeysRequestTypeToJson,
    fromJson: v1CreateApiKeysRequestTypeFromJson,
  )
  final enums.V1CreateApiKeysRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateApiKeysIntentV2 parameters;
  static const fromJsonFactory = _$V1CreateApiKeysRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiKeysRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateApiKeysRequestExtension on V1CreateApiKeysRequest {
  V1CreateApiKeysRequest copyWith(
      {enums.V1CreateApiKeysRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateApiKeysIntentV2? parameters}) {
    return V1CreateApiKeysRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateApiKeysRequest copyWithWrapped(
      {Wrapped<enums.V1CreateApiKeysRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateApiKeysIntentV2>? parameters}) {
    return V1CreateApiKeysRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiKeysResult {
  const V1CreateApiKeysResult({
    required this.apiKeyIds,
  });

  factory V1CreateApiKeysResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiKeysResultFromJson(json);

  static const toJsonFactory = _$V1CreateApiKeysResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiKeysResultToJson(this);

  @JsonKey(name: 'apiKeyIds', defaultValue: <String>[])
  final List<String> apiKeyIds;
  static const fromJsonFactory = _$V1CreateApiKeysResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiKeysResult &&
            (identical(other.apiKeyIds, apiKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyIds, apiKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeyIds) ^ runtimeType.hashCode;
}

extension $V1CreateApiKeysResultExtension on V1CreateApiKeysResult {
  V1CreateApiKeysResult copyWith({List<String>? apiKeyIds}) {
    return V1CreateApiKeysResult(apiKeyIds: apiKeyIds ?? this.apiKeyIds);
  }

  V1CreateApiKeysResult copyWithWrapped({Wrapped<List<String>>? apiKeyIds}) {
    return V1CreateApiKeysResult(
        apiKeyIds: (apiKeyIds != null ? apiKeyIds.value : this.apiKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiOnlyUsersIntent {
  const V1CreateApiOnlyUsersIntent({
    required this.apiOnlyUsers,
  });

  factory V1CreateApiOnlyUsersIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiOnlyUsersIntentFromJson(json);

  static const toJsonFactory = _$V1CreateApiOnlyUsersIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiOnlyUsersIntentToJson(this);

  @JsonKey(name: 'apiOnlyUsers', defaultValue: <V1ApiOnlyUserParams>[])
  final List<V1ApiOnlyUserParams> apiOnlyUsers;
  static const fromJsonFactory = _$V1CreateApiOnlyUsersIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiOnlyUsersIntent &&
            (identical(other.apiOnlyUsers, apiOnlyUsers) ||
                const DeepCollectionEquality()
                    .equals(other.apiOnlyUsers, apiOnlyUsers)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiOnlyUsers) ^ runtimeType.hashCode;
}

extension $V1CreateApiOnlyUsersIntentExtension on V1CreateApiOnlyUsersIntent {
  V1CreateApiOnlyUsersIntent copyWith(
      {List<V1ApiOnlyUserParams>? apiOnlyUsers}) {
    return V1CreateApiOnlyUsersIntent(
        apiOnlyUsers: apiOnlyUsers ?? this.apiOnlyUsers);
  }

  V1CreateApiOnlyUsersIntent copyWithWrapped(
      {Wrapped<List<V1ApiOnlyUserParams>>? apiOnlyUsers}) {
    return V1CreateApiOnlyUsersIntent(
        apiOnlyUsers:
            (apiOnlyUsers != null ? apiOnlyUsers.value : this.apiOnlyUsers));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiOnlyUsersRequest {
  const V1CreateApiOnlyUsersRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateApiOnlyUsersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiOnlyUsersRequestFromJson(json);

  static const toJsonFactory = _$V1CreateApiOnlyUsersRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiOnlyUsersRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateApiOnlyUsersRequestTypeToJson,
    fromJson: v1CreateApiOnlyUsersRequestTypeFromJson,
  )
  final enums.V1CreateApiOnlyUsersRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateApiOnlyUsersIntent parameters;
  static const fromJsonFactory = _$V1CreateApiOnlyUsersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiOnlyUsersRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateApiOnlyUsersRequestExtension on V1CreateApiOnlyUsersRequest {
  V1CreateApiOnlyUsersRequest copyWith(
      {enums.V1CreateApiOnlyUsersRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateApiOnlyUsersIntent? parameters}) {
    return V1CreateApiOnlyUsersRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateApiOnlyUsersRequest copyWithWrapped(
      {Wrapped<enums.V1CreateApiOnlyUsersRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateApiOnlyUsersIntent>? parameters}) {
    return V1CreateApiOnlyUsersRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateApiOnlyUsersResult {
  const V1CreateApiOnlyUsersResult({
    required this.userIds,
  });

  factory V1CreateApiOnlyUsersResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateApiOnlyUsersResultFromJson(json);

  static const toJsonFactory = _$V1CreateApiOnlyUsersResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateApiOnlyUsersResultToJson(this);

  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1CreateApiOnlyUsersResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateApiOnlyUsersResult &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userIds) ^ runtimeType.hashCode;
}

extension $V1CreateApiOnlyUsersResultExtension on V1CreateApiOnlyUsersResult {
  V1CreateApiOnlyUsersResult copyWith({List<String>? userIds}) {
    return V1CreateApiOnlyUsersResult(userIds: userIds ?? this.userIds);
  }

  V1CreateApiOnlyUsersResult copyWithWrapped({Wrapped<List<String>>? userIds}) {
    return V1CreateApiOnlyUsersResult(
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateAuthenticatorsIntent {
  const V1CreateAuthenticatorsIntent({
    required this.authenticators,
    required this.userId,
  });

  factory V1CreateAuthenticatorsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateAuthenticatorsIntentFromJson(json);

  static const toJsonFactory = _$V1CreateAuthenticatorsIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateAuthenticatorsIntentToJson(this);

  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParams>[])
  final List<V1AuthenticatorParams> authenticators;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1CreateAuthenticatorsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateAuthenticatorsIntent &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1CreateAuthenticatorsIntentExtension
    on V1CreateAuthenticatorsIntent {
  V1CreateAuthenticatorsIntent copyWith(
      {List<V1AuthenticatorParams>? authenticators, String? userId}) {
    return V1CreateAuthenticatorsIntent(
        authenticators: authenticators ?? this.authenticators,
        userId: userId ?? this.userId);
  }

  V1CreateAuthenticatorsIntent copyWithWrapped(
      {Wrapped<List<V1AuthenticatorParams>>? authenticators,
      Wrapped<String>? userId}) {
    return V1CreateAuthenticatorsIntent(
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateAuthenticatorsIntentV2 {
  const V1CreateAuthenticatorsIntentV2({
    required this.authenticators,
    required this.userId,
  });

  factory V1CreateAuthenticatorsIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreateAuthenticatorsIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreateAuthenticatorsIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreateAuthenticatorsIntentV2ToJson(this);

  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParamsV2>[])
  final List<V1AuthenticatorParamsV2> authenticators;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1CreateAuthenticatorsIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateAuthenticatorsIntentV2 &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1CreateAuthenticatorsIntentV2Extension
    on V1CreateAuthenticatorsIntentV2 {
  V1CreateAuthenticatorsIntentV2 copyWith(
      {List<V1AuthenticatorParamsV2>? authenticators, String? userId}) {
    return V1CreateAuthenticatorsIntentV2(
        authenticators: authenticators ?? this.authenticators,
        userId: userId ?? this.userId);
  }

  V1CreateAuthenticatorsIntentV2 copyWithWrapped(
      {Wrapped<List<V1AuthenticatorParamsV2>>? authenticators,
      Wrapped<String>? userId}) {
    return V1CreateAuthenticatorsIntentV2(
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateAuthenticatorsRequest {
  const V1CreateAuthenticatorsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateAuthenticatorsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateAuthenticatorsRequestFromJson(json);

  static const toJsonFactory = _$V1CreateAuthenticatorsRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateAuthenticatorsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateAuthenticatorsRequestTypeToJson,
    fromJson: v1CreateAuthenticatorsRequestTypeFromJson,
  )
  final enums.V1CreateAuthenticatorsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateAuthenticatorsIntentV2 parameters;
  static const fromJsonFactory = _$V1CreateAuthenticatorsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateAuthenticatorsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateAuthenticatorsRequestExtension
    on V1CreateAuthenticatorsRequest {
  V1CreateAuthenticatorsRequest copyWith(
      {enums.V1CreateAuthenticatorsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateAuthenticatorsIntentV2? parameters}) {
    return V1CreateAuthenticatorsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateAuthenticatorsRequest copyWithWrapped(
      {Wrapped<enums.V1CreateAuthenticatorsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateAuthenticatorsIntentV2>? parameters}) {
    return V1CreateAuthenticatorsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateAuthenticatorsResult {
  const V1CreateAuthenticatorsResult({
    required this.authenticatorIds,
  });

  factory V1CreateAuthenticatorsResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateAuthenticatorsResultFromJson(json);

  static const toJsonFactory = _$V1CreateAuthenticatorsResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateAuthenticatorsResultToJson(this);

  @JsonKey(name: 'authenticatorIds', defaultValue: <String>[])
  final List<String> authenticatorIds;
  static const fromJsonFactory = _$V1CreateAuthenticatorsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateAuthenticatorsResult &&
            (identical(other.authenticatorIds, authenticatorIds) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorIds, authenticatorIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticatorIds) ^
      runtimeType.hashCode;
}

extension $V1CreateAuthenticatorsResultExtension
    on V1CreateAuthenticatorsResult {
  V1CreateAuthenticatorsResult copyWith({List<String>? authenticatorIds}) {
    return V1CreateAuthenticatorsResult(
        authenticatorIds: authenticatorIds ?? this.authenticatorIds);
  }

  V1CreateAuthenticatorsResult copyWithWrapped(
      {Wrapped<List<String>>? authenticatorIds}) {
    return V1CreateAuthenticatorsResult(
        authenticatorIds: (authenticatorIds != null
            ? authenticatorIds.value
            : this.authenticatorIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateInvitationsIntent {
  const V1CreateInvitationsIntent({
    required this.invitations,
  });

  factory V1CreateInvitationsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateInvitationsIntentFromJson(json);

  static const toJsonFactory = _$V1CreateInvitationsIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateInvitationsIntentToJson(this);

  @JsonKey(name: 'invitations', defaultValue: <V1InvitationParams>[])
  final List<V1InvitationParams> invitations;
  static const fromJsonFactory = _$V1CreateInvitationsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateInvitationsIntent &&
            (identical(other.invitations, invitations) ||
                const DeepCollectionEquality()
                    .equals(other.invitations, invitations)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitations) ^ runtimeType.hashCode;
}

extension $V1CreateInvitationsIntentExtension on V1CreateInvitationsIntent {
  V1CreateInvitationsIntent copyWith({List<V1InvitationParams>? invitations}) {
    return V1CreateInvitationsIntent(
        invitations: invitations ?? this.invitations);
  }

  V1CreateInvitationsIntent copyWithWrapped(
      {Wrapped<List<V1InvitationParams>>? invitations}) {
    return V1CreateInvitationsIntent(
        invitations:
            (invitations != null ? invitations.value : this.invitations));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateInvitationsRequest {
  const V1CreateInvitationsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateInvitationsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateInvitationsRequestFromJson(json);

  static const toJsonFactory = _$V1CreateInvitationsRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateInvitationsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateInvitationsRequestTypeToJson,
    fromJson: v1CreateInvitationsRequestTypeFromJson,
  )
  final enums.V1CreateInvitationsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateInvitationsIntent parameters;
  static const fromJsonFactory = _$V1CreateInvitationsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateInvitationsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateInvitationsRequestExtension on V1CreateInvitationsRequest {
  V1CreateInvitationsRequest copyWith(
      {enums.V1CreateInvitationsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateInvitationsIntent? parameters}) {
    return V1CreateInvitationsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateInvitationsRequest copyWithWrapped(
      {Wrapped<enums.V1CreateInvitationsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateInvitationsIntent>? parameters}) {
    return V1CreateInvitationsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateInvitationsResult {
  const V1CreateInvitationsResult({
    required this.invitationIds,
  });

  factory V1CreateInvitationsResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateInvitationsResultFromJson(json);

  static const toJsonFactory = _$V1CreateInvitationsResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateInvitationsResultToJson(this);

  @JsonKey(name: 'invitationIds', defaultValue: <String>[])
  final List<String> invitationIds;
  static const fromJsonFactory = _$V1CreateInvitationsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateInvitationsResult &&
            (identical(other.invitationIds, invitationIds) ||
                const DeepCollectionEquality()
                    .equals(other.invitationIds, invitationIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationIds) ^ runtimeType.hashCode;
}

extension $V1CreateInvitationsResultExtension on V1CreateInvitationsResult {
  V1CreateInvitationsResult copyWith({List<String>? invitationIds}) {
    return V1CreateInvitationsResult(
        invitationIds: invitationIds ?? this.invitationIds);
  }

  V1CreateInvitationsResult copyWithWrapped(
      {Wrapped<List<String>>? invitationIds}) {
    return V1CreateInvitationsResult(
        invitationIds:
            (invitationIds != null ? invitationIds.value : this.invitationIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateOauthProvidersIntent {
  const V1CreateOauthProvidersIntent({
    required this.userId,
    required this.oauthProviders,
  });

  factory V1CreateOauthProvidersIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateOauthProvidersIntentFromJson(json);

  static const toJsonFactory = _$V1CreateOauthProvidersIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateOauthProvidersIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'oauthProviders', defaultValue: <V1OauthProviderParams>[])
  final List<V1OauthProviderParams> oauthProviders;
  static const fromJsonFactory = _$V1CreateOauthProvidersIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateOauthProvidersIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.oauthProviders, oauthProviders) ||
                const DeepCollectionEquality()
                    .equals(other.oauthProviders, oauthProviders)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(oauthProviders) ^
      runtimeType.hashCode;
}

extension $V1CreateOauthProvidersIntentExtension
    on V1CreateOauthProvidersIntent {
  V1CreateOauthProvidersIntent copyWith(
      {String? userId, List<V1OauthProviderParams>? oauthProviders}) {
    return V1CreateOauthProvidersIntent(
        userId: userId ?? this.userId,
        oauthProviders: oauthProviders ?? this.oauthProviders);
  }

  V1CreateOauthProvidersIntent copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<List<V1OauthProviderParams>>? oauthProviders}) {
    return V1CreateOauthProvidersIntent(
        userId: (userId != null ? userId.value : this.userId),
        oauthProviders: (oauthProviders != null
            ? oauthProviders.value
            : this.oauthProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateOauthProvidersRequest {
  const V1CreateOauthProvidersRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateOauthProvidersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateOauthProvidersRequestFromJson(json);

  static const toJsonFactory = _$V1CreateOauthProvidersRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateOauthProvidersRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateOauthProvidersRequestTypeToJson,
    fromJson: v1CreateOauthProvidersRequestTypeFromJson,
  )
  final enums.V1CreateOauthProvidersRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateOauthProvidersIntent parameters;
  static const fromJsonFactory = _$V1CreateOauthProvidersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateOauthProvidersRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateOauthProvidersRequestExtension
    on V1CreateOauthProvidersRequest {
  V1CreateOauthProvidersRequest copyWith(
      {enums.V1CreateOauthProvidersRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateOauthProvidersIntent? parameters}) {
    return V1CreateOauthProvidersRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateOauthProvidersRequest copyWithWrapped(
      {Wrapped<enums.V1CreateOauthProvidersRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateOauthProvidersIntent>? parameters}) {
    return V1CreateOauthProvidersRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateOauthProvidersResult {
  const V1CreateOauthProvidersResult({
    required this.providerIds,
  });

  factory V1CreateOauthProvidersResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateOauthProvidersResultFromJson(json);

  static const toJsonFactory = _$V1CreateOauthProvidersResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateOauthProvidersResultToJson(this);

  @JsonKey(name: 'providerIds', defaultValue: <String>[])
  final List<String> providerIds;
  static const fromJsonFactory = _$V1CreateOauthProvidersResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateOauthProvidersResult &&
            (identical(other.providerIds, providerIds) ||
                const DeepCollectionEquality()
                    .equals(other.providerIds, providerIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(providerIds) ^ runtimeType.hashCode;
}

extension $V1CreateOauthProvidersResultExtension
    on V1CreateOauthProvidersResult {
  V1CreateOauthProvidersResult copyWith({List<String>? providerIds}) {
    return V1CreateOauthProvidersResult(
        providerIds: providerIds ?? this.providerIds);
  }

  V1CreateOauthProvidersResult copyWithWrapped(
      {Wrapped<List<String>>? providerIds}) {
    return V1CreateOauthProvidersResult(
        providerIds:
            (providerIds != null ? providerIds.value : this.providerIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateOrganizationIntent {
  const V1CreateOrganizationIntent({
    required this.organizationName,
    required this.rootEmail,
    required this.rootAuthenticator,
    this.rootUserId,
  });

  factory V1CreateOrganizationIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateOrganizationIntentFromJson(json);

  static const toJsonFactory = _$V1CreateOrganizationIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateOrganizationIntentToJson(this);

  @JsonKey(name: 'organizationName')
  final String organizationName;
  @JsonKey(name: 'rootEmail')
  final String rootEmail;
  @JsonKey(name: 'rootAuthenticator')
  final V1AuthenticatorParams rootAuthenticator;
  @JsonKey(name: 'rootUserId')
  final String? rootUserId;
  static const fromJsonFactory = _$V1CreateOrganizationIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateOrganizationIntent &&
            (identical(other.organizationName, organizationName) ||
                const DeepCollectionEquality()
                    .equals(other.organizationName, organizationName)) &&
            (identical(other.rootEmail, rootEmail) ||
                const DeepCollectionEquality()
                    .equals(other.rootEmail, rootEmail)) &&
            (identical(other.rootAuthenticator, rootAuthenticator) ||
                const DeepCollectionEquality()
                    .equals(other.rootAuthenticator, rootAuthenticator)) &&
            (identical(other.rootUserId, rootUserId) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserId, rootUserId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationName) ^
      const DeepCollectionEquality().hash(rootEmail) ^
      const DeepCollectionEquality().hash(rootAuthenticator) ^
      const DeepCollectionEquality().hash(rootUserId) ^
      runtimeType.hashCode;
}

extension $V1CreateOrganizationIntentExtension on V1CreateOrganizationIntent {
  V1CreateOrganizationIntent copyWith(
      {String? organizationName,
      String? rootEmail,
      V1AuthenticatorParams? rootAuthenticator,
      String? rootUserId}) {
    return V1CreateOrganizationIntent(
        organizationName: organizationName ?? this.organizationName,
        rootEmail: rootEmail ?? this.rootEmail,
        rootAuthenticator: rootAuthenticator ?? this.rootAuthenticator,
        rootUserId: rootUserId ?? this.rootUserId);
  }

  V1CreateOrganizationIntent copyWithWrapped(
      {Wrapped<String>? organizationName,
      Wrapped<String>? rootEmail,
      Wrapped<V1AuthenticatorParams>? rootAuthenticator,
      Wrapped<String?>? rootUserId}) {
    return V1CreateOrganizationIntent(
        organizationName: (organizationName != null
            ? organizationName.value
            : this.organizationName),
        rootEmail: (rootEmail != null ? rootEmail.value : this.rootEmail),
        rootAuthenticator: (rootAuthenticator != null
            ? rootAuthenticator.value
            : this.rootAuthenticator),
        rootUserId: (rootUserId != null ? rootUserId.value : this.rootUserId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateOrganizationIntentV2 {
  const V1CreateOrganizationIntentV2({
    required this.organizationName,
    required this.rootEmail,
    required this.rootAuthenticator,
    this.rootUserId,
  });

  factory V1CreateOrganizationIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreateOrganizationIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreateOrganizationIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreateOrganizationIntentV2ToJson(this);

  @JsonKey(name: 'organizationName')
  final String organizationName;
  @JsonKey(name: 'rootEmail')
  final String rootEmail;
  @JsonKey(name: 'rootAuthenticator')
  final V1AuthenticatorParamsV2 rootAuthenticator;
  @JsonKey(name: 'rootUserId')
  final String? rootUserId;
  static const fromJsonFactory = _$V1CreateOrganizationIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateOrganizationIntentV2 &&
            (identical(other.organizationName, organizationName) ||
                const DeepCollectionEquality()
                    .equals(other.organizationName, organizationName)) &&
            (identical(other.rootEmail, rootEmail) ||
                const DeepCollectionEquality()
                    .equals(other.rootEmail, rootEmail)) &&
            (identical(other.rootAuthenticator, rootAuthenticator) ||
                const DeepCollectionEquality()
                    .equals(other.rootAuthenticator, rootAuthenticator)) &&
            (identical(other.rootUserId, rootUserId) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserId, rootUserId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationName) ^
      const DeepCollectionEquality().hash(rootEmail) ^
      const DeepCollectionEquality().hash(rootAuthenticator) ^
      const DeepCollectionEquality().hash(rootUserId) ^
      runtimeType.hashCode;
}

extension $V1CreateOrganizationIntentV2Extension
    on V1CreateOrganizationIntentV2 {
  V1CreateOrganizationIntentV2 copyWith(
      {String? organizationName,
      String? rootEmail,
      V1AuthenticatorParamsV2? rootAuthenticator,
      String? rootUserId}) {
    return V1CreateOrganizationIntentV2(
        organizationName: organizationName ?? this.organizationName,
        rootEmail: rootEmail ?? this.rootEmail,
        rootAuthenticator: rootAuthenticator ?? this.rootAuthenticator,
        rootUserId: rootUserId ?? this.rootUserId);
  }

  V1CreateOrganizationIntentV2 copyWithWrapped(
      {Wrapped<String>? organizationName,
      Wrapped<String>? rootEmail,
      Wrapped<V1AuthenticatorParamsV2>? rootAuthenticator,
      Wrapped<String?>? rootUserId}) {
    return V1CreateOrganizationIntentV2(
        organizationName: (organizationName != null
            ? organizationName.value
            : this.organizationName),
        rootEmail: (rootEmail != null ? rootEmail.value : this.rootEmail),
        rootAuthenticator: (rootAuthenticator != null
            ? rootAuthenticator.value
            : this.rootAuthenticator),
        rootUserId: (rootUserId != null ? rootUserId.value : this.rootUserId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateOrganizationResult {
  const V1CreateOrganizationResult({
    required this.organizationId,
  });

  factory V1CreateOrganizationResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateOrganizationResultFromJson(json);

  static const toJsonFactory = _$V1CreateOrganizationResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateOrganizationResultToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1CreateOrganizationResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateOrganizationResult &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1CreateOrganizationResultExtension on V1CreateOrganizationResult {
  V1CreateOrganizationResult copyWith({String? organizationId}) {
    return V1CreateOrganizationResult(
        organizationId: organizationId ?? this.organizationId);
  }

  V1CreateOrganizationResult copyWithWrapped(
      {Wrapped<String>? organizationId}) {
    return V1CreateOrganizationResult(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePoliciesIntent {
  const V1CreatePoliciesIntent({
    required this.policies,
  });

  factory V1CreatePoliciesIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePoliciesIntentFromJson(json);

  static const toJsonFactory = _$V1CreatePoliciesIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreatePoliciesIntentToJson(this);

  @JsonKey(name: 'policies', defaultValue: <V1CreatePolicyIntentV3>[])
  final List<V1CreatePolicyIntentV3> policies;
  static const fromJsonFactory = _$V1CreatePoliciesIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePoliciesIntent &&
            (identical(other.policies, policies) ||
                const DeepCollectionEquality()
                    .equals(other.policies, policies)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policies) ^ runtimeType.hashCode;
}

extension $V1CreatePoliciesIntentExtension on V1CreatePoliciesIntent {
  V1CreatePoliciesIntent copyWith({List<V1CreatePolicyIntentV3>? policies}) {
    return V1CreatePoliciesIntent(policies: policies ?? this.policies);
  }

  V1CreatePoliciesIntent copyWithWrapped(
      {Wrapped<List<V1CreatePolicyIntentV3>>? policies}) {
    return V1CreatePoliciesIntent(
        policies: (policies != null ? policies.value : this.policies));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePoliciesRequest {
  const V1CreatePoliciesRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreatePoliciesRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePoliciesRequestFromJson(json);

  static const toJsonFactory = _$V1CreatePoliciesRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreatePoliciesRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreatePoliciesRequestTypeToJson,
    fromJson: v1CreatePoliciesRequestTypeFromJson,
  )
  final enums.V1CreatePoliciesRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreatePoliciesIntent parameters;
  static const fromJsonFactory = _$V1CreatePoliciesRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePoliciesRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreatePoliciesRequestExtension on V1CreatePoliciesRequest {
  V1CreatePoliciesRequest copyWith(
      {enums.V1CreatePoliciesRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreatePoliciesIntent? parameters}) {
    return V1CreatePoliciesRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreatePoliciesRequest copyWithWrapped(
      {Wrapped<enums.V1CreatePoliciesRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreatePoliciesIntent>? parameters}) {
    return V1CreatePoliciesRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePoliciesResult {
  const V1CreatePoliciesResult({
    required this.policyIds,
  });

  factory V1CreatePoliciesResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePoliciesResultFromJson(json);

  static const toJsonFactory = _$V1CreatePoliciesResultToJson;
  Map<String, dynamic> toJson() => _$V1CreatePoliciesResultToJson(this);

  @JsonKey(name: 'policyIds', defaultValue: <String>[])
  final List<String> policyIds;
  static const fromJsonFactory = _$V1CreatePoliciesResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePoliciesResult &&
            (identical(other.policyIds, policyIds) ||
                const DeepCollectionEquality()
                    .equals(other.policyIds, policyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyIds) ^ runtimeType.hashCode;
}

extension $V1CreatePoliciesResultExtension on V1CreatePoliciesResult {
  V1CreatePoliciesResult copyWith({List<String>? policyIds}) {
    return V1CreatePoliciesResult(policyIds: policyIds ?? this.policyIds);
  }

  V1CreatePoliciesResult copyWithWrapped({Wrapped<List<String>>? policyIds}) {
    return V1CreatePoliciesResult(
        policyIds: (policyIds != null ? policyIds.value : this.policyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePolicyIntent {
  const V1CreatePolicyIntent({
    required this.policyName,
    required this.selectors,
    required this.effect,
    this.notes,
  });

  factory V1CreatePolicyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePolicyIntentFromJson(json);

  static const toJsonFactory = _$V1CreatePolicyIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreatePolicyIntentToJson(this);

  @JsonKey(name: 'policyName')
  final String policyName;
  @JsonKey(name: 'selectors', defaultValue: <V1Selector>[])
  final List<V1Selector> selectors;
  @JsonKey(
    name: 'effect',
    toJson: v1EffectToJson,
    fromJson: v1EffectFromJson,
  )
  final enums.V1Effect effect;
  @JsonKey(name: 'notes')
  final String? notes;
  static const fromJsonFactory = _$V1CreatePolicyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePolicyIntent &&
            (identical(other.policyName, policyName) ||
                const DeepCollectionEquality()
                    .equals(other.policyName, policyName)) &&
            (identical(other.selectors, selectors) ||
                const DeepCollectionEquality()
                    .equals(other.selectors, selectors)) &&
            (identical(other.effect, effect) ||
                const DeepCollectionEquality().equals(other.effect, effect)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyName) ^
      const DeepCollectionEquality().hash(selectors) ^
      const DeepCollectionEquality().hash(effect) ^
      const DeepCollectionEquality().hash(notes) ^
      runtimeType.hashCode;
}

extension $V1CreatePolicyIntentExtension on V1CreatePolicyIntent {
  V1CreatePolicyIntent copyWith(
      {String? policyName,
      List<V1Selector>? selectors,
      enums.V1Effect? effect,
      String? notes}) {
    return V1CreatePolicyIntent(
        policyName: policyName ?? this.policyName,
        selectors: selectors ?? this.selectors,
        effect: effect ?? this.effect,
        notes: notes ?? this.notes);
  }

  V1CreatePolicyIntent copyWithWrapped(
      {Wrapped<String>? policyName,
      Wrapped<List<V1Selector>>? selectors,
      Wrapped<enums.V1Effect>? effect,
      Wrapped<String?>? notes}) {
    return V1CreatePolicyIntent(
        policyName: (policyName != null ? policyName.value : this.policyName),
        selectors: (selectors != null ? selectors.value : this.selectors),
        effect: (effect != null ? effect.value : this.effect),
        notes: (notes != null ? notes.value : this.notes));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePolicyIntentV2 {
  const V1CreatePolicyIntentV2({
    required this.policyName,
    required this.selectors,
    required this.effect,
    this.notes,
  });

  factory V1CreatePolicyIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePolicyIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreatePolicyIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreatePolicyIntentV2ToJson(this);

  @JsonKey(name: 'policyName')
  final String policyName;
  @JsonKey(name: 'selectors', defaultValue: <V1SelectorV2>[])
  final List<V1SelectorV2> selectors;
  @JsonKey(
    name: 'effect',
    toJson: v1EffectToJson,
    fromJson: v1EffectFromJson,
  )
  final enums.V1Effect effect;
  @JsonKey(name: 'notes')
  final String? notes;
  static const fromJsonFactory = _$V1CreatePolicyIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePolicyIntentV2 &&
            (identical(other.policyName, policyName) ||
                const DeepCollectionEquality()
                    .equals(other.policyName, policyName)) &&
            (identical(other.selectors, selectors) ||
                const DeepCollectionEquality()
                    .equals(other.selectors, selectors)) &&
            (identical(other.effect, effect) ||
                const DeepCollectionEquality().equals(other.effect, effect)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyName) ^
      const DeepCollectionEquality().hash(selectors) ^
      const DeepCollectionEquality().hash(effect) ^
      const DeepCollectionEquality().hash(notes) ^
      runtimeType.hashCode;
}

extension $V1CreatePolicyIntentV2Extension on V1CreatePolicyIntentV2 {
  V1CreatePolicyIntentV2 copyWith(
      {String? policyName,
      List<V1SelectorV2>? selectors,
      enums.V1Effect? effect,
      String? notes}) {
    return V1CreatePolicyIntentV2(
        policyName: policyName ?? this.policyName,
        selectors: selectors ?? this.selectors,
        effect: effect ?? this.effect,
        notes: notes ?? this.notes);
  }

  V1CreatePolicyIntentV2 copyWithWrapped(
      {Wrapped<String>? policyName,
      Wrapped<List<V1SelectorV2>>? selectors,
      Wrapped<enums.V1Effect>? effect,
      Wrapped<String?>? notes}) {
    return V1CreatePolicyIntentV2(
        policyName: (policyName != null ? policyName.value : this.policyName),
        selectors: (selectors != null ? selectors.value : this.selectors),
        effect: (effect != null ? effect.value : this.effect),
        notes: (notes != null ? notes.value : this.notes));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePolicyIntentV3 {
  const V1CreatePolicyIntentV3({
    required this.policyName,
    required this.effect,
    this.condition,
    this.consensus,
    this.notes,
  });

  factory V1CreatePolicyIntentV3.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePolicyIntentV3FromJson(json);

  static const toJsonFactory = _$V1CreatePolicyIntentV3ToJson;
  Map<String, dynamic> toJson() => _$V1CreatePolicyIntentV3ToJson(this);

  @JsonKey(name: 'policyName')
  final String policyName;
  @JsonKey(
    name: 'effect',
    toJson: v1EffectToJson,
    fromJson: v1EffectFromJson,
  )
  final enums.V1Effect effect;
  @JsonKey(name: 'condition')
  final String? condition;
  @JsonKey(name: 'consensus')
  final String? consensus;
  @JsonKey(name: 'notes')
  final String? notes;
  static const fromJsonFactory = _$V1CreatePolicyIntentV3FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePolicyIntentV3 &&
            (identical(other.policyName, policyName) ||
                const DeepCollectionEquality()
                    .equals(other.policyName, policyName)) &&
            (identical(other.effect, effect) ||
                const DeepCollectionEquality().equals(other.effect, effect)) &&
            (identical(other.condition, condition) ||
                const DeepCollectionEquality()
                    .equals(other.condition, condition)) &&
            (identical(other.consensus, consensus) ||
                const DeepCollectionEquality()
                    .equals(other.consensus, consensus)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyName) ^
      const DeepCollectionEquality().hash(effect) ^
      const DeepCollectionEquality().hash(condition) ^
      const DeepCollectionEquality().hash(consensus) ^
      const DeepCollectionEquality().hash(notes) ^
      runtimeType.hashCode;
}

extension $V1CreatePolicyIntentV3Extension on V1CreatePolicyIntentV3 {
  V1CreatePolicyIntentV3 copyWith(
      {String? policyName,
      enums.V1Effect? effect,
      String? condition,
      String? consensus,
      String? notes}) {
    return V1CreatePolicyIntentV3(
        policyName: policyName ?? this.policyName,
        effect: effect ?? this.effect,
        condition: condition ?? this.condition,
        consensus: consensus ?? this.consensus,
        notes: notes ?? this.notes);
  }

  V1CreatePolicyIntentV3 copyWithWrapped(
      {Wrapped<String>? policyName,
      Wrapped<enums.V1Effect>? effect,
      Wrapped<String?>? condition,
      Wrapped<String?>? consensus,
      Wrapped<String?>? notes}) {
    return V1CreatePolicyIntentV3(
        policyName: (policyName != null ? policyName.value : this.policyName),
        effect: (effect != null ? effect.value : this.effect),
        condition: (condition != null ? condition.value : this.condition),
        consensus: (consensus != null ? consensus.value : this.consensus),
        notes: (notes != null ? notes.value : this.notes));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePolicyRequest {
  const V1CreatePolicyRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreatePolicyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePolicyRequestFromJson(json);

  static const toJsonFactory = _$V1CreatePolicyRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreatePolicyRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreatePolicyRequestTypeToJson,
    fromJson: v1CreatePolicyRequestTypeFromJson,
  )
  final enums.V1CreatePolicyRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreatePolicyIntentV3 parameters;
  static const fromJsonFactory = _$V1CreatePolicyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePolicyRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreatePolicyRequestExtension on V1CreatePolicyRequest {
  V1CreatePolicyRequest copyWith(
      {enums.V1CreatePolicyRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreatePolicyIntentV3? parameters}) {
    return V1CreatePolicyRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreatePolicyRequest copyWithWrapped(
      {Wrapped<enums.V1CreatePolicyRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreatePolicyIntentV3>? parameters}) {
    return V1CreatePolicyRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePolicyResult {
  const V1CreatePolicyResult({
    required this.policyId,
  });

  factory V1CreatePolicyResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePolicyResultFromJson(json);

  static const toJsonFactory = _$V1CreatePolicyResultToJson;
  Map<String, dynamic> toJson() => _$V1CreatePolicyResultToJson(this);

  @JsonKey(name: 'policyId')
  final String policyId;
  static const fromJsonFactory = _$V1CreatePolicyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePolicyResult &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyId) ^ runtimeType.hashCode;
}

extension $V1CreatePolicyResultExtension on V1CreatePolicyResult {
  V1CreatePolicyResult copyWith({String? policyId}) {
    return V1CreatePolicyResult(policyId: policyId ?? this.policyId);
  }

  V1CreatePolicyResult copyWithWrapped({Wrapped<String>? policyId}) {
    return V1CreatePolicyResult(
        policyId: (policyId != null ? policyId.value : this.policyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeyTagIntent {
  const V1CreatePrivateKeyTagIntent({
    required this.privateKeyTagName,
    required this.privateKeyIds,
  });

  factory V1CreatePrivateKeyTagIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeyTagIntentFromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeyTagIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeyTagIntentToJson(this);

  @JsonKey(name: 'privateKeyTagName')
  final String privateKeyTagName;
  @JsonKey(name: 'privateKeyIds', defaultValue: <String>[])
  final List<String> privateKeyIds;
  static const fromJsonFactory = _$V1CreatePrivateKeyTagIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeyTagIntent &&
            (identical(other.privateKeyTagName, privateKeyTagName) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTagName, privateKeyTagName)) &&
            (identical(other.privateKeyIds, privateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyIds, privateKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTagName) ^
      const DeepCollectionEquality().hash(privateKeyIds) ^
      runtimeType.hashCode;
}

extension $V1CreatePrivateKeyTagIntentExtension on V1CreatePrivateKeyTagIntent {
  V1CreatePrivateKeyTagIntent copyWith(
      {String? privateKeyTagName, List<String>? privateKeyIds}) {
    return V1CreatePrivateKeyTagIntent(
        privateKeyTagName: privateKeyTagName ?? this.privateKeyTagName,
        privateKeyIds: privateKeyIds ?? this.privateKeyIds);
  }

  V1CreatePrivateKeyTagIntent copyWithWrapped(
      {Wrapped<String>? privateKeyTagName,
      Wrapped<List<String>>? privateKeyIds}) {
    return V1CreatePrivateKeyTagIntent(
        privateKeyTagName: (privateKeyTagName != null
            ? privateKeyTagName.value
            : this.privateKeyTagName),
        privateKeyIds:
            (privateKeyIds != null ? privateKeyIds.value : this.privateKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeyTagRequest {
  const V1CreatePrivateKeyTagRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreatePrivateKeyTagRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeyTagRequestFromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeyTagRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeyTagRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreatePrivateKeyTagRequestTypeToJson,
    fromJson: v1CreatePrivateKeyTagRequestTypeFromJson,
  )
  final enums.V1CreatePrivateKeyTagRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreatePrivateKeyTagIntent parameters;
  static const fromJsonFactory = _$V1CreatePrivateKeyTagRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeyTagRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreatePrivateKeyTagRequestExtension
    on V1CreatePrivateKeyTagRequest {
  V1CreatePrivateKeyTagRequest copyWith(
      {enums.V1CreatePrivateKeyTagRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreatePrivateKeyTagIntent? parameters}) {
    return V1CreatePrivateKeyTagRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreatePrivateKeyTagRequest copyWithWrapped(
      {Wrapped<enums.V1CreatePrivateKeyTagRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreatePrivateKeyTagIntent>? parameters}) {
    return V1CreatePrivateKeyTagRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeyTagResult {
  const V1CreatePrivateKeyTagResult({
    required this.privateKeyTagId,
    required this.privateKeyIds,
  });

  factory V1CreatePrivateKeyTagResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeyTagResultFromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeyTagResultToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeyTagResultToJson(this);

  @JsonKey(name: 'privateKeyTagId')
  final String privateKeyTagId;
  @JsonKey(name: 'privateKeyIds', defaultValue: <String>[])
  final List<String> privateKeyIds;
  static const fromJsonFactory = _$V1CreatePrivateKeyTagResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeyTagResult &&
            (identical(other.privateKeyTagId, privateKeyTagId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTagId, privateKeyTagId)) &&
            (identical(other.privateKeyIds, privateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyIds, privateKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTagId) ^
      const DeepCollectionEquality().hash(privateKeyIds) ^
      runtimeType.hashCode;
}

extension $V1CreatePrivateKeyTagResultExtension on V1CreatePrivateKeyTagResult {
  V1CreatePrivateKeyTagResult copyWith(
      {String? privateKeyTagId, List<String>? privateKeyIds}) {
    return V1CreatePrivateKeyTagResult(
        privateKeyTagId: privateKeyTagId ?? this.privateKeyTagId,
        privateKeyIds: privateKeyIds ?? this.privateKeyIds);
  }

  V1CreatePrivateKeyTagResult copyWithWrapped(
      {Wrapped<String>? privateKeyTagId,
      Wrapped<List<String>>? privateKeyIds}) {
    return V1CreatePrivateKeyTagResult(
        privateKeyTagId: (privateKeyTagId != null
            ? privateKeyTagId.value
            : this.privateKeyTagId),
        privateKeyIds:
            (privateKeyIds != null ? privateKeyIds.value : this.privateKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeysIntent {
  const V1CreatePrivateKeysIntent({
    required this.privateKeys,
  });

  factory V1CreatePrivateKeysIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeysIntentFromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeysIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeysIntentToJson(this);

  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKeyParams>[])
  final List<V1PrivateKeyParams> privateKeys;
  static const fromJsonFactory = _$V1CreatePrivateKeysIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeysIntent &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeys) ^ runtimeType.hashCode;
}

extension $V1CreatePrivateKeysIntentExtension on V1CreatePrivateKeysIntent {
  V1CreatePrivateKeysIntent copyWith({List<V1PrivateKeyParams>? privateKeys}) {
    return V1CreatePrivateKeysIntent(
        privateKeys: privateKeys ?? this.privateKeys);
  }

  V1CreatePrivateKeysIntent copyWithWrapped(
      {Wrapped<List<V1PrivateKeyParams>>? privateKeys}) {
    return V1CreatePrivateKeysIntent(
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeysIntentV2 {
  const V1CreatePrivateKeysIntentV2({
    required this.privateKeys,
  });

  factory V1CreatePrivateKeysIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeysIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeysIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeysIntentV2ToJson(this);

  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKeyParams>[])
  final List<V1PrivateKeyParams> privateKeys;
  static const fromJsonFactory = _$V1CreatePrivateKeysIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeysIntentV2 &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeys) ^ runtimeType.hashCode;
}

extension $V1CreatePrivateKeysIntentV2Extension on V1CreatePrivateKeysIntentV2 {
  V1CreatePrivateKeysIntentV2 copyWith(
      {List<V1PrivateKeyParams>? privateKeys}) {
    return V1CreatePrivateKeysIntentV2(
        privateKeys: privateKeys ?? this.privateKeys);
  }

  V1CreatePrivateKeysIntentV2 copyWithWrapped(
      {Wrapped<List<V1PrivateKeyParams>>? privateKeys}) {
    return V1CreatePrivateKeysIntentV2(
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeysRequest {
  const V1CreatePrivateKeysRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreatePrivateKeysRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeysRequestFromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeysRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeysRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreatePrivateKeysRequestTypeToJson,
    fromJson: v1CreatePrivateKeysRequestTypeFromJson,
  )
  final enums.V1CreatePrivateKeysRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreatePrivateKeysIntentV2 parameters;
  static const fromJsonFactory = _$V1CreatePrivateKeysRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeysRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreatePrivateKeysRequestExtension on V1CreatePrivateKeysRequest {
  V1CreatePrivateKeysRequest copyWith(
      {enums.V1CreatePrivateKeysRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreatePrivateKeysIntentV2? parameters}) {
    return V1CreatePrivateKeysRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreatePrivateKeysRequest copyWithWrapped(
      {Wrapped<enums.V1CreatePrivateKeysRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreatePrivateKeysIntentV2>? parameters}) {
    return V1CreatePrivateKeysRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeysResult {
  const V1CreatePrivateKeysResult({
    required this.privateKeyIds,
  });

  factory V1CreatePrivateKeysResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeysResultFromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeysResultToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeysResultToJson(this);

  @JsonKey(name: 'privateKeyIds', defaultValue: <String>[])
  final List<String> privateKeyIds;
  static const fromJsonFactory = _$V1CreatePrivateKeysResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeysResult &&
            (identical(other.privateKeyIds, privateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyIds, privateKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyIds) ^ runtimeType.hashCode;
}

extension $V1CreatePrivateKeysResultExtension on V1CreatePrivateKeysResult {
  V1CreatePrivateKeysResult copyWith({List<String>? privateKeyIds}) {
    return V1CreatePrivateKeysResult(
        privateKeyIds: privateKeyIds ?? this.privateKeyIds);
  }

  V1CreatePrivateKeysResult copyWithWrapped(
      {Wrapped<List<String>>? privateKeyIds}) {
    return V1CreatePrivateKeysResult(
        privateKeyIds:
            (privateKeyIds != null ? privateKeyIds.value : this.privateKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreatePrivateKeysResultV2 {
  const V1CreatePrivateKeysResultV2({
    required this.privateKeys,
  });

  factory V1CreatePrivateKeysResultV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreatePrivateKeysResultV2FromJson(json);

  static const toJsonFactory = _$V1CreatePrivateKeysResultV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreatePrivateKeysResultV2ToJson(this);

  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKeyResult>[])
  final List<V1PrivateKeyResult> privateKeys;
  static const fromJsonFactory = _$V1CreatePrivateKeysResultV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreatePrivateKeysResultV2 &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeys) ^ runtimeType.hashCode;
}

extension $V1CreatePrivateKeysResultV2Extension on V1CreatePrivateKeysResultV2 {
  V1CreatePrivateKeysResultV2 copyWith(
      {List<V1PrivateKeyResult>? privateKeys}) {
    return V1CreatePrivateKeysResultV2(
        privateKeys: privateKeys ?? this.privateKeys);
  }

  V1CreatePrivateKeysResultV2 copyWithWrapped(
      {Wrapped<List<V1PrivateKeyResult>>? privateKeys}) {
    return V1CreatePrivateKeysResultV2(
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadOnlySessionIntent {
  const V1CreateReadOnlySessionIntent();

  factory V1CreateReadOnlySessionIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateReadOnlySessionIntentFromJson(json);

  static const toJsonFactory = _$V1CreateReadOnlySessionIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateReadOnlySessionIntentToJson(this);

  static const fromJsonFactory = _$V1CreateReadOnlySessionIntentFromJson;

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadOnlySessionRequest {
  const V1CreateReadOnlySessionRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateReadOnlySessionRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateReadOnlySessionRequestFromJson(json);

  static const toJsonFactory = _$V1CreateReadOnlySessionRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateReadOnlySessionRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateReadOnlySessionRequestTypeToJson,
    fromJson: v1CreateReadOnlySessionRequestTypeFromJson,
  )
  final enums.V1CreateReadOnlySessionRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateReadOnlySessionIntent parameters;
  static const fromJsonFactory = _$V1CreateReadOnlySessionRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadOnlySessionRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateReadOnlySessionRequestExtension
    on V1CreateReadOnlySessionRequest {
  V1CreateReadOnlySessionRequest copyWith(
      {enums.V1CreateReadOnlySessionRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateReadOnlySessionIntent? parameters}) {
    return V1CreateReadOnlySessionRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateReadOnlySessionRequest copyWithWrapped(
      {Wrapped<enums.V1CreateReadOnlySessionRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateReadOnlySessionIntent>? parameters}) {
    return V1CreateReadOnlySessionRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadOnlySessionResult {
  const V1CreateReadOnlySessionResult({
    required this.organizationId,
    required this.organizationName,
    required this.userId,
    required this.username,
    required this.session,
    required this.sessionExpiry,
  });

  factory V1CreateReadOnlySessionResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateReadOnlySessionResultFromJson(json);

  static const toJsonFactory = _$V1CreateReadOnlySessionResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateReadOnlySessionResultToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'organizationName')
  final String organizationName;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'username')
  final String username;
  @JsonKey(name: 'session')
  final String session;
  @JsonKey(name: 'sessionExpiry')
  final String sessionExpiry;
  static const fromJsonFactory = _$V1CreateReadOnlySessionResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadOnlySessionResult &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.organizationName, organizationName) ||
                const DeepCollectionEquality()
                    .equals(other.organizationName, organizationName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.username, username) ||
                const DeepCollectionEquality()
                    .equals(other.username, username)) &&
            (identical(other.session, session) ||
                const DeepCollectionEquality()
                    .equals(other.session, session)) &&
            (identical(other.sessionExpiry, sessionExpiry) ||
                const DeepCollectionEquality()
                    .equals(other.sessionExpiry, sessionExpiry)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(organizationName) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(username) ^
      const DeepCollectionEquality().hash(session) ^
      const DeepCollectionEquality().hash(sessionExpiry) ^
      runtimeType.hashCode;
}

extension $V1CreateReadOnlySessionResultExtension
    on V1CreateReadOnlySessionResult {
  V1CreateReadOnlySessionResult copyWith(
      {String? organizationId,
      String? organizationName,
      String? userId,
      String? username,
      String? session,
      String? sessionExpiry}) {
    return V1CreateReadOnlySessionResult(
        organizationId: organizationId ?? this.organizationId,
        organizationName: organizationName ?? this.organizationName,
        userId: userId ?? this.userId,
        username: username ?? this.username,
        session: session ?? this.session,
        sessionExpiry: sessionExpiry ?? this.sessionExpiry);
  }

  V1CreateReadOnlySessionResult copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String>? organizationName,
      Wrapped<String>? userId,
      Wrapped<String>? username,
      Wrapped<String>? session,
      Wrapped<String>? sessionExpiry}) {
    return V1CreateReadOnlySessionResult(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        organizationName: (organizationName != null
            ? organizationName.value
            : this.organizationName),
        userId: (userId != null ? userId.value : this.userId),
        username: (username != null ? username.value : this.username),
        session: (session != null ? session.value : this.session),
        sessionExpiry:
            (sessionExpiry != null ? sessionExpiry.value : this.sessionExpiry));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadWriteSessionIntent {
  const V1CreateReadWriteSessionIntent({
    required this.targetPublicKey,
    required this.email,
    this.apiKeyName,
    this.expirationSeconds,
  });

  factory V1CreateReadWriteSessionIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateReadWriteSessionIntentFromJson(json);

  static const toJsonFactory = _$V1CreateReadWriteSessionIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateReadWriteSessionIntentToJson(this);

  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(name: 'email')
  final String email;
  @JsonKey(name: 'apiKeyName')
  final String? apiKeyName;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  static const fromJsonFactory = _$V1CreateReadWriteSessionIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadWriteSessionIntent &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      runtimeType.hashCode;
}

extension $V1CreateReadWriteSessionIntentExtension
    on V1CreateReadWriteSessionIntent {
  V1CreateReadWriteSessionIntent copyWith(
      {String? targetPublicKey,
      String? email,
      String? apiKeyName,
      String? expirationSeconds}) {
    return V1CreateReadWriteSessionIntent(
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        email: email ?? this.email,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds);
  }

  V1CreateReadWriteSessionIntent copyWithWrapped(
      {Wrapped<String>? targetPublicKey,
      Wrapped<String>? email,
      Wrapped<String?>? apiKeyName,
      Wrapped<String?>? expirationSeconds}) {
    return V1CreateReadWriteSessionIntent(
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        email: (email != null ? email.value : this.email),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadWriteSessionIntentV2 {
  const V1CreateReadWriteSessionIntentV2({
    required this.targetPublicKey,
    this.userId,
    this.apiKeyName,
    this.expirationSeconds,
  });

  factory V1CreateReadWriteSessionIntentV2.fromJson(
          Map<String, dynamic> json) =>
      _$V1CreateReadWriteSessionIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreateReadWriteSessionIntentV2ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateReadWriteSessionIntentV2ToJson(this);

  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(name: 'userId')
  final String? userId;
  @JsonKey(name: 'apiKeyName')
  final String? apiKeyName;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  static const fromJsonFactory = _$V1CreateReadWriteSessionIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadWriteSessionIntentV2 &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      runtimeType.hashCode;
}

extension $V1CreateReadWriteSessionIntentV2Extension
    on V1CreateReadWriteSessionIntentV2 {
  V1CreateReadWriteSessionIntentV2 copyWith(
      {String? targetPublicKey,
      String? userId,
      String? apiKeyName,
      String? expirationSeconds}) {
    return V1CreateReadWriteSessionIntentV2(
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        userId: userId ?? this.userId,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds);
  }

  V1CreateReadWriteSessionIntentV2 copyWithWrapped(
      {Wrapped<String>? targetPublicKey,
      Wrapped<String?>? userId,
      Wrapped<String?>? apiKeyName,
      Wrapped<String?>? expirationSeconds}) {
    return V1CreateReadWriteSessionIntentV2(
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        userId: (userId != null ? userId.value : this.userId),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadWriteSessionRequest {
  const V1CreateReadWriteSessionRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateReadWriteSessionRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateReadWriteSessionRequestFromJson(json);

  static const toJsonFactory = _$V1CreateReadWriteSessionRequestToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateReadWriteSessionRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateReadWriteSessionRequestTypeToJson,
    fromJson: v1CreateReadWriteSessionRequestTypeFromJson,
  )
  final enums.V1CreateReadWriteSessionRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateReadWriteSessionIntentV2 parameters;
  static const fromJsonFactory = _$V1CreateReadWriteSessionRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadWriteSessionRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateReadWriteSessionRequestExtension
    on V1CreateReadWriteSessionRequest {
  V1CreateReadWriteSessionRequest copyWith(
      {enums.V1CreateReadWriteSessionRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateReadWriteSessionIntentV2? parameters}) {
    return V1CreateReadWriteSessionRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateReadWriteSessionRequest copyWithWrapped(
      {Wrapped<enums.V1CreateReadWriteSessionRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateReadWriteSessionIntentV2>? parameters}) {
    return V1CreateReadWriteSessionRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadWriteSessionResult {
  const V1CreateReadWriteSessionResult({
    required this.organizationId,
    required this.organizationName,
    required this.userId,
    required this.username,
    required this.apiKeyId,
    required this.credentialBundle,
  });

  factory V1CreateReadWriteSessionResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateReadWriteSessionResultFromJson(json);

  static const toJsonFactory = _$V1CreateReadWriteSessionResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateReadWriteSessionResultToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'organizationName')
  final String organizationName;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'username')
  final String username;
  @JsonKey(name: 'apiKeyId')
  final String apiKeyId;
  @JsonKey(name: 'credentialBundle')
  final String credentialBundle;
  static const fromJsonFactory = _$V1CreateReadWriteSessionResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadWriteSessionResult &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.organizationName, organizationName) ||
                const DeepCollectionEquality()
                    .equals(other.organizationName, organizationName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.username, username) ||
                const DeepCollectionEquality()
                    .equals(other.username, username)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)) &&
            (identical(other.credentialBundle, credentialBundle) ||
                const DeepCollectionEquality()
                    .equals(other.credentialBundle, credentialBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(organizationName) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(username) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      const DeepCollectionEquality().hash(credentialBundle) ^
      runtimeType.hashCode;
}

extension $V1CreateReadWriteSessionResultExtension
    on V1CreateReadWriteSessionResult {
  V1CreateReadWriteSessionResult copyWith(
      {String? organizationId,
      String? organizationName,
      String? userId,
      String? username,
      String? apiKeyId,
      String? credentialBundle}) {
    return V1CreateReadWriteSessionResult(
        organizationId: organizationId ?? this.organizationId,
        organizationName: organizationName ?? this.organizationName,
        userId: userId ?? this.userId,
        username: username ?? this.username,
        apiKeyId: apiKeyId ?? this.apiKeyId,
        credentialBundle: credentialBundle ?? this.credentialBundle);
  }

  V1CreateReadWriteSessionResult copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String>? organizationName,
      Wrapped<String>? userId,
      Wrapped<String>? username,
      Wrapped<String>? apiKeyId,
      Wrapped<String>? credentialBundle}) {
    return V1CreateReadWriteSessionResult(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        organizationName: (organizationName != null
            ? organizationName.value
            : this.organizationName),
        userId: (userId != null ? userId.value : this.userId),
        username: (username != null ? username.value : this.username),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId),
        credentialBundle: (credentialBundle != null
            ? credentialBundle.value
            : this.credentialBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateReadWriteSessionResultV2 {
  const V1CreateReadWriteSessionResultV2({
    required this.organizationId,
    required this.organizationName,
    required this.userId,
    required this.username,
    required this.apiKeyId,
    required this.credentialBundle,
  });

  factory V1CreateReadWriteSessionResultV2.fromJson(
          Map<String, dynamic> json) =>
      _$V1CreateReadWriteSessionResultV2FromJson(json);

  static const toJsonFactory = _$V1CreateReadWriteSessionResultV2ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateReadWriteSessionResultV2ToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'organizationName')
  final String organizationName;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'username')
  final String username;
  @JsonKey(name: 'apiKeyId')
  final String apiKeyId;
  @JsonKey(name: 'credentialBundle')
  final String credentialBundle;
  static const fromJsonFactory = _$V1CreateReadWriteSessionResultV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateReadWriteSessionResultV2 &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.organizationName, organizationName) ||
                const DeepCollectionEquality()
                    .equals(other.organizationName, organizationName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.username, username) ||
                const DeepCollectionEquality()
                    .equals(other.username, username)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)) &&
            (identical(other.credentialBundle, credentialBundle) ||
                const DeepCollectionEquality()
                    .equals(other.credentialBundle, credentialBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(organizationName) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(username) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      const DeepCollectionEquality().hash(credentialBundle) ^
      runtimeType.hashCode;
}

extension $V1CreateReadWriteSessionResultV2Extension
    on V1CreateReadWriteSessionResultV2 {
  V1CreateReadWriteSessionResultV2 copyWith(
      {String? organizationId,
      String? organizationName,
      String? userId,
      String? username,
      String? apiKeyId,
      String? credentialBundle}) {
    return V1CreateReadWriteSessionResultV2(
        organizationId: organizationId ?? this.organizationId,
        organizationName: organizationName ?? this.organizationName,
        userId: userId ?? this.userId,
        username: username ?? this.username,
        apiKeyId: apiKeyId ?? this.apiKeyId,
        credentialBundle: credentialBundle ?? this.credentialBundle);
  }

  V1CreateReadWriteSessionResultV2 copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String>? organizationName,
      Wrapped<String>? userId,
      Wrapped<String>? username,
      Wrapped<String>? apiKeyId,
      Wrapped<String>? credentialBundle}) {
    return V1CreateReadWriteSessionResultV2(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        organizationName: (organizationName != null
            ? organizationName.value
            : this.organizationName),
        userId: (userId != null ? userId.value : this.userId),
        username: (username != null ? username.value : this.username),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId),
        credentialBundle: (credentialBundle != null
            ? credentialBundle.value
            : this.credentialBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntent {
  const V1CreateSubOrganizationIntent({
    required this.name,
    required this.rootAuthenticator,
  });

  factory V1CreateSubOrganizationIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentFromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateSubOrganizationIntentToJson(this);

  @JsonKey(name: 'name')
  final String name;
  @JsonKey(name: 'rootAuthenticator')
  final V1AuthenticatorParamsV2 rootAuthenticator;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntent &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.rootAuthenticator, rootAuthenticator) ||
                const DeepCollectionEquality()
                    .equals(other.rootAuthenticator, rootAuthenticator)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(rootAuthenticator) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentExtension
    on V1CreateSubOrganizationIntent {
  V1CreateSubOrganizationIntent copyWith(
      {String? name, V1AuthenticatorParamsV2? rootAuthenticator}) {
    return V1CreateSubOrganizationIntent(
        name: name ?? this.name,
        rootAuthenticator: rootAuthenticator ?? this.rootAuthenticator);
  }

  V1CreateSubOrganizationIntent copyWithWrapped(
      {Wrapped<String>? name,
      Wrapped<V1AuthenticatorParamsV2>? rootAuthenticator}) {
    return V1CreateSubOrganizationIntent(
        name: (name != null ? name.value : this.name),
        rootAuthenticator: (rootAuthenticator != null
            ? rootAuthenticator.value
            : this.rootAuthenticator));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntentV2 {
  const V1CreateSubOrganizationIntentV2({
    required this.subOrganizationName,
    required this.rootUsers,
    required this.rootQuorumThreshold,
  });

  factory V1CreateSubOrganizationIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentV2ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationIntentV2ToJson(this);

  @JsonKey(name: 'subOrganizationName')
  final String subOrganizationName;
  @JsonKey(name: 'rootUsers', defaultValue: <V1RootUserParams>[])
  final List<V1RootUserParams> rootUsers;
  @JsonKey(name: 'rootQuorumThreshold')
  final int rootQuorumThreshold;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntentV2 &&
            (identical(other.subOrganizationName, subOrganizationName) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationName, subOrganizationName)) &&
            (identical(other.rootUsers, rootUsers) ||
                const DeepCollectionEquality()
                    .equals(other.rootUsers, rootUsers)) &&
            (identical(other.rootQuorumThreshold, rootQuorumThreshold) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorumThreshold, rootQuorumThreshold)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationName) ^
      const DeepCollectionEquality().hash(rootUsers) ^
      const DeepCollectionEquality().hash(rootQuorumThreshold) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentV2Extension
    on V1CreateSubOrganizationIntentV2 {
  V1CreateSubOrganizationIntentV2 copyWith(
      {String? subOrganizationName,
      List<V1RootUserParams>? rootUsers,
      int? rootQuorumThreshold}) {
    return V1CreateSubOrganizationIntentV2(
        subOrganizationName: subOrganizationName ?? this.subOrganizationName,
        rootUsers: rootUsers ?? this.rootUsers,
        rootQuorumThreshold: rootQuorumThreshold ?? this.rootQuorumThreshold);
  }

  V1CreateSubOrganizationIntentV2 copyWithWrapped(
      {Wrapped<String>? subOrganizationName,
      Wrapped<List<V1RootUserParams>>? rootUsers,
      Wrapped<int>? rootQuorumThreshold}) {
    return V1CreateSubOrganizationIntentV2(
        subOrganizationName: (subOrganizationName != null
            ? subOrganizationName.value
            : this.subOrganizationName),
        rootUsers: (rootUsers != null ? rootUsers.value : this.rootUsers),
        rootQuorumThreshold: (rootQuorumThreshold != null
            ? rootQuorumThreshold.value
            : this.rootQuorumThreshold));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntentV3 {
  const V1CreateSubOrganizationIntentV3({
    required this.subOrganizationName,
    required this.rootUsers,
    required this.rootQuorumThreshold,
    required this.privateKeys,
  });

  factory V1CreateSubOrganizationIntentV3.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentV3FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentV3ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationIntentV3ToJson(this);

  @JsonKey(name: 'subOrganizationName')
  final String subOrganizationName;
  @JsonKey(name: 'rootUsers', defaultValue: <V1RootUserParams>[])
  final List<V1RootUserParams> rootUsers;
  @JsonKey(name: 'rootQuorumThreshold')
  final int rootQuorumThreshold;
  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKeyParams>[])
  final List<V1PrivateKeyParams> privateKeys;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentV3FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntentV3 &&
            (identical(other.subOrganizationName, subOrganizationName) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationName, subOrganizationName)) &&
            (identical(other.rootUsers, rootUsers) ||
                const DeepCollectionEquality()
                    .equals(other.rootUsers, rootUsers)) &&
            (identical(other.rootQuorumThreshold, rootQuorumThreshold) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorumThreshold, rootQuorumThreshold)) &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationName) ^
      const DeepCollectionEquality().hash(rootUsers) ^
      const DeepCollectionEquality().hash(rootQuorumThreshold) ^
      const DeepCollectionEquality().hash(privateKeys) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentV3Extension
    on V1CreateSubOrganizationIntentV3 {
  V1CreateSubOrganizationIntentV3 copyWith(
      {String? subOrganizationName,
      List<V1RootUserParams>? rootUsers,
      int? rootQuorumThreshold,
      List<V1PrivateKeyParams>? privateKeys}) {
    return V1CreateSubOrganizationIntentV3(
        subOrganizationName: subOrganizationName ?? this.subOrganizationName,
        rootUsers: rootUsers ?? this.rootUsers,
        rootQuorumThreshold: rootQuorumThreshold ?? this.rootQuorumThreshold,
        privateKeys: privateKeys ?? this.privateKeys);
  }

  V1CreateSubOrganizationIntentV3 copyWithWrapped(
      {Wrapped<String>? subOrganizationName,
      Wrapped<List<V1RootUserParams>>? rootUsers,
      Wrapped<int>? rootQuorumThreshold,
      Wrapped<List<V1PrivateKeyParams>>? privateKeys}) {
    return V1CreateSubOrganizationIntentV3(
        subOrganizationName: (subOrganizationName != null
            ? subOrganizationName.value
            : this.subOrganizationName),
        rootUsers: (rootUsers != null ? rootUsers.value : this.rootUsers),
        rootQuorumThreshold: (rootQuorumThreshold != null
            ? rootQuorumThreshold.value
            : this.rootQuorumThreshold),
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntentV4 {
  const V1CreateSubOrganizationIntentV4({
    required this.subOrganizationName,
    required this.rootUsers,
    required this.rootQuorumThreshold,
    this.wallet,
    this.disableEmailRecovery,
    this.disableEmailAuth,
  });

  factory V1CreateSubOrganizationIntentV4.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentV4FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentV4ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationIntentV4ToJson(this);

  @JsonKey(name: 'subOrganizationName')
  final String subOrganizationName;
  @JsonKey(name: 'rootUsers', defaultValue: <V1RootUserParams>[])
  final List<V1RootUserParams> rootUsers;
  @JsonKey(name: 'rootQuorumThreshold')
  final int rootQuorumThreshold;
  @JsonKey(name: 'wallet')
  final V1WalletParams? wallet;
  @JsonKey(name: 'disableEmailRecovery')
  final bool? disableEmailRecovery;
  @JsonKey(name: 'disableEmailAuth')
  final bool? disableEmailAuth;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentV4FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntentV4 &&
            (identical(other.subOrganizationName, subOrganizationName) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationName, subOrganizationName)) &&
            (identical(other.rootUsers, rootUsers) ||
                const DeepCollectionEquality()
                    .equals(other.rootUsers, rootUsers)) &&
            (identical(other.rootQuorumThreshold, rootQuorumThreshold) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorumThreshold, rootQuorumThreshold)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.disableEmailRecovery, disableEmailRecovery) ||
                const DeepCollectionEquality().equals(
                    other.disableEmailRecovery, disableEmailRecovery)) &&
            (identical(other.disableEmailAuth, disableEmailAuth) ||
                const DeepCollectionEquality()
                    .equals(other.disableEmailAuth, disableEmailAuth)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationName) ^
      const DeepCollectionEquality().hash(rootUsers) ^
      const DeepCollectionEquality().hash(rootQuorumThreshold) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(disableEmailRecovery) ^
      const DeepCollectionEquality().hash(disableEmailAuth) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentV4Extension
    on V1CreateSubOrganizationIntentV4 {
  V1CreateSubOrganizationIntentV4 copyWith(
      {String? subOrganizationName,
      List<V1RootUserParams>? rootUsers,
      int? rootQuorumThreshold,
      V1WalletParams? wallet,
      bool? disableEmailRecovery,
      bool? disableEmailAuth}) {
    return V1CreateSubOrganizationIntentV4(
        subOrganizationName: subOrganizationName ?? this.subOrganizationName,
        rootUsers: rootUsers ?? this.rootUsers,
        rootQuorumThreshold: rootQuorumThreshold ?? this.rootQuorumThreshold,
        wallet: wallet ?? this.wallet,
        disableEmailRecovery: disableEmailRecovery ?? this.disableEmailRecovery,
        disableEmailAuth: disableEmailAuth ?? this.disableEmailAuth);
  }

  V1CreateSubOrganizationIntentV4 copyWithWrapped(
      {Wrapped<String>? subOrganizationName,
      Wrapped<List<V1RootUserParams>>? rootUsers,
      Wrapped<int>? rootQuorumThreshold,
      Wrapped<V1WalletParams?>? wallet,
      Wrapped<bool?>? disableEmailRecovery,
      Wrapped<bool?>? disableEmailAuth}) {
    return V1CreateSubOrganizationIntentV4(
        subOrganizationName: (subOrganizationName != null
            ? subOrganizationName.value
            : this.subOrganizationName),
        rootUsers: (rootUsers != null ? rootUsers.value : this.rootUsers),
        rootQuorumThreshold: (rootQuorumThreshold != null
            ? rootQuorumThreshold.value
            : this.rootQuorumThreshold),
        wallet: (wallet != null ? wallet.value : this.wallet),
        disableEmailRecovery: (disableEmailRecovery != null
            ? disableEmailRecovery.value
            : this.disableEmailRecovery),
        disableEmailAuth: (disableEmailAuth != null
            ? disableEmailAuth.value
            : this.disableEmailAuth));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntentV5 {
  const V1CreateSubOrganizationIntentV5({
    required this.subOrganizationName,
    required this.rootUsers,
    required this.rootQuorumThreshold,
    this.wallet,
    this.disableEmailRecovery,
    this.disableEmailAuth,
  });

  factory V1CreateSubOrganizationIntentV5.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentV5FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentV5ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationIntentV5ToJson(this);

  @JsonKey(name: 'subOrganizationName')
  final String subOrganizationName;
  @JsonKey(name: 'rootUsers', defaultValue: <V1RootUserParamsV2>[])
  final List<V1RootUserParamsV2> rootUsers;
  @JsonKey(name: 'rootQuorumThreshold')
  final int rootQuorumThreshold;
  @JsonKey(name: 'wallet')
  final V1WalletParams? wallet;
  @JsonKey(name: 'disableEmailRecovery')
  final bool? disableEmailRecovery;
  @JsonKey(name: 'disableEmailAuth')
  final bool? disableEmailAuth;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentV5FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntentV5 &&
            (identical(other.subOrganizationName, subOrganizationName) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationName, subOrganizationName)) &&
            (identical(other.rootUsers, rootUsers) ||
                const DeepCollectionEquality()
                    .equals(other.rootUsers, rootUsers)) &&
            (identical(other.rootQuorumThreshold, rootQuorumThreshold) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorumThreshold, rootQuorumThreshold)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.disableEmailRecovery, disableEmailRecovery) ||
                const DeepCollectionEquality().equals(
                    other.disableEmailRecovery, disableEmailRecovery)) &&
            (identical(other.disableEmailAuth, disableEmailAuth) ||
                const DeepCollectionEquality()
                    .equals(other.disableEmailAuth, disableEmailAuth)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationName) ^
      const DeepCollectionEquality().hash(rootUsers) ^
      const DeepCollectionEquality().hash(rootQuorumThreshold) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(disableEmailRecovery) ^
      const DeepCollectionEquality().hash(disableEmailAuth) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentV5Extension
    on V1CreateSubOrganizationIntentV5 {
  V1CreateSubOrganizationIntentV5 copyWith(
      {String? subOrganizationName,
      List<V1RootUserParamsV2>? rootUsers,
      int? rootQuorumThreshold,
      V1WalletParams? wallet,
      bool? disableEmailRecovery,
      bool? disableEmailAuth}) {
    return V1CreateSubOrganizationIntentV5(
        subOrganizationName: subOrganizationName ?? this.subOrganizationName,
        rootUsers: rootUsers ?? this.rootUsers,
        rootQuorumThreshold: rootQuorumThreshold ?? this.rootQuorumThreshold,
        wallet: wallet ?? this.wallet,
        disableEmailRecovery: disableEmailRecovery ?? this.disableEmailRecovery,
        disableEmailAuth: disableEmailAuth ?? this.disableEmailAuth);
  }

  V1CreateSubOrganizationIntentV5 copyWithWrapped(
      {Wrapped<String>? subOrganizationName,
      Wrapped<List<V1RootUserParamsV2>>? rootUsers,
      Wrapped<int>? rootQuorumThreshold,
      Wrapped<V1WalletParams?>? wallet,
      Wrapped<bool?>? disableEmailRecovery,
      Wrapped<bool?>? disableEmailAuth}) {
    return V1CreateSubOrganizationIntentV5(
        subOrganizationName: (subOrganizationName != null
            ? subOrganizationName.value
            : this.subOrganizationName),
        rootUsers: (rootUsers != null ? rootUsers.value : this.rootUsers),
        rootQuorumThreshold: (rootQuorumThreshold != null
            ? rootQuorumThreshold.value
            : this.rootQuorumThreshold),
        wallet: (wallet != null ? wallet.value : this.wallet),
        disableEmailRecovery: (disableEmailRecovery != null
            ? disableEmailRecovery.value
            : this.disableEmailRecovery),
        disableEmailAuth: (disableEmailAuth != null
            ? disableEmailAuth.value
            : this.disableEmailAuth));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntentV6 {
  const V1CreateSubOrganizationIntentV6({
    required this.subOrganizationName,
    required this.rootUsers,
    required this.rootQuorumThreshold,
    this.wallet,
    this.disableEmailRecovery,
    this.disableEmailAuth,
  });

  factory V1CreateSubOrganizationIntentV6.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentV6FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentV6ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationIntentV6ToJson(this);

  @JsonKey(name: 'subOrganizationName')
  final String subOrganizationName;
  @JsonKey(name: 'rootUsers', defaultValue: <V1RootUserParamsV3>[])
  final List<V1RootUserParamsV3> rootUsers;
  @JsonKey(name: 'rootQuorumThreshold')
  final int rootQuorumThreshold;
  @JsonKey(name: 'wallet')
  final V1WalletParams? wallet;
  @JsonKey(name: 'disableEmailRecovery')
  final bool? disableEmailRecovery;
  @JsonKey(name: 'disableEmailAuth')
  final bool? disableEmailAuth;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentV6FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntentV6 &&
            (identical(other.subOrganizationName, subOrganizationName) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationName, subOrganizationName)) &&
            (identical(other.rootUsers, rootUsers) ||
                const DeepCollectionEquality()
                    .equals(other.rootUsers, rootUsers)) &&
            (identical(other.rootQuorumThreshold, rootQuorumThreshold) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorumThreshold, rootQuorumThreshold)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.disableEmailRecovery, disableEmailRecovery) ||
                const DeepCollectionEquality().equals(
                    other.disableEmailRecovery, disableEmailRecovery)) &&
            (identical(other.disableEmailAuth, disableEmailAuth) ||
                const DeepCollectionEquality()
                    .equals(other.disableEmailAuth, disableEmailAuth)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationName) ^
      const DeepCollectionEquality().hash(rootUsers) ^
      const DeepCollectionEquality().hash(rootQuorumThreshold) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(disableEmailRecovery) ^
      const DeepCollectionEquality().hash(disableEmailAuth) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentV6Extension
    on V1CreateSubOrganizationIntentV6 {
  V1CreateSubOrganizationIntentV6 copyWith(
      {String? subOrganizationName,
      List<V1RootUserParamsV3>? rootUsers,
      int? rootQuorumThreshold,
      V1WalletParams? wallet,
      bool? disableEmailRecovery,
      bool? disableEmailAuth}) {
    return V1CreateSubOrganizationIntentV6(
        subOrganizationName: subOrganizationName ?? this.subOrganizationName,
        rootUsers: rootUsers ?? this.rootUsers,
        rootQuorumThreshold: rootQuorumThreshold ?? this.rootQuorumThreshold,
        wallet: wallet ?? this.wallet,
        disableEmailRecovery: disableEmailRecovery ?? this.disableEmailRecovery,
        disableEmailAuth: disableEmailAuth ?? this.disableEmailAuth);
  }

  V1CreateSubOrganizationIntentV6 copyWithWrapped(
      {Wrapped<String>? subOrganizationName,
      Wrapped<List<V1RootUserParamsV3>>? rootUsers,
      Wrapped<int>? rootQuorumThreshold,
      Wrapped<V1WalletParams?>? wallet,
      Wrapped<bool?>? disableEmailRecovery,
      Wrapped<bool?>? disableEmailAuth}) {
    return V1CreateSubOrganizationIntentV6(
        subOrganizationName: (subOrganizationName != null
            ? subOrganizationName.value
            : this.subOrganizationName),
        rootUsers: (rootUsers != null ? rootUsers.value : this.rootUsers),
        rootQuorumThreshold: (rootQuorumThreshold != null
            ? rootQuorumThreshold.value
            : this.rootQuorumThreshold),
        wallet: (wallet != null ? wallet.value : this.wallet),
        disableEmailRecovery: (disableEmailRecovery != null
            ? disableEmailRecovery.value
            : this.disableEmailRecovery),
        disableEmailAuth: (disableEmailAuth != null
            ? disableEmailAuth.value
            : this.disableEmailAuth));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationIntentV7 {
  const V1CreateSubOrganizationIntentV7({
    required this.subOrganizationName,
    required this.rootUsers,
    required this.rootQuorumThreshold,
    this.wallet,
    this.disableEmailRecovery,
    this.disableEmailAuth,
    this.disableSmsAuth,
    this.disableOtpEmailAuth,
  });

  factory V1CreateSubOrganizationIntentV7.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationIntentV7FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationIntentV7ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationIntentV7ToJson(this);

  @JsonKey(name: 'subOrganizationName')
  final String subOrganizationName;
  @JsonKey(name: 'rootUsers', defaultValue: <V1RootUserParamsV4>[])
  final List<V1RootUserParamsV4> rootUsers;
  @JsonKey(name: 'rootQuorumThreshold')
  final int rootQuorumThreshold;
  @JsonKey(name: 'wallet')
  final V1WalletParams? wallet;
  @JsonKey(name: 'disableEmailRecovery')
  final bool? disableEmailRecovery;
  @JsonKey(name: 'disableEmailAuth')
  final bool? disableEmailAuth;
  @JsonKey(name: 'disableSmsAuth')
  final bool? disableSmsAuth;
  @JsonKey(name: 'disableOtpEmailAuth')
  final bool? disableOtpEmailAuth;
  static const fromJsonFactory = _$V1CreateSubOrganizationIntentV7FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationIntentV7 &&
            (identical(other.subOrganizationName, subOrganizationName) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationName, subOrganizationName)) &&
            (identical(other.rootUsers, rootUsers) ||
                const DeepCollectionEquality()
                    .equals(other.rootUsers, rootUsers)) &&
            (identical(other.rootQuorumThreshold, rootQuorumThreshold) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorumThreshold, rootQuorumThreshold)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.disableEmailRecovery, disableEmailRecovery) ||
                const DeepCollectionEquality().equals(
                    other.disableEmailRecovery, disableEmailRecovery)) &&
            (identical(other.disableEmailAuth, disableEmailAuth) ||
                const DeepCollectionEquality()
                    .equals(other.disableEmailAuth, disableEmailAuth)) &&
            (identical(other.disableSmsAuth, disableSmsAuth) ||
                const DeepCollectionEquality()
                    .equals(other.disableSmsAuth, disableSmsAuth)) &&
            (identical(other.disableOtpEmailAuth, disableOtpEmailAuth) ||
                const DeepCollectionEquality()
                    .equals(other.disableOtpEmailAuth, disableOtpEmailAuth)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationName) ^
      const DeepCollectionEquality().hash(rootUsers) ^
      const DeepCollectionEquality().hash(rootQuorumThreshold) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(disableEmailRecovery) ^
      const DeepCollectionEquality().hash(disableEmailAuth) ^
      const DeepCollectionEquality().hash(disableSmsAuth) ^
      const DeepCollectionEquality().hash(disableOtpEmailAuth) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationIntentV7Extension
    on V1CreateSubOrganizationIntentV7 {
  V1CreateSubOrganizationIntentV7 copyWith(
      {String? subOrganizationName,
      List<V1RootUserParamsV4>? rootUsers,
      int? rootQuorumThreshold,
      V1WalletParams? wallet,
      bool? disableEmailRecovery,
      bool? disableEmailAuth,
      bool? disableSmsAuth,
      bool? disableOtpEmailAuth}) {
    return V1CreateSubOrganizationIntentV7(
        subOrganizationName: subOrganizationName ?? this.subOrganizationName,
        rootUsers: rootUsers ?? this.rootUsers,
        rootQuorumThreshold: rootQuorumThreshold ?? this.rootQuorumThreshold,
        wallet: wallet ?? this.wallet,
        disableEmailRecovery: disableEmailRecovery ?? this.disableEmailRecovery,
        disableEmailAuth: disableEmailAuth ?? this.disableEmailAuth,
        disableSmsAuth: disableSmsAuth ?? this.disableSmsAuth,
        disableOtpEmailAuth: disableOtpEmailAuth ?? this.disableOtpEmailAuth);
  }

  V1CreateSubOrganizationIntentV7 copyWithWrapped(
      {Wrapped<String>? subOrganizationName,
      Wrapped<List<V1RootUserParamsV4>>? rootUsers,
      Wrapped<int>? rootQuorumThreshold,
      Wrapped<V1WalletParams?>? wallet,
      Wrapped<bool?>? disableEmailRecovery,
      Wrapped<bool?>? disableEmailAuth,
      Wrapped<bool?>? disableSmsAuth,
      Wrapped<bool?>? disableOtpEmailAuth}) {
    return V1CreateSubOrganizationIntentV7(
        subOrganizationName: (subOrganizationName != null
            ? subOrganizationName.value
            : this.subOrganizationName),
        rootUsers: (rootUsers != null ? rootUsers.value : this.rootUsers),
        rootQuorumThreshold: (rootQuorumThreshold != null
            ? rootQuorumThreshold.value
            : this.rootQuorumThreshold),
        wallet: (wallet != null ? wallet.value : this.wallet),
        disableEmailRecovery: (disableEmailRecovery != null
            ? disableEmailRecovery.value
            : this.disableEmailRecovery),
        disableEmailAuth: (disableEmailAuth != null
            ? disableEmailAuth.value
            : this.disableEmailAuth),
        disableSmsAuth: (disableSmsAuth != null
            ? disableSmsAuth.value
            : this.disableSmsAuth),
        disableOtpEmailAuth: (disableOtpEmailAuth != null
            ? disableOtpEmailAuth.value
            : this.disableOtpEmailAuth));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationRequest {
  const V1CreateSubOrganizationRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateSubOrganizationRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationRequestFromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateSubOrganizationRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateSubOrganizationRequestTypeToJson,
    fromJson: v1CreateSubOrganizationRequestTypeFromJson,
  )
  final enums.V1CreateSubOrganizationRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateSubOrganizationIntentV7 parameters;
  static const fromJsonFactory = _$V1CreateSubOrganizationRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationRequestExtension
    on V1CreateSubOrganizationRequest {
  V1CreateSubOrganizationRequest copyWith(
      {enums.V1CreateSubOrganizationRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateSubOrganizationIntentV7? parameters}) {
    return V1CreateSubOrganizationRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateSubOrganizationRequest copyWithWrapped(
      {Wrapped<enums.V1CreateSubOrganizationRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateSubOrganizationIntentV7>? parameters}) {
    return V1CreateSubOrganizationRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationResult {
  const V1CreateSubOrganizationResult({
    required this.subOrganizationId,
    this.rootUserIds,
  });

  factory V1CreateSubOrganizationResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationResultFromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateSubOrganizationResultToJson(this);

  @JsonKey(name: 'subOrganizationId')
  final String subOrganizationId;
  @JsonKey(name: 'rootUserIds', defaultValue: <String>[])
  final List<String>? rootUserIds;
  static const fromJsonFactory = _$V1CreateSubOrganizationResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationResult &&
            (identical(other.subOrganizationId, subOrganizationId) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationId, subOrganizationId)) &&
            (identical(other.rootUserIds, rootUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserIds, rootUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationId) ^
      const DeepCollectionEquality().hash(rootUserIds) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationResultExtension
    on V1CreateSubOrganizationResult {
  V1CreateSubOrganizationResult copyWith(
      {String? subOrganizationId, List<String>? rootUserIds}) {
    return V1CreateSubOrganizationResult(
        subOrganizationId: subOrganizationId ?? this.subOrganizationId,
        rootUserIds: rootUserIds ?? this.rootUserIds);
  }

  V1CreateSubOrganizationResult copyWithWrapped(
      {Wrapped<String>? subOrganizationId,
      Wrapped<List<String>?>? rootUserIds}) {
    return V1CreateSubOrganizationResult(
        subOrganizationId: (subOrganizationId != null
            ? subOrganizationId.value
            : this.subOrganizationId),
        rootUserIds:
            (rootUserIds != null ? rootUserIds.value : this.rootUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationResultV3 {
  const V1CreateSubOrganizationResultV3({
    required this.subOrganizationId,
    required this.privateKeys,
    this.rootUserIds,
  });

  factory V1CreateSubOrganizationResultV3.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationResultV3FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationResultV3ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationResultV3ToJson(this);

  @JsonKey(name: 'subOrganizationId')
  final String subOrganizationId;
  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKeyResult>[])
  final List<V1PrivateKeyResult> privateKeys;
  @JsonKey(name: 'rootUserIds', defaultValue: <String>[])
  final List<String>? rootUserIds;
  static const fromJsonFactory = _$V1CreateSubOrganizationResultV3FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationResultV3 &&
            (identical(other.subOrganizationId, subOrganizationId) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationId, subOrganizationId)) &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)) &&
            (identical(other.rootUserIds, rootUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserIds, rootUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationId) ^
      const DeepCollectionEquality().hash(privateKeys) ^
      const DeepCollectionEquality().hash(rootUserIds) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationResultV3Extension
    on V1CreateSubOrganizationResultV3 {
  V1CreateSubOrganizationResultV3 copyWith(
      {String? subOrganizationId,
      List<V1PrivateKeyResult>? privateKeys,
      List<String>? rootUserIds}) {
    return V1CreateSubOrganizationResultV3(
        subOrganizationId: subOrganizationId ?? this.subOrganizationId,
        privateKeys: privateKeys ?? this.privateKeys,
        rootUserIds: rootUserIds ?? this.rootUserIds);
  }

  V1CreateSubOrganizationResultV3 copyWithWrapped(
      {Wrapped<String>? subOrganizationId,
      Wrapped<List<V1PrivateKeyResult>>? privateKeys,
      Wrapped<List<String>?>? rootUserIds}) {
    return V1CreateSubOrganizationResultV3(
        subOrganizationId: (subOrganizationId != null
            ? subOrganizationId.value
            : this.subOrganizationId),
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys),
        rootUserIds:
            (rootUserIds != null ? rootUserIds.value : this.rootUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationResultV4 {
  const V1CreateSubOrganizationResultV4({
    required this.subOrganizationId,
    this.wallet,
    this.rootUserIds,
  });

  factory V1CreateSubOrganizationResultV4.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationResultV4FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationResultV4ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationResultV4ToJson(this);

  @JsonKey(name: 'subOrganizationId')
  final String subOrganizationId;
  @JsonKey(name: 'wallet')
  final V1WalletResult? wallet;
  @JsonKey(name: 'rootUserIds', defaultValue: <String>[])
  final List<String>? rootUserIds;
  static const fromJsonFactory = _$V1CreateSubOrganizationResultV4FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationResultV4 &&
            (identical(other.subOrganizationId, subOrganizationId) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationId, subOrganizationId)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.rootUserIds, rootUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserIds, rootUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationId) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(rootUserIds) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationResultV4Extension
    on V1CreateSubOrganizationResultV4 {
  V1CreateSubOrganizationResultV4 copyWith(
      {String? subOrganizationId,
      V1WalletResult? wallet,
      List<String>? rootUserIds}) {
    return V1CreateSubOrganizationResultV4(
        subOrganizationId: subOrganizationId ?? this.subOrganizationId,
        wallet: wallet ?? this.wallet,
        rootUserIds: rootUserIds ?? this.rootUserIds);
  }

  V1CreateSubOrganizationResultV4 copyWithWrapped(
      {Wrapped<String>? subOrganizationId,
      Wrapped<V1WalletResult?>? wallet,
      Wrapped<List<String>?>? rootUserIds}) {
    return V1CreateSubOrganizationResultV4(
        subOrganizationId: (subOrganizationId != null
            ? subOrganizationId.value
            : this.subOrganizationId),
        wallet: (wallet != null ? wallet.value : this.wallet),
        rootUserIds:
            (rootUserIds != null ? rootUserIds.value : this.rootUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationResultV5 {
  const V1CreateSubOrganizationResultV5({
    required this.subOrganizationId,
    this.wallet,
    this.rootUserIds,
  });

  factory V1CreateSubOrganizationResultV5.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationResultV5FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationResultV5ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationResultV5ToJson(this);

  @JsonKey(name: 'subOrganizationId')
  final String subOrganizationId;
  @JsonKey(name: 'wallet')
  final V1WalletResult? wallet;
  @JsonKey(name: 'rootUserIds', defaultValue: <String>[])
  final List<String>? rootUserIds;
  static const fromJsonFactory = _$V1CreateSubOrganizationResultV5FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationResultV5 &&
            (identical(other.subOrganizationId, subOrganizationId) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationId, subOrganizationId)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.rootUserIds, rootUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserIds, rootUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationId) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(rootUserIds) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationResultV5Extension
    on V1CreateSubOrganizationResultV5 {
  V1CreateSubOrganizationResultV5 copyWith(
      {String? subOrganizationId,
      V1WalletResult? wallet,
      List<String>? rootUserIds}) {
    return V1CreateSubOrganizationResultV5(
        subOrganizationId: subOrganizationId ?? this.subOrganizationId,
        wallet: wallet ?? this.wallet,
        rootUserIds: rootUserIds ?? this.rootUserIds);
  }

  V1CreateSubOrganizationResultV5 copyWithWrapped(
      {Wrapped<String>? subOrganizationId,
      Wrapped<V1WalletResult?>? wallet,
      Wrapped<List<String>?>? rootUserIds}) {
    return V1CreateSubOrganizationResultV5(
        subOrganizationId: (subOrganizationId != null
            ? subOrganizationId.value
            : this.subOrganizationId),
        wallet: (wallet != null ? wallet.value : this.wallet),
        rootUserIds:
            (rootUserIds != null ? rootUserIds.value : this.rootUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationResultV6 {
  const V1CreateSubOrganizationResultV6({
    required this.subOrganizationId,
    this.wallet,
    this.rootUserIds,
  });

  factory V1CreateSubOrganizationResultV6.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationResultV6FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationResultV6ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationResultV6ToJson(this);

  @JsonKey(name: 'subOrganizationId')
  final String subOrganizationId;
  @JsonKey(name: 'wallet')
  final V1WalletResult? wallet;
  @JsonKey(name: 'rootUserIds', defaultValue: <String>[])
  final List<String>? rootUserIds;
  static const fromJsonFactory = _$V1CreateSubOrganizationResultV6FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationResultV6 &&
            (identical(other.subOrganizationId, subOrganizationId) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationId, subOrganizationId)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.rootUserIds, rootUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserIds, rootUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationId) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(rootUserIds) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationResultV6Extension
    on V1CreateSubOrganizationResultV6 {
  V1CreateSubOrganizationResultV6 copyWith(
      {String? subOrganizationId,
      V1WalletResult? wallet,
      List<String>? rootUserIds}) {
    return V1CreateSubOrganizationResultV6(
        subOrganizationId: subOrganizationId ?? this.subOrganizationId,
        wallet: wallet ?? this.wallet,
        rootUserIds: rootUserIds ?? this.rootUserIds);
  }

  V1CreateSubOrganizationResultV6 copyWithWrapped(
      {Wrapped<String>? subOrganizationId,
      Wrapped<V1WalletResult?>? wallet,
      Wrapped<List<String>?>? rootUserIds}) {
    return V1CreateSubOrganizationResultV6(
        subOrganizationId: (subOrganizationId != null
            ? subOrganizationId.value
            : this.subOrganizationId),
        wallet: (wallet != null ? wallet.value : this.wallet),
        rootUserIds:
            (rootUserIds != null ? rootUserIds.value : this.rootUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateSubOrganizationResultV7 {
  const V1CreateSubOrganizationResultV7({
    required this.subOrganizationId,
    this.wallet,
    this.rootUserIds,
  });

  factory V1CreateSubOrganizationResultV7.fromJson(Map<String, dynamic> json) =>
      _$V1CreateSubOrganizationResultV7FromJson(json);

  static const toJsonFactory = _$V1CreateSubOrganizationResultV7ToJson;
  Map<String, dynamic> toJson() =>
      _$V1CreateSubOrganizationResultV7ToJson(this);

  @JsonKey(name: 'subOrganizationId')
  final String subOrganizationId;
  @JsonKey(name: 'wallet')
  final V1WalletResult? wallet;
  @JsonKey(name: 'rootUserIds', defaultValue: <String>[])
  final List<String>? rootUserIds;
  static const fromJsonFactory = _$V1CreateSubOrganizationResultV7FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateSubOrganizationResultV7 &&
            (identical(other.subOrganizationId, subOrganizationId) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationId, subOrganizationId)) &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)) &&
            (identical(other.rootUserIds, rootUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.rootUserIds, rootUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationId) ^
      const DeepCollectionEquality().hash(wallet) ^
      const DeepCollectionEquality().hash(rootUserIds) ^
      runtimeType.hashCode;
}

extension $V1CreateSubOrganizationResultV7Extension
    on V1CreateSubOrganizationResultV7 {
  V1CreateSubOrganizationResultV7 copyWith(
      {String? subOrganizationId,
      V1WalletResult? wallet,
      List<String>? rootUserIds}) {
    return V1CreateSubOrganizationResultV7(
        subOrganizationId: subOrganizationId ?? this.subOrganizationId,
        wallet: wallet ?? this.wallet,
        rootUserIds: rootUserIds ?? this.rootUserIds);
  }

  V1CreateSubOrganizationResultV7 copyWithWrapped(
      {Wrapped<String>? subOrganizationId,
      Wrapped<V1WalletResult?>? wallet,
      Wrapped<List<String>?>? rootUserIds}) {
    return V1CreateSubOrganizationResultV7(
        subOrganizationId: (subOrganizationId != null
            ? subOrganizationId.value
            : this.subOrganizationId),
        wallet: (wallet != null ? wallet.value : this.wallet),
        rootUserIds:
            (rootUserIds != null ? rootUserIds.value : this.rootUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUserTagIntent {
  const V1CreateUserTagIntent({
    required this.userTagName,
    required this.userIds,
  });

  factory V1CreateUserTagIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUserTagIntentFromJson(json);

  static const toJsonFactory = _$V1CreateUserTagIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateUserTagIntentToJson(this);

  @JsonKey(name: 'userTagName')
  final String userTagName;
  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1CreateUserTagIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUserTagIntent &&
            (identical(other.userTagName, userTagName) ||
                const DeepCollectionEquality()
                    .equals(other.userTagName, userTagName)) &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTagName) ^
      const DeepCollectionEquality().hash(userIds) ^
      runtimeType.hashCode;
}

extension $V1CreateUserTagIntentExtension on V1CreateUserTagIntent {
  V1CreateUserTagIntent copyWith({String? userTagName, List<String>? userIds}) {
    return V1CreateUserTagIntent(
        userTagName: userTagName ?? this.userTagName,
        userIds: userIds ?? this.userIds);
  }

  V1CreateUserTagIntent copyWithWrapped(
      {Wrapped<String>? userTagName, Wrapped<List<String>>? userIds}) {
    return V1CreateUserTagIntent(
        userTagName:
            (userTagName != null ? userTagName.value : this.userTagName),
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUserTagRequest {
  const V1CreateUserTagRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateUserTagRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUserTagRequestFromJson(json);

  static const toJsonFactory = _$V1CreateUserTagRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateUserTagRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateUserTagRequestTypeToJson,
    fromJson: v1CreateUserTagRequestTypeFromJson,
  )
  final enums.V1CreateUserTagRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateUserTagIntent parameters;
  static const fromJsonFactory = _$V1CreateUserTagRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUserTagRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateUserTagRequestExtension on V1CreateUserTagRequest {
  V1CreateUserTagRequest copyWith(
      {enums.V1CreateUserTagRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateUserTagIntent? parameters}) {
    return V1CreateUserTagRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateUserTagRequest copyWithWrapped(
      {Wrapped<enums.V1CreateUserTagRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateUserTagIntent>? parameters}) {
    return V1CreateUserTagRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUserTagResult {
  const V1CreateUserTagResult({
    required this.userTagId,
    required this.userIds,
  });

  factory V1CreateUserTagResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUserTagResultFromJson(json);

  static const toJsonFactory = _$V1CreateUserTagResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateUserTagResultToJson(this);

  @JsonKey(name: 'userTagId')
  final String userTagId;
  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1CreateUserTagResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUserTagResult &&
            (identical(other.userTagId, userTagId) ||
                const DeepCollectionEquality()
                    .equals(other.userTagId, userTagId)) &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTagId) ^
      const DeepCollectionEquality().hash(userIds) ^
      runtimeType.hashCode;
}

extension $V1CreateUserTagResultExtension on V1CreateUserTagResult {
  V1CreateUserTagResult copyWith({String? userTagId, List<String>? userIds}) {
    return V1CreateUserTagResult(
        userTagId: userTagId ?? this.userTagId,
        userIds: userIds ?? this.userIds);
  }

  V1CreateUserTagResult copyWithWrapped(
      {Wrapped<String>? userTagId, Wrapped<List<String>>? userIds}) {
    return V1CreateUserTagResult(
        userTagId: (userTagId != null ? userTagId.value : this.userTagId),
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUsersIntent {
  const V1CreateUsersIntent({
    required this.users,
  });

  factory V1CreateUsersIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUsersIntentFromJson(json);

  static const toJsonFactory = _$V1CreateUsersIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateUsersIntentToJson(this);

  @JsonKey(name: 'users', defaultValue: <V1UserParams>[])
  final List<V1UserParams> users;
  static const fromJsonFactory = _$V1CreateUsersIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUsersIntent &&
            (identical(other.users, users) ||
                const DeepCollectionEquality().equals(other.users, users)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(users) ^ runtimeType.hashCode;
}

extension $V1CreateUsersIntentExtension on V1CreateUsersIntent {
  V1CreateUsersIntent copyWith({List<V1UserParams>? users}) {
    return V1CreateUsersIntent(users: users ?? this.users);
  }

  V1CreateUsersIntent copyWithWrapped({Wrapped<List<V1UserParams>>? users}) {
    return V1CreateUsersIntent(
        users: (users != null ? users.value : this.users));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUsersIntentV2 {
  const V1CreateUsersIntentV2({
    required this.users,
  });

  factory V1CreateUsersIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUsersIntentV2FromJson(json);

  static const toJsonFactory = _$V1CreateUsersIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1CreateUsersIntentV2ToJson(this);

  @JsonKey(name: 'users', defaultValue: <V1UserParamsV2>[])
  final List<V1UserParamsV2> users;
  static const fromJsonFactory = _$V1CreateUsersIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUsersIntentV2 &&
            (identical(other.users, users) ||
                const DeepCollectionEquality().equals(other.users, users)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(users) ^ runtimeType.hashCode;
}

extension $V1CreateUsersIntentV2Extension on V1CreateUsersIntentV2 {
  V1CreateUsersIntentV2 copyWith({List<V1UserParamsV2>? users}) {
    return V1CreateUsersIntentV2(users: users ?? this.users);
  }

  V1CreateUsersIntentV2 copyWithWrapped(
      {Wrapped<List<V1UserParamsV2>>? users}) {
    return V1CreateUsersIntentV2(
        users: (users != null ? users.value : this.users));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUsersRequest {
  const V1CreateUsersRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateUsersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUsersRequestFromJson(json);

  static const toJsonFactory = _$V1CreateUsersRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateUsersRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateUsersRequestTypeToJson,
    fromJson: v1CreateUsersRequestTypeFromJson,
  )
  final enums.V1CreateUsersRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateUsersIntentV2 parameters;
  static const fromJsonFactory = _$V1CreateUsersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUsersRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateUsersRequestExtension on V1CreateUsersRequest {
  V1CreateUsersRequest copyWith(
      {enums.V1CreateUsersRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateUsersIntentV2? parameters}) {
    return V1CreateUsersRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateUsersRequest copyWithWrapped(
      {Wrapped<enums.V1CreateUsersRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateUsersIntentV2>? parameters}) {
    return V1CreateUsersRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateUsersResult {
  const V1CreateUsersResult({
    required this.userIds,
  });

  factory V1CreateUsersResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateUsersResultFromJson(json);

  static const toJsonFactory = _$V1CreateUsersResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateUsersResultToJson(this);

  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1CreateUsersResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateUsersResult &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userIds) ^ runtimeType.hashCode;
}

extension $V1CreateUsersResultExtension on V1CreateUsersResult {
  V1CreateUsersResult copyWith({List<String>? userIds}) {
    return V1CreateUsersResult(userIds: userIds ?? this.userIds);
  }

  V1CreateUsersResult copyWithWrapped({Wrapped<List<String>>? userIds}) {
    return V1CreateUsersResult(
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateWalletAccountsIntent {
  const V1CreateWalletAccountsIntent({
    required this.walletId,
    required this.accounts,
  });

  factory V1CreateWalletAccountsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateWalletAccountsIntentFromJson(json);

  static const toJsonFactory = _$V1CreateWalletAccountsIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateWalletAccountsIntentToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'accounts', defaultValue: <V1WalletAccountParams>[])
  final List<V1WalletAccountParams> accounts;
  static const fromJsonFactory = _$V1CreateWalletAccountsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateWalletAccountsIntent &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.accounts, accounts) ||
                const DeepCollectionEquality()
                    .equals(other.accounts, accounts)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(accounts) ^
      runtimeType.hashCode;
}

extension $V1CreateWalletAccountsIntentExtension
    on V1CreateWalletAccountsIntent {
  V1CreateWalletAccountsIntent copyWith(
      {String? walletId, List<V1WalletAccountParams>? accounts}) {
    return V1CreateWalletAccountsIntent(
        walletId: walletId ?? this.walletId,
        accounts: accounts ?? this.accounts);
  }

  V1CreateWalletAccountsIntent copyWithWrapped(
      {Wrapped<String>? walletId,
      Wrapped<List<V1WalletAccountParams>>? accounts}) {
    return V1CreateWalletAccountsIntent(
        walletId: (walletId != null ? walletId.value : this.walletId),
        accounts: (accounts != null ? accounts.value : this.accounts));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateWalletAccountsRequest {
  const V1CreateWalletAccountsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateWalletAccountsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateWalletAccountsRequestFromJson(json);

  static const toJsonFactory = _$V1CreateWalletAccountsRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateWalletAccountsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateWalletAccountsRequestTypeToJson,
    fromJson: v1CreateWalletAccountsRequestTypeFromJson,
  )
  final enums.V1CreateWalletAccountsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateWalletAccountsIntent parameters;
  static const fromJsonFactory = _$V1CreateWalletAccountsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateWalletAccountsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateWalletAccountsRequestExtension
    on V1CreateWalletAccountsRequest {
  V1CreateWalletAccountsRequest copyWith(
      {enums.V1CreateWalletAccountsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateWalletAccountsIntent? parameters}) {
    return V1CreateWalletAccountsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateWalletAccountsRequest copyWithWrapped(
      {Wrapped<enums.V1CreateWalletAccountsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateWalletAccountsIntent>? parameters}) {
    return V1CreateWalletAccountsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateWalletAccountsResult {
  const V1CreateWalletAccountsResult({
    required this.addresses,
  });

  factory V1CreateWalletAccountsResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateWalletAccountsResultFromJson(json);

  static const toJsonFactory = _$V1CreateWalletAccountsResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateWalletAccountsResultToJson(this);

  @JsonKey(name: 'addresses', defaultValue: <String>[])
  final List<String> addresses;
  static const fromJsonFactory = _$V1CreateWalletAccountsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateWalletAccountsResult &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(addresses) ^ runtimeType.hashCode;
}

extension $V1CreateWalletAccountsResultExtension
    on V1CreateWalletAccountsResult {
  V1CreateWalletAccountsResult copyWith({List<String>? addresses}) {
    return V1CreateWalletAccountsResult(addresses: addresses ?? this.addresses);
  }

  V1CreateWalletAccountsResult copyWithWrapped(
      {Wrapped<List<String>>? addresses}) {
    return V1CreateWalletAccountsResult(
        addresses: (addresses != null ? addresses.value : this.addresses));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateWalletIntent {
  const V1CreateWalletIntent({
    required this.walletName,
    required this.accounts,
    this.mnemonicLength,
  });

  factory V1CreateWalletIntent.fromJson(Map<String, dynamic> json) =>
      _$V1CreateWalletIntentFromJson(json);

  static const toJsonFactory = _$V1CreateWalletIntentToJson;
  Map<String, dynamic> toJson() => _$V1CreateWalletIntentToJson(this);

  @JsonKey(name: 'walletName')
  final String walletName;
  @JsonKey(name: 'accounts', defaultValue: <V1WalletAccountParams>[])
  final List<V1WalletAccountParams> accounts;
  @JsonKey(name: 'mnemonicLength')
  final int? mnemonicLength;
  static const fromJsonFactory = _$V1CreateWalletIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateWalletIntent &&
            (identical(other.walletName, walletName) ||
                const DeepCollectionEquality()
                    .equals(other.walletName, walletName)) &&
            (identical(other.accounts, accounts) ||
                const DeepCollectionEquality()
                    .equals(other.accounts, accounts)) &&
            (identical(other.mnemonicLength, mnemonicLength) ||
                const DeepCollectionEquality()
                    .equals(other.mnemonicLength, mnemonicLength)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletName) ^
      const DeepCollectionEquality().hash(accounts) ^
      const DeepCollectionEquality().hash(mnemonicLength) ^
      runtimeType.hashCode;
}

extension $V1CreateWalletIntentExtension on V1CreateWalletIntent {
  V1CreateWalletIntent copyWith(
      {String? walletName,
      List<V1WalletAccountParams>? accounts,
      int? mnemonicLength}) {
    return V1CreateWalletIntent(
        walletName: walletName ?? this.walletName,
        accounts: accounts ?? this.accounts,
        mnemonicLength: mnemonicLength ?? this.mnemonicLength);
  }

  V1CreateWalletIntent copyWithWrapped(
      {Wrapped<String>? walletName,
      Wrapped<List<V1WalletAccountParams>>? accounts,
      Wrapped<int?>? mnemonicLength}) {
    return V1CreateWalletIntent(
        walletName: (walletName != null ? walletName.value : this.walletName),
        accounts: (accounts != null ? accounts.value : this.accounts),
        mnemonicLength: (mnemonicLength != null
            ? mnemonicLength.value
            : this.mnemonicLength));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateWalletRequest {
  const V1CreateWalletRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1CreateWalletRequest.fromJson(Map<String, dynamic> json) =>
      _$V1CreateWalletRequestFromJson(json);

  static const toJsonFactory = _$V1CreateWalletRequestToJson;
  Map<String, dynamic> toJson() => _$V1CreateWalletRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1CreateWalletRequestTypeToJson,
    fromJson: v1CreateWalletRequestTypeFromJson,
  )
  final enums.V1CreateWalletRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1CreateWalletIntent parameters;
  static const fromJsonFactory = _$V1CreateWalletRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateWalletRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1CreateWalletRequestExtension on V1CreateWalletRequest {
  V1CreateWalletRequest copyWith(
      {enums.V1CreateWalletRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1CreateWalletIntent? parameters}) {
    return V1CreateWalletRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1CreateWalletRequest copyWithWrapped(
      {Wrapped<enums.V1CreateWalletRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1CreateWalletIntent>? parameters}) {
    return V1CreateWalletRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CreateWalletResult {
  const V1CreateWalletResult({
    required this.walletId,
    required this.addresses,
  });

  factory V1CreateWalletResult.fromJson(Map<String, dynamic> json) =>
      _$V1CreateWalletResultFromJson(json);

  static const toJsonFactory = _$V1CreateWalletResultToJson;
  Map<String, dynamic> toJson() => _$V1CreateWalletResultToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'addresses', defaultValue: <String>[])
  final List<String> addresses;
  static const fromJsonFactory = _$V1CreateWalletResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CreateWalletResult &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(addresses) ^
      runtimeType.hashCode;
}

extension $V1CreateWalletResultExtension on V1CreateWalletResult {
  V1CreateWalletResult copyWith({String? walletId, List<String>? addresses}) {
    return V1CreateWalletResult(
        walletId: walletId ?? this.walletId,
        addresses: addresses ?? this.addresses);
  }

  V1CreateWalletResult copyWithWrapped(
      {Wrapped<String>? walletId, Wrapped<List<String>>? addresses}) {
    return V1CreateWalletResult(
        walletId: (walletId != null ? walletId.value : this.walletId),
        addresses: (addresses != null ? addresses.value : this.addresses));
  }
}

@JsonSerializable(explicitToJson: true)
class V1CredPropsAuthenticationExtensionsClientOutputs {
  const V1CredPropsAuthenticationExtensionsClientOutputs({
    required this.rk,
  });

  factory V1CredPropsAuthenticationExtensionsClientOutputs.fromJson(
          Map<String, dynamic> json) =>
      _$V1CredPropsAuthenticationExtensionsClientOutputsFromJson(json);

  static const toJsonFactory =
      _$V1CredPropsAuthenticationExtensionsClientOutputsToJson;
  Map<String, dynamic> toJson() =>
      _$V1CredPropsAuthenticationExtensionsClientOutputsToJson(this);

  @JsonKey(name: 'rk')
  final bool rk;
  static const fromJsonFactory =
      _$V1CredPropsAuthenticationExtensionsClientOutputsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1CredPropsAuthenticationExtensionsClientOutputs &&
            (identical(other.rk, rk) ||
                const DeepCollectionEquality().equals(other.rk, rk)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rk) ^ runtimeType.hashCode;
}

extension $V1CredPropsAuthenticationExtensionsClientOutputsExtension
    on V1CredPropsAuthenticationExtensionsClientOutputs {
  V1CredPropsAuthenticationExtensionsClientOutputs copyWith({bool? rk}) {
    return V1CredPropsAuthenticationExtensionsClientOutputs(rk: rk ?? this.rk);
  }

  V1CredPropsAuthenticationExtensionsClientOutputs copyWithWrapped(
      {Wrapped<bool>? rk}) {
    return V1CredPropsAuthenticationExtensionsClientOutputs(
        rk: (rk != null ? rk.value : this.rk));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteApiKeysIntent {
  const V1DeleteApiKeysIntent({
    required this.userId,
    required this.apiKeyIds,
  });

  factory V1DeleteApiKeysIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteApiKeysIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteApiKeysIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteApiKeysIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'apiKeyIds', defaultValue: <String>[])
  final List<String> apiKeyIds;
  static const fromJsonFactory = _$V1DeleteApiKeysIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteApiKeysIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.apiKeyIds, apiKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyIds, apiKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(apiKeyIds) ^
      runtimeType.hashCode;
}

extension $V1DeleteApiKeysIntentExtension on V1DeleteApiKeysIntent {
  V1DeleteApiKeysIntent copyWith({String? userId, List<String>? apiKeyIds}) {
    return V1DeleteApiKeysIntent(
        userId: userId ?? this.userId, apiKeyIds: apiKeyIds ?? this.apiKeyIds);
  }

  V1DeleteApiKeysIntent copyWithWrapped(
      {Wrapped<String>? userId, Wrapped<List<String>>? apiKeyIds}) {
    return V1DeleteApiKeysIntent(
        userId: (userId != null ? userId.value : this.userId),
        apiKeyIds: (apiKeyIds != null ? apiKeyIds.value : this.apiKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteApiKeysRequest {
  const V1DeleteApiKeysRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteApiKeysRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteApiKeysRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteApiKeysRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteApiKeysRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteApiKeysRequestTypeToJson,
    fromJson: v1DeleteApiKeysRequestTypeFromJson,
  )
  final enums.V1DeleteApiKeysRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteApiKeysIntent parameters;
  static const fromJsonFactory = _$V1DeleteApiKeysRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteApiKeysRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteApiKeysRequestExtension on V1DeleteApiKeysRequest {
  V1DeleteApiKeysRequest copyWith(
      {enums.V1DeleteApiKeysRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteApiKeysIntent? parameters}) {
    return V1DeleteApiKeysRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteApiKeysRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteApiKeysRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteApiKeysIntent>? parameters}) {
    return V1DeleteApiKeysRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteApiKeysResult {
  const V1DeleteApiKeysResult({
    required this.apiKeyIds,
  });

  factory V1DeleteApiKeysResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteApiKeysResultFromJson(json);

  static const toJsonFactory = _$V1DeleteApiKeysResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteApiKeysResultToJson(this);

  @JsonKey(name: 'apiKeyIds', defaultValue: <String>[])
  final List<String> apiKeyIds;
  static const fromJsonFactory = _$V1DeleteApiKeysResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteApiKeysResult &&
            (identical(other.apiKeyIds, apiKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyIds, apiKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeyIds) ^ runtimeType.hashCode;
}

extension $V1DeleteApiKeysResultExtension on V1DeleteApiKeysResult {
  V1DeleteApiKeysResult copyWith({List<String>? apiKeyIds}) {
    return V1DeleteApiKeysResult(apiKeyIds: apiKeyIds ?? this.apiKeyIds);
  }

  V1DeleteApiKeysResult copyWithWrapped({Wrapped<List<String>>? apiKeyIds}) {
    return V1DeleteApiKeysResult(
        apiKeyIds: (apiKeyIds != null ? apiKeyIds.value : this.apiKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteAuthenticatorsIntent {
  const V1DeleteAuthenticatorsIntent({
    required this.userId,
    required this.authenticatorIds,
  });

  factory V1DeleteAuthenticatorsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteAuthenticatorsIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteAuthenticatorsIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteAuthenticatorsIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'authenticatorIds', defaultValue: <String>[])
  final List<String> authenticatorIds;
  static const fromJsonFactory = _$V1DeleteAuthenticatorsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteAuthenticatorsIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.authenticatorIds, authenticatorIds) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorIds, authenticatorIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(authenticatorIds) ^
      runtimeType.hashCode;
}

extension $V1DeleteAuthenticatorsIntentExtension
    on V1DeleteAuthenticatorsIntent {
  V1DeleteAuthenticatorsIntent copyWith(
      {String? userId, List<String>? authenticatorIds}) {
    return V1DeleteAuthenticatorsIntent(
        userId: userId ?? this.userId,
        authenticatorIds: authenticatorIds ?? this.authenticatorIds);
  }

  V1DeleteAuthenticatorsIntent copyWithWrapped(
      {Wrapped<String>? userId, Wrapped<List<String>>? authenticatorIds}) {
    return V1DeleteAuthenticatorsIntent(
        userId: (userId != null ? userId.value : this.userId),
        authenticatorIds: (authenticatorIds != null
            ? authenticatorIds.value
            : this.authenticatorIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteAuthenticatorsRequest {
  const V1DeleteAuthenticatorsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteAuthenticatorsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteAuthenticatorsRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteAuthenticatorsRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteAuthenticatorsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteAuthenticatorsRequestTypeToJson,
    fromJson: v1DeleteAuthenticatorsRequestTypeFromJson,
  )
  final enums.V1DeleteAuthenticatorsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteAuthenticatorsIntent parameters;
  static const fromJsonFactory = _$V1DeleteAuthenticatorsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteAuthenticatorsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteAuthenticatorsRequestExtension
    on V1DeleteAuthenticatorsRequest {
  V1DeleteAuthenticatorsRequest copyWith(
      {enums.V1DeleteAuthenticatorsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteAuthenticatorsIntent? parameters}) {
    return V1DeleteAuthenticatorsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteAuthenticatorsRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteAuthenticatorsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteAuthenticatorsIntent>? parameters}) {
    return V1DeleteAuthenticatorsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteAuthenticatorsResult {
  const V1DeleteAuthenticatorsResult({
    required this.authenticatorIds,
  });

  factory V1DeleteAuthenticatorsResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteAuthenticatorsResultFromJson(json);

  static const toJsonFactory = _$V1DeleteAuthenticatorsResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteAuthenticatorsResultToJson(this);

  @JsonKey(name: 'authenticatorIds', defaultValue: <String>[])
  final List<String> authenticatorIds;
  static const fromJsonFactory = _$V1DeleteAuthenticatorsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteAuthenticatorsResult &&
            (identical(other.authenticatorIds, authenticatorIds) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorIds, authenticatorIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticatorIds) ^
      runtimeType.hashCode;
}

extension $V1DeleteAuthenticatorsResultExtension
    on V1DeleteAuthenticatorsResult {
  V1DeleteAuthenticatorsResult copyWith({List<String>? authenticatorIds}) {
    return V1DeleteAuthenticatorsResult(
        authenticatorIds: authenticatorIds ?? this.authenticatorIds);
  }

  V1DeleteAuthenticatorsResult copyWithWrapped(
      {Wrapped<List<String>>? authenticatorIds}) {
    return V1DeleteAuthenticatorsResult(
        authenticatorIds: (authenticatorIds != null
            ? authenticatorIds.value
            : this.authenticatorIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteInvitationIntent {
  const V1DeleteInvitationIntent({
    required this.invitationId,
  });

  factory V1DeleteInvitationIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteInvitationIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteInvitationIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteInvitationIntentToJson(this);

  @JsonKey(name: 'invitationId')
  final String invitationId;
  static const fromJsonFactory = _$V1DeleteInvitationIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteInvitationIntent &&
            (identical(other.invitationId, invitationId) ||
                const DeepCollectionEquality()
                    .equals(other.invitationId, invitationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationId) ^ runtimeType.hashCode;
}

extension $V1DeleteInvitationIntentExtension on V1DeleteInvitationIntent {
  V1DeleteInvitationIntent copyWith({String? invitationId}) {
    return V1DeleteInvitationIntent(
        invitationId: invitationId ?? this.invitationId);
  }

  V1DeleteInvitationIntent copyWithWrapped({Wrapped<String>? invitationId}) {
    return V1DeleteInvitationIntent(
        invitationId:
            (invitationId != null ? invitationId.value : this.invitationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteInvitationRequest {
  const V1DeleteInvitationRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteInvitationRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteInvitationRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteInvitationRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteInvitationRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteInvitationRequestTypeToJson,
    fromJson: v1DeleteInvitationRequestTypeFromJson,
  )
  final enums.V1DeleteInvitationRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteInvitationIntent parameters;
  static const fromJsonFactory = _$V1DeleteInvitationRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteInvitationRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteInvitationRequestExtension on V1DeleteInvitationRequest {
  V1DeleteInvitationRequest copyWith(
      {enums.V1DeleteInvitationRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteInvitationIntent? parameters}) {
    return V1DeleteInvitationRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteInvitationRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteInvitationRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteInvitationIntent>? parameters}) {
    return V1DeleteInvitationRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteInvitationResult {
  const V1DeleteInvitationResult({
    required this.invitationId,
  });

  factory V1DeleteInvitationResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteInvitationResultFromJson(json);

  static const toJsonFactory = _$V1DeleteInvitationResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteInvitationResultToJson(this);

  @JsonKey(name: 'invitationId')
  final String invitationId;
  static const fromJsonFactory = _$V1DeleteInvitationResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteInvitationResult &&
            (identical(other.invitationId, invitationId) ||
                const DeepCollectionEquality()
                    .equals(other.invitationId, invitationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationId) ^ runtimeType.hashCode;
}

extension $V1DeleteInvitationResultExtension on V1DeleteInvitationResult {
  V1DeleteInvitationResult copyWith({String? invitationId}) {
    return V1DeleteInvitationResult(
        invitationId: invitationId ?? this.invitationId);
  }

  V1DeleteInvitationResult copyWithWrapped({Wrapped<String>? invitationId}) {
    return V1DeleteInvitationResult(
        invitationId:
            (invitationId != null ? invitationId.value : this.invitationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteOauthProvidersIntent {
  const V1DeleteOauthProvidersIntent({
    required this.userId,
    required this.providerIds,
  });

  factory V1DeleteOauthProvidersIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteOauthProvidersIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteOauthProvidersIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteOauthProvidersIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'providerIds', defaultValue: <String>[])
  final List<String> providerIds;
  static const fromJsonFactory = _$V1DeleteOauthProvidersIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteOauthProvidersIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.providerIds, providerIds) ||
                const DeepCollectionEquality()
                    .equals(other.providerIds, providerIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(providerIds) ^
      runtimeType.hashCode;
}

extension $V1DeleteOauthProvidersIntentExtension
    on V1DeleteOauthProvidersIntent {
  V1DeleteOauthProvidersIntent copyWith(
      {String? userId, List<String>? providerIds}) {
    return V1DeleteOauthProvidersIntent(
        userId: userId ?? this.userId,
        providerIds: providerIds ?? this.providerIds);
  }

  V1DeleteOauthProvidersIntent copyWithWrapped(
      {Wrapped<String>? userId, Wrapped<List<String>>? providerIds}) {
    return V1DeleteOauthProvidersIntent(
        userId: (userId != null ? userId.value : this.userId),
        providerIds:
            (providerIds != null ? providerIds.value : this.providerIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteOauthProvidersRequest {
  const V1DeleteOauthProvidersRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteOauthProvidersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteOauthProvidersRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteOauthProvidersRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteOauthProvidersRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteOauthProvidersRequestTypeToJson,
    fromJson: v1DeleteOauthProvidersRequestTypeFromJson,
  )
  final enums.V1DeleteOauthProvidersRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteOauthProvidersIntent parameters;
  static const fromJsonFactory = _$V1DeleteOauthProvidersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteOauthProvidersRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteOauthProvidersRequestExtension
    on V1DeleteOauthProvidersRequest {
  V1DeleteOauthProvidersRequest copyWith(
      {enums.V1DeleteOauthProvidersRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteOauthProvidersIntent? parameters}) {
    return V1DeleteOauthProvidersRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteOauthProvidersRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteOauthProvidersRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteOauthProvidersIntent>? parameters}) {
    return V1DeleteOauthProvidersRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteOauthProvidersResult {
  const V1DeleteOauthProvidersResult({
    required this.providerIds,
  });

  factory V1DeleteOauthProvidersResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteOauthProvidersResultFromJson(json);

  static const toJsonFactory = _$V1DeleteOauthProvidersResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteOauthProvidersResultToJson(this);

  @JsonKey(name: 'providerIds', defaultValue: <String>[])
  final List<String> providerIds;
  static const fromJsonFactory = _$V1DeleteOauthProvidersResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteOauthProvidersResult &&
            (identical(other.providerIds, providerIds) ||
                const DeepCollectionEquality()
                    .equals(other.providerIds, providerIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(providerIds) ^ runtimeType.hashCode;
}

extension $V1DeleteOauthProvidersResultExtension
    on V1DeleteOauthProvidersResult {
  V1DeleteOauthProvidersResult copyWith({List<String>? providerIds}) {
    return V1DeleteOauthProvidersResult(
        providerIds: providerIds ?? this.providerIds);
  }

  V1DeleteOauthProvidersResult copyWithWrapped(
      {Wrapped<List<String>>? providerIds}) {
    return V1DeleteOauthProvidersResult(
        providerIds:
            (providerIds != null ? providerIds.value : this.providerIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteOrganizationIntent {
  const V1DeleteOrganizationIntent({
    required this.organizationId,
  });

  factory V1DeleteOrganizationIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteOrganizationIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteOrganizationIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteOrganizationIntentToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1DeleteOrganizationIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteOrganizationIntent &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1DeleteOrganizationIntentExtension on V1DeleteOrganizationIntent {
  V1DeleteOrganizationIntent copyWith({String? organizationId}) {
    return V1DeleteOrganizationIntent(
        organizationId: organizationId ?? this.organizationId);
  }

  V1DeleteOrganizationIntent copyWithWrapped(
      {Wrapped<String>? organizationId}) {
    return V1DeleteOrganizationIntent(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteOrganizationResult {
  const V1DeleteOrganizationResult({
    required this.organizationId,
  });

  factory V1DeleteOrganizationResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteOrganizationResultFromJson(json);

  static const toJsonFactory = _$V1DeleteOrganizationResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteOrganizationResultToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1DeleteOrganizationResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteOrganizationResult &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1DeleteOrganizationResultExtension on V1DeleteOrganizationResult {
  V1DeleteOrganizationResult copyWith({String? organizationId}) {
    return V1DeleteOrganizationResult(
        organizationId: organizationId ?? this.organizationId);
  }

  V1DeleteOrganizationResult copyWithWrapped(
      {Wrapped<String>? organizationId}) {
    return V1DeleteOrganizationResult(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePolicyIntent {
  const V1DeletePolicyIntent({
    required this.policyId,
  });

  factory V1DeletePolicyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePolicyIntentFromJson(json);

  static const toJsonFactory = _$V1DeletePolicyIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeletePolicyIntentToJson(this);

  @JsonKey(name: 'policyId')
  final String policyId;
  static const fromJsonFactory = _$V1DeletePolicyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePolicyIntent &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyId) ^ runtimeType.hashCode;
}

extension $V1DeletePolicyIntentExtension on V1DeletePolicyIntent {
  V1DeletePolicyIntent copyWith({String? policyId}) {
    return V1DeletePolicyIntent(policyId: policyId ?? this.policyId);
  }

  V1DeletePolicyIntent copyWithWrapped({Wrapped<String>? policyId}) {
    return V1DeletePolicyIntent(
        policyId: (policyId != null ? policyId.value : this.policyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePolicyRequest {
  const V1DeletePolicyRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeletePolicyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePolicyRequestFromJson(json);

  static const toJsonFactory = _$V1DeletePolicyRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeletePolicyRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeletePolicyRequestTypeToJson,
    fromJson: v1DeletePolicyRequestTypeFromJson,
  )
  final enums.V1DeletePolicyRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeletePolicyIntent parameters;
  static const fromJsonFactory = _$V1DeletePolicyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePolicyRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeletePolicyRequestExtension on V1DeletePolicyRequest {
  V1DeletePolicyRequest copyWith(
      {enums.V1DeletePolicyRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeletePolicyIntent? parameters}) {
    return V1DeletePolicyRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeletePolicyRequest copyWithWrapped(
      {Wrapped<enums.V1DeletePolicyRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeletePolicyIntent>? parameters}) {
    return V1DeletePolicyRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePolicyResult {
  const V1DeletePolicyResult({
    required this.policyId,
  });

  factory V1DeletePolicyResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePolicyResultFromJson(json);

  static const toJsonFactory = _$V1DeletePolicyResultToJson;
  Map<String, dynamic> toJson() => _$V1DeletePolicyResultToJson(this);

  @JsonKey(name: 'policyId')
  final String policyId;
  static const fromJsonFactory = _$V1DeletePolicyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePolicyResult &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyId) ^ runtimeType.hashCode;
}

extension $V1DeletePolicyResultExtension on V1DeletePolicyResult {
  V1DeletePolicyResult copyWith({String? policyId}) {
    return V1DeletePolicyResult(policyId: policyId ?? this.policyId);
  }

  V1DeletePolicyResult copyWithWrapped({Wrapped<String>? policyId}) {
    return V1DeletePolicyResult(
        policyId: (policyId != null ? policyId.value : this.policyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePrivateKeyTagsIntent {
  const V1DeletePrivateKeyTagsIntent({
    required this.privateKeyTagIds,
  });

  factory V1DeletePrivateKeyTagsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePrivateKeyTagsIntentFromJson(json);

  static const toJsonFactory = _$V1DeletePrivateKeyTagsIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeletePrivateKeyTagsIntentToJson(this);

  @JsonKey(name: 'privateKeyTagIds', defaultValue: <String>[])
  final List<String> privateKeyTagIds;
  static const fromJsonFactory = _$V1DeletePrivateKeyTagsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePrivateKeyTagsIntent &&
            (identical(other.privateKeyTagIds, privateKeyTagIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTagIds, privateKeyTagIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTagIds) ^
      runtimeType.hashCode;
}

extension $V1DeletePrivateKeyTagsIntentExtension
    on V1DeletePrivateKeyTagsIntent {
  V1DeletePrivateKeyTagsIntent copyWith({List<String>? privateKeyTagIds}) {
    return V1DeletePrivateKeyTagsIntent(
        privateKeyTagIds: privateKeyTagIds ?? this.privateKeyTagIds);
  }

  V1DeletePrivateKeyTagsIntent copyWithWrapped(
      {Wrapped<List<String>>? privateKeyTagIds}) {
    return V1DeletePrivateKeyTagsIntent(
        privateKeyTagIds: (privateKeyTagIds != null
            ? privateKeyTagIds.value
            : this.privateKeyTagIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePrivateKeyTagsRequest {
  const V1DeletePrivateKeyTagsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeletePrivateKeyTagsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePrivateKeyTagsRequestFromJson(json);

  static const toJsonFactory = _$V1DeletePrivateKeyTagsRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeletePrivateKeyTagsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeletePrivateKeyTagsRequestTypeToJson,
    fromJson: v1DeletePrivateKeyTagsRequestTypeFromJson,
  )
  final enums.V1DeletePrivateKeyTagsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeletePrivateKeyTagsIntent parameters;
  static const fromJsonFactory = _$V1DeletePrivateKeyTagsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePrivateKeyTagsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeletePrivateKeyTagsRequestExtension
    on V1DeletePrivateKeyTagsRequest {
  V1DeletePrivateKeyTagsRequest copyWith(
      {enums.V1DeletePrivateKeyTagsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeletePrivateKeyTagsIntent? parameters}) {
    return V1DeletePrivateKeyTagsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeletePrivateKeyTagsRequest copyWithWrapped(
      {Wrapped<enums.V1DeletePrivateKeyTagsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeletePrivateKeyTagsIntent>? parameters}) {
    return V1DeletePrivateKeyTagsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePrivateKeyTagsResult {
  const V1DeletePrivateKeyTagsResult({
    required this.privateKeyTagIds,
    required this.privateKeyIds,
  });

  factory V1DeletePrivateKeyTagsResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePrivateKeyTagsResultFromJson(json);

  static const toJsonFactory = _$V1DeletePrivateKeyTagsResultToJson;
  Map<String, dynamic> toJson() => _$V1DeletePrivateKeyTagsResultToJson(this);

  @JsonKey(name: 'privateKeyTagIds', defaultValue: <String>[])
  final List<String> privateKeyTagIds;
  @JsonKey(name: 'privateKeyIds', defaultValue: <String>[])
  final List<String> privateKeyIds;
  static const fromJsonFactory = _$V1DeletePrivateKeyTagsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePrivateKeyTagsResult &&
            (identical(other.privateKeyTagIds, privateKeyTagIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTagIds, privateKeyTagIds)) &&
            (identical(other.privateKeyIds, privateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyIds, privateKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTagIds) ^
      const DeepCollectionEquality().hash(privateKeyIds) ^
      runtimeType.hashCode;
}

extension $V1DeletePrivateKeyTagsResultExtension
    on V1DeletePrivateKeyTagsResult {
  V1DeletePrivateKeyTagsResult copyWith(
      {List<String>? privateKeyTagIds, List<String>? privateKeyIds}) {
    return V1DeletePrivateKeyTagsResult(
        privateKeyTagIds: privateKeyTagIds ?? this.privateKeyTagIds,
        privateKeyIds: privateKeyIds ?? this.privateKeyIds);
  }

  V1DeletePrivateKeyTagsResult copyWithWrapped(
      {Wrapped<List<String>>? privateKeyTagIds,
      Wrapped<List<String>>? privateKeyIds}) {
    return V1DeletePrivateKeyTagsResult(
        privateKeyTagIds: (privateKeyTagIds != null
            ? privateKeyTagIds.value
            : this.privateKeyTagIds),
        privateKeyIds:
            (privateKeyIds != null ? privateKeyIds.value : this.privateKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePrivateKeysIntent {
  const V1DeletePrivateKeysIntent({
    required this.privateKeyIds,
    this.deleteWithoutExport,
  });

  factory V1DeletePrivateKeysIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePrivateKeysIntentFromJson(json);

  static const toJsonFactory = _$V1DeletePrivateKeysIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeletePrivateKeysIntentToJson(this);

  @JsonKey(name: 'privateKeyIds', defaultValue: <String>[])
  final List<String> privateKeyIds;
  @JsonKey(name: 'deleteWithoutExport')
  final bool? deleteWithoutExport;
  static const fromJsonFactory = _$V1DeletePrivateKeysIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePrivateKeysIntent &&
            (identical(other.privateKeyIds, privateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyIds, privateKeyIds)) &&
            (identical(other.deleteWithoutExport, deleteWithoutExport) ||
                const DeepCollectionEquality()
                    .equals(other.deleteWithoutExport, deleteWithoutExport)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyIds) ^
      const DeepCollectionEquality().hash(deleteWithoutExport) ^
      runtimeType.hashCode;
}

extension $V1DeletePrivateKeysIntentExtension on V1DeletePrivateKeysIntent {
  V1DeletePrivateKeysIntent copyWith(
      {List<String>? privateKeyIds, bool? deleteWithoutExport}) {
    return V1DeletePrivateKeysIntent(
        privateKeyIds: privateKeyIds ?? this.privateKeyIds,
        deleteWithoutExport: deleteWithoutExport ?? this.deleteWithoutExport);
  }

  V1DeletePrivateKeysIntent copyWithWrapped(
      {Wrapped<List<String>>? privateKeyIds,
      Wrapped<bool?>? deleteWithoutExport}) {
    return V1DeletePrivateKeysIntent(
        privateKeyIds:
            (privateKeyIds != null ? privateKeyIds.value : this.privateKeyIds),
        deleteWithoutExport: (deleteWithoutExport != null
            ? deleteWithoutExport.value
            : this.deleteWithoutExport));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePrivateKeysRequest {
  const V1DeletePrivateKeysRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeletePrivateKeysRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePrivateKeysRequestFromJson(json);

  static const toJsonFactory = _$V1DeletePrivateKeysRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeletePrivateKeysRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeletePrivateKeysRequestTypeToJson,
    fromJson: v1DeletePrivateKeysRequestTypeFromJson,
  )
  final enums.V1DeletePrivateKeysRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeletePrivateKeysIntent parameters;
  static const fromJsonFactory = _$V1DeletePrivateKeysRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePrivateKeysRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeletePrivateKeysRequestExtension on V1DeletePrivateKeysRequest {
  V1DeletePrivateKeysRequest copyWith(
      {enums.V1DeletePrivateKeysRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeletePrivateKeysIntent? parameters}) {
    return V1DeletePrivateKeysRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeletePrivateKeysRequest copyWithWrapped(
      {Wrapped<enums.V1DeletePrivateKeysRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeletePrivateKeysIntent>? parameters}) {
    return V1DeletePrivateKeysRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeletePrivateKeysResult {
  const V1DeletePrivateKeysResult({
    required this.privateKeyIds,
  });

  factory V1DeletePrivateKeysResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeletePrivateKeysResultFromJson(json);

  static const toJsonFactory = _$V1DeletePrivateKeysResultToJson;
  Map<String, dynamic> toJson() => _$V1DeletePrivateKeysResultToJson(this);

  @JsonKey(name: 'privateKeyIds', defaultValue: <String>[])
  final List<String> privateKeyIds;
  static const fromJsonFactory = _$V1DeletePrivateKeysResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeletePrivateKeysResult &&
            (identical(other.privateKeyIds, privateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyIds, privateKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyIds) ^ runtimeType.hashCode;
}

extension $V1DeletePrivateKeysResultExtension on V1DeletePrivateKeysResult {
  V1DeletePrivateKeysResult copyWith({List<String>? privateKeyIds}) {
    return V1DeletePrivateKeysResult(
        privateKeyIds: privateKeyIds ?? this.privateKeyIds);
  }

  V1DeletePrivateKeysResult copyWithWrapped(
      {Wrapped<List<String>>? privateKeyIds}) {
    return V1DeletePrivateKeysResult(
        privateKeyIds:
            (privateKeyIds != null ? privateKeyIds.value : this.privateKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteSubOrganizationIntent {
  const V1DeleteSubOrganizationIntent({
    this.deleteWithoutExport,
  });

  factory V1DeleteSubOrganizationIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteSubOrganizationIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteSubOrganizationIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteSubOrganizationIntentToJson(this);

  @JsonKey(name: 'deleteWithoutExport')
  final bool? deleteWithoutExport;
  static const fromJsonFactory = _$V1DeleteSubOrganizationIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteSubOrganizationIntent &&
            (identical(other.deleteWithoutExport, deleteWithoutExport) ||
                const DeepCollectionEquality()
                    .equals(other.deleteWithoutExport, deleteWithoutExport)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(deleteWithoutExport) ^
      runtimeType.hashCode;
}

extension $V1DeleteSubOrganizationIntentExtension
    on V1DeleteSubOrganizationIntent {
  V1DeleteSubOrganizationIntent copyWith({bool? deleteWithoutExport}) {
    return V1DeleteSubOrganizationIntent(
        deleteWithoutExport: deleteWithoutExport ?? this.deleteWithoutExport);
  }

  V1DeleteSubOrganizationIntent copyWithWrapped(
      {Wrapped<bool?>? deleteWithoutExport}) {
    return V1DeleteSubOrganizationIntent(
        deleteWithoutExport: (deleteWithoutExport != null
            ? deleteWithoutExport.value
            : this.deleteWithoutExport));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteSubOrganizationRequest {
  const V1DeleteSubOrganizationRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteSubOrganizationRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteSubOrganizationRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteSubOrganizationRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteSubOrganizationRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteSubOrganizationRequestTypeToJson,
    fromJson: v1DeleteSubOrganizationRequestTypeFromJson,
  )
  final enums.V1DeleteSubOrganizationRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteSubOrganizationIntent parameters;
  static const fromJsonFactory = _$V1DeleteSubOrganizationRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteSubOrganizationRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteSubOrganizationRequestExtension
    on V1DeleteSubOrganizationRequest {
  V1DeleteSubOrganizationRequest copyWith(
      {enums.V1DeleteSubOrganizationRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteSubOrganizationIntent? parameters}) {
    return V1DeleteSubOrganizationRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteSubOrganizationRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteSubOrganizationRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteSubOrganizationIntent>? parameters}) {
    return V1DeleteSubOrganizationRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteSubOrganizationResult {
  const V1DeleteSubOrganizationResult({
    required this.subOrganizationUuid,
  });

  factory V1DeleteSubOrganizationResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteSubOrganizationResultFromJson(json);

  static const toJsonFactory = _$V1DeleteSubOrganizationResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteSubOrganizationResultToJson(this);

  @JsonKey(name: 'subOrganizationUuid')
  final String subOrganizationUuid;
  static const fromJsonFactory = _$V1DeleteSubOrganizationResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteSubOrganizationResult &&
            (identical(other.subOrganizationUuid, subOrganizationUuid) ||
                const DeepCollectionEquality()
                    .equals(other.subOrganizationUuid, subOrganizationUuid)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subOrganizationUuid) ^
      runtimeType.hashCode;
}

extension $V1DeleteSubOrganizationResultExtension
    on V1DeleteSubOrganizationResult {
  V1DeleteSubOrganizationResult copyWith({String? subOrganizationUuid}) {
    return V1DeleteSubOrganizationResult(
        subOrganizationUuid: subOrganizationUuid ?? this.subOrganizationUuid);
  }

  V1DeleteSubOrganizationResult copyWithWrapped(
      {Wrapped<String>? subOrganizationUuid}) {
    return V1DeleteSubOrganizationResult(
        subOrganizationUuid: (subOrganizationUuid != null
            ? subOrganizationUuid.value
            : this.subOrganizationUuid));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteUserTagsIntent {
  const V1DeleteUserTagsIntent({
    required this.userTagIds,
  });

  factory V1DeleteUserTagsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteUserTagsIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteUserTagsIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteUserTagsIntentToJson(this);

  @JsonKey(name: 'userTagIds', defaultValue: <String>[])
  final List<String> userTagIds;
  static const fromJsonFactory = _$V1DeleteUserTagsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteUserTagsIntent &&
            (identical(other.userTagIds, userTagIds) ||
                const DeepCollectionEquality()
                    .equals(other.userTagIds, userTagIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTagIds) ^ runtimeType.hashCode;
}

extension $V1DeleteUserTagsIntentExtension on V1DeleteUserTagsIntent {
  V1DeleteUserTagsIntent copyWith({List<String>? userTagIds}) {
    return V1DeleteUserTagsIntent(userTagIds: userTagIds ?? this.userTagIds);
  }

  V1DeleteUserTagsIntent copyWithWrapped({Wrapped<List<String>>? userTagIds}) {
    return V1DeleteUserTagsIntent(
        userTagIds: (userTagIds != null ? userTagIds.value : this.userTagIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteUserTagsRequest {
  const V1DeleteUserTagsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteUserTagsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteUserTagsRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteUserTagsRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteUserTagsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteUserTagsRequestTypeToJson,
    fromJson: v1DeleteUserTagsRequestTypeFromJson,
  )
  final enums.V1DeleteUserTagsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteUserTagsIntent parameters;
  static const fromJsonFactory = _$V1DeleteUserTagsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteUserTagsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteUserTagsRequestExtension on V1DeleteUserTagsRequest {
  V1DeleteUserTagsRequest copyWith(
      {enums.V1DeleteUserTagsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteUserTagsIntent? parameters}) {
    return V1DeleteUserTagsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteUserTagsRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteUserTagsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteUserTagsIntent>? parameters}) {
    return V1DeleteUserTagsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteUserTagsResult {
  const V1DeleteUserTagsResult({
    required this.userTagIds,
    required this.userIds,
  });

  factory V1DeleteUserTagsResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteUserTagsResultFromJson(json);

  static const toJsonFactory = _$V1DeleteUserTagsResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteUserTagsResultToJson(this);

  @JsonKey(name: 'userTagIds', defaultValue: <String>[])
  final List<String> userTagIds;
  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1DeleteUserTagsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteUserTagsResult &&
            (identical(other.userTagIds, userTagIds) ||
                const DeepCollectionEquality()
                    .equals(other.userTagIds, userTagIds)) &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTagIds) ^
      const DeepCollectionEquality().hash(userIds) ^
      runtimeType.hashCode;
}

extension $V1DeleteUserTagsResultExtension on V1DeleteUserTagsResult {
  V1DeleteUserTagsResult copyWith(
      {List<String>? userTagIds, List<String>? userIds}) {
    return V1DeleteUserTagsResult(
        userTagIds: userTagIds ?? this.userTagIds,
        userIds: userIds ?? this.userIds);
  }

  V1DeleteUserTagsResult copyWithWrapped(
      {Wrapped<List<String>>? userTagIds, Wrapped<List<String>>? userIds}) {
    return V1DeleteUserTagsResult(
        userTagIds: (userTagIds != null ? userTagIds.value : this.userTagIds),
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteUsersIntent {
  const V1DeleteUsersIntent({
    required this.userIds,
  });

  factory V1DeleteUsersIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteUsersIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteUsersIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteUsersIntentToJson(this);

  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1DeleteUsersIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteUsersIntent &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userIds) ^ runtimeType.hashCode;
}

extension $V1DeleteUsersIntentExtension on V1DeleteUsersIntent {
  V1DeleteUsersIntent copyWith({List<String>? userIds}) {
    return V1DeleteUsersIntent(userIds: userIds ?? this.userIds);
  }

  V1DeleteUsersIntent copyWithWrapped({Wrapped<List<String>>? userIds}) {
    return V1DeleteUsersIntent(
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteUsersRequest {
  const V1DeleteUsersRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteUsersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteUsersRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteUsersRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteUsersRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteUsersRequestTypeToJson,
    fromJson: v1DeleteUsersRequestTypeFromJson,
  )
  final enums.V1DeleteUsersRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteUsersIntent parameters;
  static const fromJsonFactory = _$V1DeleteUsersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteUsersRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteUsersRequestExtension on V1DeleteUsersRequest {
  V1DeleteUsersRequest copyWith(
      {enums.V1DeleteUsersRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteUsersIntent? parameters}) {
    return V1DeleteUsersRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteUsersRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteUsersRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteUsersIntent>? parameters}) {
    return V1DeleteUsersRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteUsersResult {
  const V1DeleteUsersResult({
    required this.userIds,
  });

  factory V1DeleteUsersResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteUsersResultFromJson(json);

  static const toJsonFactory = _$V1DeleteUsersResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteUsersResultToJson(this);

  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1DeleteUsersResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteUsersResult &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userIds) ^ runtimeType.hashCode;
}

extension $V1DeleteUsersResultExtension on V1DeleteUsersResult {
  V1DeleteUsersResult copyWith({List<String>? userIds}) {
    return V1DeleteUsersResult(userIds: userIds ?? this.userIds);
  }

  V1DeleteUsersResult copyWithWrapped({Wrapped<List<String>>? userIds}) {
    return V1DeleteUsersResult(
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteWalletsIntent {
  const V1DeleteWalletsIntent({
    required this.walletIds,
    this.deleteWithoutExport,
  });

  factory V1DeleteWalletsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteWalletsIntentFromJson(json);

  static const toJsonFactory = _$V1DeleteWalletsIntentToJson;
  Map<String, dynamic> toJson() => _$V1DeleteWalletsIntentToJson(this);

  @JsonKey(name: 'walletIds', defaultValue: <String>[])
  final List<String> walletIds;
  @JsonKey(name: 'deleteWithoutExport')
  final bool? deleteWithoutExport;
  static const fromJsonFactory = _$V1DeleteWalletsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteWalletsIntent &&
            (identical(other.walletIds, walletIds) ||
                const DeepCollectionEquality()
                    .equals(other.walletIds, walletIds)) &&
            (identical(other.deleteWithoutExport, deleteWithoutExport) ||
                const DeepCollectionEquality()
                    .equals(other.deleteWithoutExport, deleteWithoutExport)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletIds) ^
      const DeepCollectionEquality().hash(deleteWithoutExport) ^
      runtimeType.hashCode;
}

extension $V1DeleteWalletsIntentExtension on V1DeleteWalletsIntent {
  V1DeleteWalletsIntent copyWith(
      {List<String>? walletIds, bool? deleteWithoutExport}) {
    return V1DeleteWalletsIntent(
        walletIds: walletIds ?? this.walletIds,
        deleteWithoutExport: deleteWithoutExport ?? this.deleteWithoutExport);
  }

  V1DeleteWalletsIntent copyWithWrapped(
      {Wrapped<List<String>>? walletIds, Wrapped<bool?>? deleteWithoutExport}) {
    return V1DeleteWalletsIntent(
        walletIds: (walletIds != null ? walletIds.value : this.walletIds),
        deleteWithoutExport: (deleteWithoutExport != null
            ? deleteWithoutExport.value
            : this.deleteWithoutExport));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteWalletsRequest {
  const V1DeleteWalletsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1DeleteWalletsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteWalletsRequestFromJson(json);

  static const toJsonFactory = _$V1DeleteWalletsRequestToJson;
  Map<String, dynamic> toJson() => _$V1DeleteWalletsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1DeleteWalletsRequestTypeToJson,
    fromJson: v1DeleteWalletsRequestTypeFromJson,
  )
  final enums.V1DeleteWalletsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1DeleteWalletsIntent parameters;
  static const fromJsonFactory = _$V1DeleteWalletsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteWalletsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1DeleteWalletsRequestExtension on V1DeleteWalletsRequest {
  V1DeleteWalletsRequest copyWith(
      {enums.V1DeleteWalletsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1DeleteWalletsIntent? parameters}) {
    return V1DeleteWalletsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1DeleteWalletsRequest copyWithWrapped(
      {Wrapped<enums.V1DeleteWalletsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1DeleteWalletsIntent>? parameters}) {
    return V1DeleteWalletsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DeleteWalletsResult {
  const V1DeleteWalletsResult({
    required this.walletIds,
  });

  factory V1DeleteWalletsResult.fromJson(Map<String, dynamic> json) =>
      _$V1DeleteWalletsResultFromJson(json);

  static const toJsonFactory = _$V1DeleteWalletsResultToJson;
  Map<String, dynamic> toJson() => _$V1DeleteWalletsResultToJson(this);

  @JsonKey(name: 'walletIds', defaultValue: <String>[])
  final List<String> walletIds;
  static const fromJsonFactory = _$V1DeleteWalletsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DeleteWalletsResult &&
            (identical(other.walletIds, walletIds) ||
                const DeepCollectionEquality()
                    .equals(other.walletIds, walletIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletIds) ^ runtimeType.hashCode;
}

extension $V1DeleteWalletsResultExtension on V1DeleteWalletsResult {
  V1DeleteWalletsResult copyWith({List<String>? walletIds}) {
    return V1DeleteWalletsResult(walletIds: walletIds ?? this.walletIds);
  }

  V1DeleteWalletsResult copyWithWrapped({Wrapped<List<String>>? walletIds}) {
    return V1DeleteWalletsResult(
        walletIds: (walletIds != null ? walletIds.value : this.walletIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DisablePrivateKeyIntent {
  const V1DisablePrivateKeyIntent({
    required this.privateKeyId,
  });

  factory V1DisablePrivateKeyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1DisablePrivateKeyIntentFromJson(json);

  static const toJsonFactory = _$V1DisablePrivateKeyIntentToJson;
  Map<String, dynamic> toJson() => _$V1DisablePrivateKeyIntentToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  static const fromJsonFactory = _$V1DisablePrivateKeyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DisablePrivateKeyIntent &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^ runtimeType.hashCode;
}

extension $V1DisablePrivateKeyIntentExtension on V1DisablePrivateKeyIntent {
  V1DisablePrivateKeyIntent copyWith({String? privateKeyId}) {
    return V1DisablePrivateKeyIntent(
        privateKeyId: privateKeyId ?? this.privateKeyId);
  }

  V1DisablePrivateKeyIntent copyWithWrapped({Wrapped<String>? privateKeyId}) {
    return V1DisablePrivateKeyIntent(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1DisablePrivateKeyResult {
  const V1DisablePrivateKeyResult({
    required this.privateKeyId,
  });

  factory V1DisablePrivateKeyResult.fromJson(Map<String, dynamic> json) =>
      _$V1DisablePrivateKeyResultFromJson(json);

  static const toJsonFactory = _$V1DisablePrivateKeyResultToJson;
  Map<String, dynamic> toJson() => _$V1DisablePrivateKeyResultToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  static const fromJsonFactory = _$V1DisablePrivateKeyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1DisablePrivateKeyResult &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^ runtimeType.hashCode;
}

extension $V1DisablePrivateKeyResultExtension on V1DisablePrivateKeyResult {
  V1DisablePrivateKeyResult copyWith({String? privateKeyId}) {
    return V1DisablePrivateKeyResult(
        privateKeyId: privateKeyId ?? this.privateKeyId);
  }

  V1DisablePrivateKeyResult copyWithWrapped({Wrapped<String>? privateKeyId}) {
    return V1DisablePrivateKeyResult(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1EmailAuthIntent {
  const V1EmailAuthIntent({
    required this.email,
    required this.targetPublicKey,
    this.apiKeyName,
    this.expirationSeconds,
    this.emailCustomization,
    this.invalidateExisting,
  });

  factory V1EmailAuthIntent.fromJson(Map<String, dynamic> json) =>
      _$V1EmailAuthIntentFromJson(json);

  static const toJsonFactory = _$V1EmailAuthIntentToJson;
  Map<String, dynamic> toJson() => _$V1EmailAuthIntentToJson(this);

  @JsonKey(name: 'email')
  final String email;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(name: 'apiKeyName')
  final String? apiKeyName;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  @JsonKey(name: 'emailCustomization')
  final V1EmailCustomizationParams? emailCustomization;
  @JsonKey(name: 'invalidateExisting')
  final bool? invalidateExisting;
  static const fromJsonFactory = _$V1EmailAuthIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1EmailAuthIntent &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)) &&
            (identical(other.emailCustomization, emailCustomization) ||
                const DeepCollectionEquality()
                    .equals(other.emailCustomization, emailCustomization)) &&
            (identical(other.invalidateExisting, invalidateExisting) ||
                const DeepCollectionEquality()
                    .equals(other.invalidateExisting, invalidateExisting)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      const DeepCollectionEquality().hash(emailCustomization) ^
      const DeepCollectionEquality().hash(invalidateExisting) ^
      runtimeType.hashCode;
}

extension $V1EmailAuthIntentExtension on V1EmailAuthIntent {
  V1EmailAuthIntent copyWith(
      {String? email,
      String? targetPublicKey,
      String? apiKeyName,
      String? expirationSeconds,
      V1EmailCustomizationParams? emailCustomization,
      bool? invalidateExisting}) {
    return V1EmailAuthIntent(
        email: email ?? this.email,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds,
        emailCustomization: emailCustomization ?? this.emailCustomization,
        invalidateExisting: invalidateExisting ?? this.invalidateExisting);
  }

  V1EmailAuthIntent copyWithWrapped(
      {Wrapped<String>? email,
      Wrapped<String>? targetPublicKey,
      Wrapped<String?>? apiKeyName,
      Wrapped<String?>? expirationSeconds,
      Wrapped<V1EmailCustomizationParams?>? emailCustomization,
      Wrapped<bool?>? invalidateExisting}) {
    return V1EmailAuthIntent(
        email: (email != null ? email.value : this.email),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds),
        emailCustomization: (emailCustomization != null
            ? emailCustomization.value
            : this.emailCustomization),
        invalidateExisting: (invalidateExisting != null
            ? invalidateExisting.value
            : this.invalidateExisting));
  }
}

@JsonSerializable(explicitToJson: true)
class V1EmailAuthIntentV2 {
  const V1EmailAuthIntentV2({
    required this.email,
    required this.targetPublicKey,
    this.apiKeyName,
    this.expirationSeconds,
    this.emailCustomization,
    this.invalidateExisting,
  });

  factory V1EmailAuthIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1EmailAuthIntentV2FromJson(json);

  static const toJsonFactory = _$V1EmailAuthIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1EmailAuthIntentV2ToJson(this);

  @JsonKey(name: 'email')
  final String email;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(name: 'apiKeyName')
  final String? apiKeyName;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  @JsonKey(name: 'emailCustomization')
  final V1EmailCustomizationParams? emailCustomization;
  @JsonKey(name: 'invalidateExisting')
  final bool? invalidateExisting;
  static const fromJsonFactory = _$V1EmailAuthIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1EmailAuthIntentV2 &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)) &&
            (identical(other.emailCustomization, emailCustomization) ||
                const DeepCollectionEquality()
                    .equals(other.emailCustomization, emailCustomization)) &&
            (identical(other.invalidateExisting, invalidateExisting) ||
                const DeepCollectionEquality()
                    .equals(other.invalidateExisting, invalidateExisting)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      const DeepCollectionEquality().hash(emailCustomization) ^
      const DeepCollectionEquality().hash(invalidateExisting) ^
      runtimeType.hashCode;
}

extension $V1EmailAuthIntentV2Extension on V1EmailAuthIntentV2 {
  V1EmailAuthIntentV2 copyWith(
      {String? email,
      String? targetPublicKey,
      String? apiKeyName,
      String? expirationSeconds,
      V1EmailCustomizationParams? emailCustomization,
      bool? invalidateExisting}) {
    return V1EmailAuthIntentV2(
        email: email ?? this.email,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds,
        emailCustomization: emailCustomization ?? this.emailCustomization,
        invalidateExisting: invalidateExisting ?? this.invalidateExisting);
  }

  V1EmailAuthIntentV2 copyWithWrapped(
      {Wrapped<String>? email,
      Wrapped<String>? targetPublicKey,
      Wrapped<String?>? apiKeyName,
      Wrapped<String?>? expirationSeconds,
      Wrapped<V1EmailCustomizationParams?>? emailCustomization,
      Wrapped<bool?>? invalidateExisting}) {
    return V1EmailAuthIntentV2(
        email: (email != null ? email.value : this.email),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds),
        emailCustomization: (emailCustomization != null
            ? emailCustomization.value
            : this.emailCustomization),
        invalidateExisting: (invalidateExisting != null
            ? invalidateExisting.value
            : this.invalidateExisting));
  }
}

@JsonSerializable(explicitToJson: true)
class V1EmailAuthRequest {
  const V1EmailAuthRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1EmailAuthRequest.fromJson(Map<String, dynamic> json) =>
      _$V1EmailAuthRequestFromJson(json);

  static const toJsonFactory = _$V1EmailAuthRequestToJson;
  Map<String, dynamic> toJson() => _$V1EmailAuthRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1EmailAuthRequestTypeToJson,
    fromJson: v1EmailAuthRequestTypeFromJson,
  )
  final enums.V1EmailAuthRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1EmailAuthIntentV2 parameters;
  static const fromJsonFactory = _$V1EmailAuthRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1EmailAuthRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1EmailAuthRequestExtension on V1EmailAuthRequest {
  V1EmailAuthRequest copyWith(
      {enums.V1EmailAuthRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1EmailAuthIntentV2? parameters}) {
    return V1EmailAuthRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1EmailAuthRequest copyWithWrapped(
      {Wrapped<enums.V1EmailAuthRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1EmailAuthIntentV2>? parameters}) {
    return V1EmailAuthRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1EmailAuthResult {
  const V1EmailAuthResult({
    required this.userId,
    required this.apiKeyId,
  });

  factory V1EmailAuthResult.fromJson(Map<String, dynamic> json) =>
      _$V1EmailAuthResultFromJson(json);

  static const toJsonFactory = _$V1EmailAuthResultToJson;
  Map<String, dynamic> toJson() => _$V1EmailAuthResultToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'apiKeyId')
  final String apiKeyId;
  static const fromJsonFactory = _$V1EmailAuthResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1EmailAuthResult &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      runtimeType.hashCode;
}

extension $V1EmailAuthResultExtension on V1EmailAuthResult {
  V1EmailAuthResult copyWith({String? userId, String? apiKeyId}) {
    return V1EmailAuthResult(
        userId: userId ?? this.userId, apiKeyId: apiKeyId ?? this.apiKeyId);
  }

  V1EmailAuthResult copyWithWrapped(
      {Wrapped<String>? userId, Wrapped<String>? apiKeyId}) {
    return V1EmailAuthResult(
        userId: (userId != null ? userId.value : this.userId),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1EmailCustomizationParams {
  const V1EmailCustomizationParams({
    this.appName,
    this.logoUrl,
    this.magicLinkTemplate,
    this.templateVariables,
    this.templateId,
  });

  factory V1EmailCustomizationParams.fromJson(Map<String, dynamic> json) =>
      _$V1EmailCustomizationParamsFromJson(json);

  static const toJsonFactory = _$V1EmailCustomizationParamsToJson;
  Map<String, dynamic> toJson() => _$V1EmailCustomizationParamsToJson(this);

  @JsonKey(name: 'appName')
  final String? appName;
  @JsonKey(name: 'logoUrl')
  final String? logoUrl;
  @JsonKey(name: 'magicLinkTemplate')
  final String? magicLinkTemplate;
  @JsonKey(name: 'templateVariables')
  final String? templateVariables;
  @JsonKey(name: 'templateId')
  final String? templateId;
  static const fromJsonFactory = _$V1EmailCustomizationParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1EmailCustomizationParams &&
            (identical(other.appName, appName) ||
                const DeepCollectionEquality()
                    .equals(other.appName, appName)) &&
            (identical(other.logoUrl, logoUrl) ||
                const DeepCollectionEquality()
                    .equals(other.logoUrl, logoUrl)) &&
            (identical(other.magicLinkTemplate, magicLinkTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.magicLinkTemplate, magicLinkTemplate)) &&
            (identical(other.templateVariables, templateVariables) ||
                const DeepCollectionEquality()
                    .equals(other.templateVariables, templateVariables)) &&
            (identical(other.templateId, templateId) ||
                const DeepCollectionEquality()
                    .equals(other.templateId, templateId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(appName) ^
      const DeepCollectionEquality().hash(logoUrl) ^
      const DeepCollectionEquality().hash(magicLinkTemplate) ^
      const DeepCollectionEquality().hash(templateVariables) ^
      const DeepCollectionEquality().hash(templateId) ^
      runtimeType.hashCode;
}

extension $V1EmailCustomizationParamsExtension on V1EmailCustomizationParams {
  V1EmailCustomizationParams copyWith(
      {String? appName,
      String? logoUrl,
      String? magicLinkTemplate,
      String? templateVariables,
      String? templateId}) {
    return V1EmailCustomizationParams(
        appName: appName ?? this.appName,
        logoUrl: logoUrl ?? this.logoUrl,
        magicLinkTemplate: magicLinkTemplate ?? this.magicLinkTemplate,
        templateVariables: templateVariables ?? this.templateVariables,
        templateId: templateId ?? this.templateId);
  }

  V1EmailCustomizationParams copyWithWrapped(
      {Wrapped<String?>? appName,
      Wrapped<String?>? logoUrl,
      Wrapped<String?>? magicLinkTemplate,
      Wrapped<String?>? templateVariables,
      Wrapped<String?>? templateId}) {
    return V1EmailCustomizationParams(
        appName: (appName != null ? appName.value : this.appName),
        logoUrl: (logoUrl != null ? logoUrl.value : this.logoUrl),
        magicLinkTemplate: (magicLinkTemplate != null
            ? magicLinkTemplate.value
            : this.magicLinkTemplate),
        templateVariables: (templateVariables != null
            ? templateVariables.value
            : this.templateVariables),
        templateId: (templateId != null ? templateId.value : this.templateId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportPrivateKeyIntent {
  const V1ExportPrivateKeyIntent({
    required this.privateKeyId,
    required this.targetPublicKey,
  });

  factory V1ExportPrivateKeyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1ExportPrivateKeyIntentFromJson(json);

  static const toJsonFactory = _$V1ExportPrivateKeyIntentToJson;
  Map<String, dynamic> toJson() => _$V1ExportPrivateKeyIntentToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  static const fromJsonFactory = _$V1ExportPrivateKeyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportPrivateKeyIntent &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      runtimeType.hashCode;
}

extension $V1ExportPrivateKeyIntentExtension on V1ExportPrivateKeyIntent {
  V1ExportPrivateKeyIntent copyWith(
      {String? privateKeyId, String? targetPublicKey}) {
    return V1ExportPrivateKeyIntent(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey);
  }

  V1ExportPrivateKeyIntent copyWithWrapped(
      {Wrapped<String>? privateKeyId, Wrapped<String>? targetPublicKey}) {
    return V1ExportPrivateKeyIntent(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportPrivateKeyRequest {
  const V1ExportPrivateKeyRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1ExportPrivateKeyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ExportPrivateKeyRequestFromJson(json);

  static const toJsonFactory = _$V1ExportPrivateKeyRequestToJson;
  Map<String, dynamic> toJson() => _$V1ExportPrivateKeyRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1ExportPrivateKeyRequestTypeToJson,
    fromJson: v1ExportPrivateKeyRequestTypeFromJson,
  )
  final enums.V1ExportPrivateKeyRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1ExportPrivateKeyIntent parameters;
  static const fromJsonFactory = _$V1ExportPrivateKeyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportPrivateKeyRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1ExportPrivateKeyRequestExtension on V1ExportPrivateKeyRequest {
  V1ExportPrivateKeyRequest copyWith(
      {enums.V1ExportPrivateKeyRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1ExportPrivateKeyIntent? parameters}) {
    return V1ExportPrivateKeyRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1ExportPrivateKeyRequest copyWithWrapped(
      {Wrapped<enums.V1ExportPrivateKeyRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1ExportPrivateKeyIntent>? parameters}) {
    return V1ExportPrivateKeyRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportPrivateKeyResult {
  const V1ExportPrivateKeyResult({
    required this.privateKeyId,
    required this.exportBundle,
  });

  factory V1ExportPrivateKeyResult.fromJson(Map<String, dynamic> json) =>
      _$V1ExportPrivateKeyResultFromJson(json);

  static const toJsonFactory = _$V1ExportPrivateKeyResultToJson;
  Map<String, dynamic> toJson() => _$V1ExportPrivateKeyResultToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  @JsonKey(name: 'exportBundle')
  final String exportBundle;
  static const fromJsonFactory = _$V1ExportPrivateKeyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportPrivateKeyResult &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.exportBundle, exportBundle) ||
                const DeepCollectionEquality()
                    .equals(other.exportBundle, exportBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(exportBundle) ^
      runtimeType.hashCode;
}

extension $V1ExportPrivateKeyResultExtension on V1ExportPrivateKeyResult {
  V1ExportPrivateKeyResult copyWith(
      {String? privateKeyId, String? exportBundle}) {
    return V1ExportPrivateKeyResult(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        exportBundle: exportBundle ?? this.exportBundle);
  }

  V1ExportPrivateKeyResult copyWithWrapped(
      {Wrapped<String>? privateKeyId, Wrapped<String>? exportBundle}) {
    return V1ExportPrivateKeyResult(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        exportBundle:
            (exportBundle != null ? exportBundle.value : this.exportBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportWalletAccountIntent {
  const V1ExportWalletAccountIntent({
    required this.address,
    required this.targetPublicKey,
  });

  factory V1ExportWalletAccountIntent.fromJson(Map<String, dynamic> json) =>
      _$V1ExportWalletAccountIntentFromJson(json);

  static const toJsonFactory = _$V1ExportWalletAccountIntentToJson;
  Map<String, dynamic> toJson() => _$V1ExportWalletAccountIntentToJson(this);

  @JsonKey(name: 'address')
  final String address;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  static const fromJsonFactory = _$V1ExportWalletAccountIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportWalletAccountIntent &&
            (identical(other.address, address) ||
                const DeepCollectionEquality()
                    .equals(other.address, address)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(address) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      runtimeType.hashCode;
}

extension $V1ExportWalletAccountIntentExtension on V1ExportWalletAccountIntent {
  V1ExportWalletAccountIntent copyWith(
      {String? address, String? targetPublicKey}) {
    return V1ExportWalletAccountIntent(
        address: address ?? this.address,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey);
  }

  V1ExportWalletAccountIntent copyWithWrapped(
      {Wrapped<String>? address, Wrapped<String>? targetPublicKey}) {
    return V1ExportWalletAccountIntent(
        address: (address != null ? address.value : this.address),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportWalletAccountRequest {
  const V1ExportWalletAccountRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1ExportWalletAccountRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ExportWalletAccountRequestFromJson(json);

  static const toJsonFactory = _$V1ExportWalletAccountRequestToJson;
  Map<String, dynamic> toJson() => _$V1ExportWalletAccountRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1ExportWalletAccountRequestTypeToJson,
    fromJson: v1ExportWalletAccountRequestTypeFromJson,
  )
  final enums.V1ExportWalletAccountRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1ExportWalletAccountIntent parameters;
  static const fromJsonFactory = _$V1ExportWalletAccountRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportWalletAccountRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1ExportWalletAccountRequestExtension
    on V1ExportWalletAccountRequest {
  V1ExportWalletAccountRequest copyWith(
      {enums.V1ExportWalletAccountRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1ExportWalletAccountIntent? parameters}) {
    return V1ExportWalletAccountRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1ExportWalletAccountRequest copyWithWrapped(
      {Wrapped<enums.V1ExportWalletAccountRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1ExportWalletAccountIntent>? parameters}) {
    return V1ExportWalletAccountRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportWalletAccountResult {
  const V1ExportWalletAccountResult({
    required this.address,
    required this.exportBundle,
  });

  factory V1ExportWalletAccountResult.fromJson(Map<String, dynamic> json) =>
      _$V1ExportWalletAccountResultFromJson(json);

  static const toJsonFactory = _$V1ExportWalletAccountResultToJson;
  Map<String, dynamic> toJson() => _$V1ExportWalletAccountResultToJson(this);

  @JsonKey(name: 'address')
  final String address;
  @JsonKey(name: 'exportBundle')
  final String exportBundle;
  static const fromJsonFactory = _$V1ExportWalletAccountResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportWalletAccountResult &&
            (identical(other.address, address) ||
                const DeepCollectionEquality()
                    .equals(other.address, address)) &&
            (identical(other.exportBundle, exportBundle) ||
                const DeepCollectionEquality()
                    .equals(other.exportBundle, exportBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(address) ^
      const DeepCollectionEquality().hash(exportBundle) ^
      runtimeType.hashCode;
}

extension $V1ExportWalletAccountResultExtension on V1ExportWalletAccountResult {
  V1ExportWalletAccountResult copyWith(
      {String? address, String? exportBundle}) {
    return V1ExportWalletAccountResult(
        address: address ?? this.address,
        exportBundle: exportBundle ?? this.exportBundle);
  }

  V1ExportWalletAccountResult copyWithWrapped(
      {Wrapped<String>? address, Wrapped<String>? exportBundle}) {
    return V1ExportWalletAccountResult(
        address: (address != null ? address.value : this.address),
        exportBundle:
            (exportBundle != null ? exportBundle.value : this.exportBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportWalletIntent {
  const V1ExportWalletIntent({
    required this.walletId,
    required this.targetPublicKey,
    this.language,
  });

  factory V1ExportWalletIntent.fromJson(Map<String, dynamic> json) =>
      _$V1ExportWalletIntentFromJson(json);

  static const toJsonFactory = _$V1ExportWalletIntentToJson;
  Map<String, dynamic> toJson() => _$V1ExportWalletIntentToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(
    name: 'language',
    toJson: v1MnemonicLanguageNullableToJson,
    fromJson: v1MnemonicLanguageNullableFromJson,
  )
  final enums.V1MnemonicLanguage? language;
  static const fromJsonFactory = _$V1ExportWalletIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportWalletIntent &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.language, language) ||
                const DeepCollectionEquality()
                    .equals(other.language, language)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(language) ^
      runtimeType.hashCode;
}

extension $V1ExportWalletIntentExtension on V1ExportWalletIntent {
  V1ExportWalletIntent copyWith(
      {String? walletId,
      String? targetPublicKey,
      enums.V1MnemonicLanguage? language}) {
    return V1ExportWalletIntent(
        walletId: walletId ?? this.walletId,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        language: language ?? this.language);
  }

  V1ExportWalletIntent copyWithWrapped(
      {Wrapped<String>? walletId,
      Wrapped<String>? targetPublicKey,
      Wrapped<enums.V1MnemonicLanguage?>? language}) {
    return V1ExportWalletIntent(
        walletId: (walletId != null ? walletId.value : this.walletId),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        language: (language != null ? language.value : this.language));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportWalletRequest {
  const V1ExportWalletRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1ExportWalletRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ExportWalletRequestFromJson(json);

  static const toJsonFactory = _$V1ExportWalletRequestToJson;
  Map<String, dynamic> toJson() => _$V1ExportWalletRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1ExportWalletRequestTypeToJson,
    fromJson: v1ExportWalletRequestTypeFromJson,
  )
  final enums.V1ExportWalletRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1ExportWalletIntent parameters;
  static const fromJsonFactory = _$V1ExportWalletRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportWalletRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1ExportWalletRequestExtension on V1ExportWalletRequest {
  V1ExportWalletRequest copyWith(
      {enums.V1ExportWalletRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1ExportWalletIntent? parameters}) {
    return V1ExportWalletRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1ExportWalletRequest copyWithWrapped(
      {Wrapped<enums.V1ExportWalletRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1ExportWalletIntent>? parameters}) {
    return V1ExportWalletRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ExportWalletResult {
  const V1ExportWalletResult({
    required this.walletId,
    required this.exportBundle,
  });

  factory V1ExportWalletResult.fromJson(Map<String, dynamic> json) =>
      _$V1ExportWalletResultFromJson(json);

  static const toJsonFactory = _$V1ExportWalletResultToJson;
  Map<String, dynamic> toJson() => _$V1ExportWalletResultToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'exportBundle')
  final String exportBundle;
  static const fromJsonFactory = _$V1ExportWalletResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ExportWalletResult &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.exportBundle, exportBundle) ||
                const DeepCollectionEquality()
                    .equals(other.exportBundle, exportBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(exportBundle) ^
      runtimeType.hashCode;
}

extension $V1ExportWalletResultExtension on V1ExportWalletResult {
  V1ExportWalletResult copyWith({String? walletId, String? exportBundle}) {
    return V1ExportWalletResult(
        walletId: walletId ?? this.walletId,
        exportBundle: exportBundle ?? this.exportBundle);
  }

  V1ExportWalletResult copyWithWrapped(
      {Wrapped<String>? walletId, Wrapped<String>? exportBundle}) {
    return V1ExportWalletResult(
        walletId: (walletId != null ? walletId.value : this.walletId),
        exportBundle:
            (exportBundle != null ? exportBundle.value : this.exportBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Feature {
  const V1Feature({
    this.name,
    this.$value,
  });

  factory V1Feature.fromJson(Map<String, dynamic> json) =>
      _$V1FeatureFromJson(json);

  static const toJsonFactory = _$V1FeatureToJson;
  Map<String, dynamic> toJson() => _$V1FeatureToJson(this);

  @JsonKey(
    name: 'name',
    toJson: v1FeatureNameNullableToJson,
    fromJson: v1FeatureNameNullableFromJson,
  )
  final enums.V1FeatureName? name;
  @JsonKey(name: 'value')
  final String? $value;
  static const fromJsonFactory = _$V1FeatureFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Feature &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.$value, $value) ||
                const DeepCollectionEquality().equals(other.$value, $value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash($value) ^
      runtimeType.hashCode;
}

extension $V1FeatureExtension on V1Feature {
  V1Feature copyWith({enums.V1FeatureName? name, String? $value}) {
    return V1Feature(name: name ?? this.name, $value: $value ?? this.$value);
  }

  V1Feature copyWithWrapped(
      {Wrapped<enums.V1FeatureName?>? name, Wrapped<String?>? $value}) {
    return V1Feature(
        name: (name != null ? name.value : this.name),
        $value: ($value != null ? $value.value : this.$value));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetActivitiesRequest {
  const V1GetActivitiesRequest({
    required this.organizationId,
    this.filterByStatus,
    this.paginationOptions,
    this.filterByType,
  });

  factory V1GetActivitiesRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetActivitiesRequestFromJson(json);

  static const toJsonFactory = _$V1GetActivitiesRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetActivitiesRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(
    name: 'filterByStatus',
    toJson: v1ActivityStatusListToJson,
    fromJson: v1ActivityStatusListFromJson,
  )
  final List<enums.V1ActivityStatus>? filterByStatus;
  @JsonKey(name: 'paginationOptions')
  final V1Pagination? paginationOptions;
  @JsonKey(
    name: 'filterByType',
    toJson: v1ActivityTypeListToJson,
    fromJson: v1ActivityTypeListFromJson,
  )
  final List<enums.V1ActivityType>? filterByType;
  static const fromJsonFactory = _$V1GetActivitiesRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetActivitiesRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.filterByStatus, filterByStatus) ||
                const DeepCollectionEquality()
                    .equals(other.filterByStatus, filterByStatus)) &&
            (identical(other.paginationOptions, paginationOptions) ||
                const DeepCollectionEquality()
                    .equals(other.paginationOptions, paginationOptions)) &&
            (identical(other.filterByType, filterByType) ||
                const DeepCollectionEquality()
                    .equals(other.filterByType, filterByType)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(filterByStatus) ^
      const DeepCollectionEquality().hash(paginationOptions) ^
      const DeepCollectionEquality().hash(filterByType) ^
      runtimeType.hashCode;
}

extension $V1GetActivitiesRequestExtension on V1GetActivitiesRequest {
  V1GetActivitiesRequest copyWith(
      {String? organizationId,
      List<enums.V1ActivityStatus>? filterByStatus,
      V1Pagination? paginationOptions,
      List<enums.V1ActivityType>? filterByType}) {
    return V1GetActivitiesRequest(
        organizationId: organizationId ?? this.organizationId,
        filterByStatus: filterByStatus ?? this.filterByStatus,
        paginationOptions: paginationOptions ?? this.paginationOptions,
        filterByType: filterByType ?? this.filterByType);
  }

  V1GetActivitiesRequest copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<List<enums.V1ActivityStatus>?>? filterByStatus,
      Wrapped<V1Pagination?>? paginationOptions,
      Wrapped<List<enums.V1ActivityType>?>? filterByType}) {
    return V1GetActivitiesRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        filterByStatus: (filterByStatus != null
            ? filterByStatus.value
            : this.filterByStatus),
        paginationOptions: (paginationOptions != null
            ? paginationOptions.value
            : this.paginationOptions),
        filterByType:
            (filterByType != null ? filterByType.value : this.filterByType));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetActivitiesResponse {
  const V1GetActivitiesResponse({
    required this.activities,
  });

  factory V1GetActivitiesResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetActivitiesResponseFromJson(json);

  static const toJsonFactory = _$V1GetActivitiesResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetActivitiesResponseToJson(this);

  @JsonKey(name: 'activities', defaultValue: <V1Activity>[])
  final List<V1Activity> activities;
  static const fromJsonFactory = _$V1GetActivitiesResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetActivitiesResponse &&
            (identical(other.activities, activities) ||
                const DeepCollectionEquality()
                    .equals(other.activities, activities)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(activities) ^ runtimeType.hashCode;
}

extension $V1GetActivitiesResponseExtension on V1GetActivitiesResponse {
  V1GetActivitiesResponse copyWith({List<V1Activity>? activities}) {
    return V1GetActivitiesResponse(activities: activities ?? this.activities);
  }

  V1GetActivitiesResponse copyWithWrapped(
      {Wrapped<List<V1Activity>>? activities}) {
    return V1GetActivitiesResponse(
        activities: (activities != null ? activities.value : this.activities));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetActivityRequest {
  const V1GetActivityRequest({
    required this.organizationId,
    required this.activityId,
  });

  factory V1GetActivityRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetActivityRequestFromJson(json);

  static const toJsonFactory = _$V1GetActivityRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetActivityRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'activityId')
  final String activityId;
  static const fromJsonFactory = _$V1GetActivityRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetActivityRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.activityId, activityId) ||
                const DeepCollectionEquality()
                    .equals(other.activityId, activityId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(activityId) ^
      runtimeType.hashCode;
}

extension $V1GetActivityRequestExtension on V1GetActivityRequest {
  V1GetActivityRequest copyWith({String? organizationId, String? activityId}) {
    return V1GetActivityRequest(
        organizationId: organizationId ?? this.organizationId,
        activityId: activityId ?? this.activityId);
  }

  V1GetActivityRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? activityId}) {
    return V1GetActivityRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        activityId: (activityId != null ? activityId.value : this.activityId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetApiKeyRequest {
  const V1GetApiKeyRequest({
    required this.organizationId,
    required this.apiKeyId,
  });

  factory V1GetApiKeyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetApiKeyRequestFromJson(json);

  static const toJsonFactory = _$V1GetApiKeyRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetApiKeyRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'apiKeyId')
  final String apiKeyId;
  static const fromJsonFactory = _$V1GetApiKeyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetApiKeyRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      runtimeType.hashCode;
}

extension $V1GetApiKeyRequestExtension on V1GetApiKeyRequest {
  V1GetApiKeyRequest copyWith({String? organizationId, String? apiKeyId}) {
    return V1GetApiKeyRequest(
        organizationId: organizationId ?? this.organizationId,
        apiKeyId: apiKeyId ?? this.apiKeyId);
  }

  V1GetApiKeyRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? apiKeyId}) {
    return V1GetApiKeyRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetApiKeyResponse {
  const V1GetApiKeyResponse({
    required this.apiKey,
  });

  factory V1GetApiKeyResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetApiKeyResponseFromJson(json);

  static const toJsonFactory = _$V1GetApiKeyResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetApiKeyResponseToJson(this);

  @JsonKey(name: 'apiKey')
  final V1ApiKey apiKey;
  static const fromJsonFactory = _$V1GetApiKeyResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetApiKeyResponse &&
            (identical(other.apiKey, apiKey) ||
                const DeepCollectionEquality().equals(other.apiKey, apiKey)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKey) ^ runtimeType.hashCode;
}

extension $V1GetApiKeyResponseExtension on V1GetApiKeyResponse {
  V1GetApiKeyResponse copyWith({V1ApiKey? apiKey}) {
    return V1GetApiKeyResponse(apiKey: apiKey ?? this.apiKey);
  }

  V1GetApiKeyResponse copyWithWrapped({Wrapped<V1ApiKey>? apiKey}) {
    return V1GetApiKeyResponse(
        apiKey: (apiKey != null ? apiKey.value : this.apiKey));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetApiKeysRequest {
  const V1GetApiKeysRequest({
    required this.organizationId,
    this.userId,
  });

  factory V1GetApiKeysRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetApiKeysRequestFromJson(json);

  static const toJsonFactory = _$V1GetApiKeysRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetApiKeysRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'userId')
  final String? userId;
  static const fromJsonFactory = _$V1GetApiKeysRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetApiKeysRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1GetApiKeysRequestExtension on V1GetApiKeysRequest {
  V1GetApiKeysRequest copyWith({String? organizationId, String? userId}) {
    return V1GetApiKeysRequest(
        organizationId: organizationId ?? this.organizationId,
        userId: userId ?? this.userId);
  }

  V1GetApiKeysRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String?>? userId}) {
    return V1GetApiKeysRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetApiKeysResponse {
  const V1GetApiKeysResponse({
    required this.apiKeys,
  });

  factory V1GetApiKeysResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetApiKeysResponseFromJson(json);

  static const toJsonFactory = _$V1GetApiKeysResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetApiKeysResponseToJson(this);

  @JsonKey(name: 'apiKeys', defaultValue: <V1ApiKey>[])
  final List<V1ApiKey> apiKeys;
  static const fromJsonFactory = _$V1GetApiKeysResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetApiKeysResponse &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality().equals(other.apiKeys, apiKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(apiKeys) ^ runtimeType.hashCode;
}

extension $V1GetApiKeysResponseExtension on V1GetApiKeysResponse {
  V1GetApiKeysResponse copyWith({List<V1ApiKey>? apiKeys}) {
    return V1GetApiKeysResponse(apiKeys: apiKeys ?? this.apiKeys);
  }

  V1GetApiKeysResponse copyWithWrapped({Wrapped<List<V1ApiKey>>? apiKeys}) {
    return V1GetApiKeysResponse(
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetAttestationDocumentRequest {
  const V1GetAttestationDocumentRequest({
    required this.organizationId,
    required this.enclaveType,
  });

  factory V1GetAttestationDocumentRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetAttestationDocumentRequestFromJson(json);

  static const toJsonFactory = _$V1GetAttestationDocumentRequestToJson;
  Map<String, dynamic> toJson() =>
      _$V1GetAttestationDocumentRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'enclaveType')
  final String enclaveType;
  static const fromJsonFactory = _$V1GetAttestationDocumentRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetAttestationDocumentRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.enclaveType, enclaveType) ||
                const DeepCollectionEquality()
                    .equals(other.enclaveType, enclaveType)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(enclaveType) ^
      runtimeType.hashCode;
}

extension $V1GetAttestationDocumentRequestExtension
    on V1GetAttestationDocumentRequest {
  V1GetAttestationDocumentRequest copyWith(
      {String? organizationId, String? enclaveType}) {
    return V1GetAttestationDocumentRequest(
        organizationId: organizationId ?? this.organizationId,
        enclaveType: enclaveType ?? this.enclaveType);
  }

  V1GetAttestationDocumentRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? enclaveType}) {
    return V1GetAttestationDocumentRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        enclaveType:
            (enclaveType != null ? enclaveType.value : this.enclaveType));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetAttestationDocumentResponse {
  const V1GetAttestationDocumentResponse({
    required this.attestationDocument,
  });

  factory V1GetAttestationDocumentResponse.fromJson(
          Map<String, dynamic> json) =>
      _$V1GetAttestationDocumentResponseFromJson(json);

  static const toJsonFactory = _$V1GetAttestationDocumentResponseToJson;
  Map<String, dynamic> toJson() =>
      _$V1GetAttestationDocumentResponseToJson(this);

  @JsonKey(name: 'attestationDocument')
  final String attestationDocument;
  static const fromJsonFactory = _$V1GetAttestationDocumentResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetAttestationDocumentResponse &&
            (identical(other.attestationDocument, attestationDocument) ||
                const DeepCollectionEquality()
                    .equals(other.attestationDocument, attestationDocument)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(attestationDocument) ^
      runtimeType.hashCode;
}

extension $V1GetAttestationDocumentResponseExtension
    on V1GetAttestationDocumentResponse {
  V1GetAttestationDocumentResponse copyWith({String? attestationDocument}) {
    return V1GetAttestationDocumentResponse(
        attestationDocument: attestationDocument ?? this.attestationDocument);
  }

  V1GetAttestationDocumentResponse copyWithWrapped(
      {Wrapped<String>? attestationDocument}) {
    return V1GetAttestationDocumentResponse(
        attestationDocument: (attestationDocument != null
            ? attestationDocument.value
            : this.attestationDocument));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetAuthenticatorRequest {
  const V1GetAuthenticatorRequest({
    required this.organizationId,
    required this.authenticatorId,
  });

  factory V1GetAuthenticatorRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetAuthenticatorRequestFromJson(json);

  static const toJsonFactory = _$V1GetAuthenticatorRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetAuthenticatorRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'authenticatorId')
  final String authenticatorId;
  static const fromJsonFactory = _$V1GetAuthenticatorRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetAuthenticatorRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.authenticatorId, authenticatorId) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorId, authenticatorId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(authenticatorId) ^
      runtimeType.hashCode;
}

extension $V1GetAuthenticatorRequestExtension on V1GetAuthenticatorRequest {
  V1GetAuthenticatorRequest copyWith(
      {String? organizationId, String? authenticatorId}) {
    return V1GetAuthenticatorRequest(
        organizationId: organizationId ?? this.organizationId,
        authenticatorId: authenticatorId ?? this.authenticatorId);
  }

  V1GetAuthenticatorRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? authenticatorId}) {
    return V1GetAuthenticatorRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        authenticatorId: (authenticatorId != null
            ? authenticatorId.value
            : this.authenticatorId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetAuthenticatorResponse {
  const V1GetAuthenticatorResponse({
    required this.authenticator,
  });

  factory V1GetAuthenticatorResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetAuthenticatorResponseFromJson(json);

  static const toJsonFactory = _$V1GetAuthenticatorResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetAuthenticatorResponseToJson(this);

  @JsonKey(name: 'authenticator')
  final V1Authenticator authenticator;
  static const fromJsonFactory = _$V1GetAuthenticatorResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetAuthenticatorResponse &&
            (identical(other.authenticator, authenticator) ||
                const DeepCollectionEquality()
                    .equals(other.authenticator, authenticator)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticator) ^ runtimeType.hashCode;
}

extension $V1GetAuthenticatorResponseExtension on V1GetAuthenticatorResponse {
  V1GetAuthenticatorResponse copyWith({V1Authenticator? authenticator}) {
    return V1GetAuthenticatorResponse(
        authenticator: authenticator ?? this.authenticator);
  }

  V1GetAuthenticatorResponse copyWithWrapped(
      {Wrapped<V1Authenticator>? authenticator}) {
    return V1GetAuthenticatorResponse(
        authenticator:
            (authenticator != null ? authenticator.value : this.authenticator));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetAuthenticatorsRequest {
  const V1GetAuthenticatorsRequest({
    required this.organizationId,
    required this.userId,
  });

  factory V1GetAuthenticatorsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetAuthenticatorsRequestFromJson(json);

  static const toJsonFactory = _$V1GetAuthenticatorsRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetAuthenticatorsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1GetAuthenticatorsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetAuthenticatorsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1GetAuthenticatorsRequestExtension on V1GetAuthenticatorsRequest {
  V1GetAuthenticatorsRequest copyWith(
      {String? organizationId, String? userId}) {
    return V1GetAuthenticatorsRequest(
        organizationId: organizationId ?? this.organizationId,
        userId: userId ?? this.userId);
  }

  V1GetAuthenticatorsRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? userId}) {
    return V1GetAuthenticatorsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetAuthenticatorsResponse {
  const V1GetAuthenticatorsResponse({
    required this.authenticators,
  });

  factory V1GetAuthenticatorsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetAuthenticatorsResponseFromJson(json);

  static const toJsonFactory = _$V1GetAuthenticatorsResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetAuthenticatorsResponseToJson(this);

  @JsonKey(name: 'authenticators', defaultValue: <V1Authenticator>[])
  final List<V1Authenticator> authenticators;
  static const fromJsonFactory = _$V1GetAuthenticatorsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetAuthenticatorsResponse &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticators) ^
      runtimeType.hashCode;
}

extension $V1GetAuthenticatorsResponseExtension on V1GetAuthenticatorsResponse {
  V1GetAuthenticatorsResponse copyWith(
      {List<V1Authenticator>? authenticators}) {
    return V1GetAuthenticatorsResponse(
        authenticators: authenticators ?? this.authenticators);
  }

  V1GetAuthenticatorsResponse copyWithWrapped(
      {Wrapped<List<V1Authenticator>>? authenticators}) {
    return V1GetAuthenticatorsResponse(
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetOauthProvidersRequest {
  const V1GetOauthProvidersRequest({
    required this.organizationId,
    this.userId,
  });

  factory V1GetOauthProvidersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetOauthProvidersRequestFromJson(json);

  static const toJsonFactory = _$V1GetOauthProvidersRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetOauthProvidersRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'userId')
  final String? userId;
  static const fromJsonFactory = _$V1GetOauthProvidersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetOauthProvidersRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1GetOauthProvidersRequestExtension on V1GetOauthProvidersRequest {
  V1GetOauthProvidersRequest copyWith(
      {String? organizationId, String? userId}) {
    return V1GetOauthProvidersRequest(
        organizationId: organizationId ?? this.organizationId,
        userId: userId ?? this.userId);
  }

  V1GetOauthProvidersRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String?>? userId}) {
    return V1GetOauthProvidersRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetOauthProvidersResponse {
  const V1GetOauthProvidersResponse({
    required this.oauthProviders,
  });

  factory V1GetOauthProvidersResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetOauthProvidersResponseFromJson(json);

  static const toJsonFactory = _$V1GetOauthProvidersResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetOauthProvidersResponseToJson(this);

  @JsonKey(name: 'oauthProviders', defaultValue: <V1OauthProvider>[])
  final List<V1OauthProvider> oauthProviders;
  static const fromJsonFactory = _$V1GetOauthProvidersResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetOauthProvidersResponse &&
            (identical(other.oauthProviders, oauthProviders) ||
                const DeepCollectionEquality()
                    .equals(other.oauthProviders, oauthProviders)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(oauthProviders) ^
      runtimeType.hashCode;
}

extension $V1GetOauthProvidersResponseExtension on V1GetOauthProvidersResponse {
  V1GetOauthProvidersResponse copyWith(
      {List<V1OauthProvider>? oauthProviders}) {
    return V1GetOauthProvidersResponse(
        oauthProviders: oauthProviders ?? this.oauthProviders);
  }

  V1GetOauthProvidersResponse copyWithWrapped(
      {Wrapped<List<V1OauthProvider>>? oauthProviders}) {
    return V1GetOauthProvidersResponse(
        oauthProviders: (oauthProviders != null
            ? oauthProviders.value
            : this.oauthProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetOrganizationConfigsRequest {
  const V1GetOrganizationConfigsRequest({
    required this.organizationId,
  });

  factory V1GetOrganizationConfigsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetOrganizationConfigsRequestFromJson(json);

  static const toJsonFactory = _$V1GetOrganizationConfigsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$V1GetOrganizationConfigsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetOrganizationConfigsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetOrganizationConfigsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetOrganizationConfigsRequestExtension
    on V1GetOrganizationConfigsRequest {
  V1GetOrganizationConfigsRequest copyWith({String? organizationId}) {
    return V1GetOrganizationConfigsRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetOrganizationConfigsRequest copyWithWrapped(
      {Wrapped<String>? organizationId}) {
    return V1GetOrganizationConfigsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetOrganizationConfigsResponse {
  const V1GetOrganizationConfigsResponse({
    required this.configs,
  });

  factory V1GetOrganizationConfigsResponse.fromJson(
          Map<String, dynamic> json) =>
      _$V1GetOrganizationConfigsResponseFromJson(json);

  static const toJsonFactory = _$V1GetOrganizationConfigsResponseToJson;
  Map<String, dynamic> toJson() =>
      _$V1GetOrganizationConfigsResponseToJson(this);

  @JsonKey(name: 'configs')
  final V1Config configs;
  static const fromJsonFactory = _$V1GetOrganizationConfigsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetOrganizationConfigsResponse &&
            (identical(other.configs, configs) ||
                const DeepCollectionEquality().equals(other.configs, configs)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(configs) ^ runtimeType.hashCode;
}

extension $V1GetOrganizationConfigsResponseExtension
    on V1GetOrganizationConfigsResponse {
  V1GetOrganizationConfigsResponse copyWith({V1Config? configs}) {
    return V1GetOrganizationConfigsResponse(configs: configs ?? this.configs);
  }

  V1GetOrganizationConfigsResponse copyWithWrapped(
      {Wrapped<V1Config>? configs}) {
    return V1GetOrganizationConfigsResponse(
        configs: (configs != null ? configs.value : this.configs));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetOrganizationRequest {
  const V1GetOrganizationRequest({
    required this.organizationId,
  });

  factory V1GetOrganizationRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetOrganizationRequestFromJson(json);

  static const toJsonFactory = _$V1GetOrganizationRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetOrganizationRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetOrganizationRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetOrganizationRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetOrganizationRequestExtension on V1GetOrganizationRequest {
  V1GetOrganizationRequest copyWith({String? organizationId}) {
    return V1GetOrganizationRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetOrganizationRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1GetOrganizationRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetOrganizationResponse {
  const V1GetOrganizationResponse({
    required this.organizationData,
  });

  factory V1GetOrganizationResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetOrganizationResponseFromJson(json);

  static const toJsonFactory = _$V1GetOrganizationResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetOrganizationResponseToJson(this);

  @JsonKey(name: 'organizationData')
  final V1OrganizationData organizationData;
  static const fromJsonFactory = _$V1GetOrganizationResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetOrganizationResponse &&
            (identical(other.organizationData, organizationData) ||
                const DeepCollectionEquality()
                    .equals(other.organizationData, organizationData)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationData) ^
      runtimeType.hashCode;
}

extension $V1GetOrganizationResponseExtension on V1GetOrganizationResponse {
  V1GetOrganizationResponse copyWith({V1OrganizationData? organizationData}) {
    return V1GetOrganizationResponse(
        organizationData: organizationData ?? this.organizationData);
  }

  V1GetOrganizationResponse copyWithWrapped(
      {Wrapped<V1OrganizationData>? organizationData}) {
    return V1GetOrganizationResponse(
        organizationData: (organizationData != null
            ? organizationData.value
            : this.organizationData));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPoliciesRequest {
  const V1GetPoliciesRequest({
    required this.organizationId,
  });

  factory V1GetPoliciesRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetPoliciesRequestFromJson(json);

  static const toJsonFactory = _$V1GetPoliciesRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetPoliciesRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetPoliciesRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPoliciesRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetPoliciesRequestExtension on V1GetPoliciesRequest {
  V1GetPoliciesRequest copyWith({String? organizationId}) {
    return V1GetPoliciesRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetPoliciesRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1GetPoliciesRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPoliciesResponse {
  const V1GetPoliciesResponse({
    required this.policies,
  });

  factory V1GetPoliciesResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetPoliciesResponseFromJson(json);

  static const toJsonFactory = _$V1GetPoliciesResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetPoliciesResponseToJson(this);

  @JsonKey(name: 'policies', defaultValue: <V1Policy>[])
  final List<V1Policy> policies;
  static const fromJsonFactory = _$V1GetPoliciesResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPoliciesResponse &&
            (identical(other.policies, policies) ||
                const DeepCollectionEquality()
                    .equals(other.policies, policies)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policies) ^ runtimeType.hashCode;
}

extension $V1GetPoliciesResponseExtension on V1GetPoliciesResponse {
  V1GetPoliciesResponse copyWith({List<V1Policy>? policies}) {
    return V1GetPoliciesResponse(policies: policies ?? this.policies);
  }

  V1GetPoliciesResponse copyWithWrapped({Wrapped<List<V1Policy>>? policies}) {
    return V1GetPoliciesResponse(
        policies: (policies != null ? policies.value : this.policies));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPolicyRequest {
  const V1GetPolicyRequest({
    required this.organizationId,
    required this.policyId,
  });

  factory V1GetPolicyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetPolicyRequestFromJson(json);

  static const toJsonFactory = _$V1GetPolicyRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetPolicyRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'policyId')
  final String policyId;
  static const fromJsonFactory = _$V1GetPolicyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPolicyRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(policyId) ^
      runtimeType.hashCode;
}

extension $V1GetPolicyRequestExtension on V1GetPolicyRequest {
  V1GetPolicyRequest copyWith({String? organizationId, String? policyId}) {
    return V1GetPolicyRequest(
        organizationId: organizationId ?? this.organizationId,
        policyId: policyId ?? this.policyId);
  }

  V1GetPolicyRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? policyId}) {
    return V1GetPolicyRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        policyId: (policyId != null ? policyId.value : this.policyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPolicyResponse {
  const V1GetPolicyResponse({
    required this.policy,
  });

  factory V1GetPolicyResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetPolicyResponseFromJson(json);

  static const toJsonFactory = _$V1GetPolicyResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetPolicyResponseToJson(this);

  @JsonKey(name: 'policy')
  final V1Policy policy;
  static const fromJsonFactory = _$V1GetPolicyResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPolicyResponse &&
            (identical(other.policy, policy) ||
                const DeepCollectionEquality().equals(other.policy, policy)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policy) ^ runtimeType.hashCode;
}

extension $V1GetPolicyResponseExtension on V1GetPolicyResponse {
  V1GetPolicyResponse copyWith({V1Policy? policy}) {
    return V1GetPolicyResponse(policy: policy ?? this.policy);
  }

  V1GetPolicyResponse copyWithWrapped({Wrapped<V1Policy>? policy}) {
    return V1GetPolicyResponse(
        policy: (policy != null ? policy.value : this.policy));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPrivateKeyRequest {
  const V1GetPrivateKeyRequest({
    required this.organizationId,
    required this.privateKeyId,
  });

  factory V1GetPrivateKeyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetPrivateKeyRequestFromJson(json);

  static const toJsonFactory = _$V1GetPrivateKeyRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetPrivateKeyRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  static const fromJsonFactory = _$V1GetPrivateKeyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPrivateKeyRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(privateKeyId) ^
      runtimeType.hashCode;
}

extension $V1GetPrivateKeyRequestExtension on V1GetPrivateKeyRequest {
  V1GetPrivateKeyRequest copyWith(
      {String? organizationId, String? privateKeyId}) {
    return V1GetPrivateKeyRequest(
        organizationId: organizationId ?? this.organizationId,
        privateKeyId: privateKeyId ?? this.privateKeyId);
  }

  V1GetPrivateKeyRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? privateKeyId}) {
    return V1GetPrivateKeyRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPrivateKeyResponse {
  const V1GetPrivateKeyResponse({
    required this.privateKey,
  });

  factory V1GetPrivateKeyResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetPrivateKeyResponseFromJson(json);

  static const toJsonFactory = _$V1GetPrivateKeyResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetPrivateKeyResponseToJson(this);

  @JsonKey(name: 'privateKey')
  final V1PrivateKey privateKey;
  static const fromJsonFactory = _$V1GetPrivateKeyResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPrivateKeyResponse &&
            (identical(other.privateKey, privateKey) ||
                const DeepCollectionEquality()
                    .equals(other.privateKey, privateKey)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKey) ^ runtimeType.hashCode;
}

extension $V1GetPrivateKeyResponseExtension on V1GetPrivateKeyResponse {
  V1GetPrivateKeyResponse copyWith({V1PrivateKey? privateKey}) {
    return V1GetPrivateKeyResponse(privateKey: privateKey ?? this.privateKey);
  }

  V1GetPrivateKeyResponse copyWithWrapped({Wrapped<V1PrivateKey>? privateKey}) {
    return V1GetPrivateKeyResponse(
        privateKey: (privateKey != null ? privateKey.value : this.privateKey));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPrivateKeysRequest {
  const V1GetPrivateKeysRequest({
    required this.organizationId,
  });

  factory V1GetPrivateKeysRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetPrivateKeysRequestFromJson(json);

  static const toJsonFactory = _$V1GetPrivateKeysRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetPrivateKeysRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetPrivateKeysRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPrivateKeysRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetPrivateKeysRequestExtension on V1GetPrivateKeysRequest {
  V1GetPrivateKeysRequest copyWith({String? organizationId}) {
    return V1GetPrivateKeysRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetPrivateKeysRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1GetPrivateKeysRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetPrivateKeysResponse {
  const V1GetPrivateKeysResponse({
    required this.privateKeys,
  });

  factory V1GetPrivateKeysResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetPrivateKeysResponseFromJson(json);

  static const toJsonFactory = _$V1GetPrivateKeysResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetPrivateKeysResponseToJson(this);

  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKey>[])
  final List<V1PrivateKey> privateKeys;
  static const fromJsonFactory = _$V1GetPrivateKeysResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetPrivateKeysResponse &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeys) ^ runtimeType.hashCode;
}

extension $V1GetPrivateKeysResponseExtension on V1GetPrivateKeysResponse {
  V1GetPrivateKeysResponse copyWith({List<V1PrivateKey>? privateKeys}) {
    return V1GetPrivateKeysResponse(
        privateKeys: privateKeys ?? this.privateKeys);
  }

  V1GetPrivateKeysResponse copyWithWrapped(
      {Wrapped<List<V1PrivateKey>>? privateKeys}) {
    return V1GetPrivateKeysResponse(
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetSubOrgIdsRequest {
  const V1GetSubOrgIdsRequest({
    required this.organizationId,
    this.filterType,
    this.filterValue,
    this.paginationOptions,
  });

  factory V1GetSubOrgIdsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetSubOrgIdsRequestFromJson(json);

  static const toJsonFactory = _$V1GetSubOrgIdsRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetSubOrgIdsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'filterType')
  final String? filterType;
  @JsonKey(name: 'filterValue')
  final String? filterValue;
  @JsonKey(name: 'paginationOptions')
  final V1Pagination? paginationOptions;
  static const fromJsonFactory = _$V1GetSubOrgIdsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetSubOrgIdsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.filterType, filterType) ||
                const DeepCollectionEquality()
                    .equals(other.filterType, filterType)) &&
            (identical(other.filterValue, filterValue) ||
                const DeepCollectionEquality()
                    .equals(other.filterValue, filterValue)) &&
            (identical(other.paginationOptions, paginationOptions) ||
                const DeepCollectionEquality()
                    .equals(other.paginationOptions, paginationOptions)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(filterType) ^
      const DeepCollectionEquality().hash(filterValue) ^
      const DeepCollectionEquality().hash(paginationOptions) ^
      runtimeType.hashCode;
}

extension $V1GetSubOrgIdsRequestExtension on V1GetSubOrgIdsRequest {
  V1GetSubOrgIdsRequest copyWith(
      {String? organizationId,
      String? filterType,
      String? filterValue,
      V1Pagination? paginationOptions}) {
    return V1GetSubOrgIdsRequest(
        organizationId: organizationId ?? this.organizationId,
        filterType: filterType ?? this.filterType,
        filterValue: filterValue ?? this.filterValue,
        paginationOptions: paginationOptions ?? this.paginationOptions);
  }

  V1GetSubOrgIdsRequest copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String?>? filterType,
      Wrapped<String?>? filterValue,
      Wrapped<V1Pagination?>? paginationOptions}) {
    return V1GetSubOrgIdsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        filterType: (filterType != null ? filterType.value : this.filterType),
        filterValue:
            (filterValue != null ? filterValue.value : this.filterValue),
        paginationOptions: (paginationOptions != null
            ? paginationOptions.value
            : this.paginationOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetSubOrgIdsResponse {
  const V1GetSubOrgIdsResponse({
    required this.organizationIds,
  });

  factory V1GetSubOrgIdsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetSubOrgIdsResponseFromJson(json);

  static const toJsonFactory = _$V1GetSubOrgIdsResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetSubOrgIdsResponseToJson(this);

  @JsonKey(name: 'organizationIds', defaultValue: <String>[])
  final List<String> organizationIds;
  static const fromJsonFactory = _$V1GetSubOrgIdsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetSubOrgIdsResponse &&
            (identical(other.organizationIds, organizationIds) ||
                const DeepCollectionEquality()
                    .equals(other.organizationIds, organizationIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationIds) ^
      runtimeType.hashCode;
}

extension $V1GetSubOrgIdsResponseExtension on V1GetSubOrgIdsResponse {
  V1GetSubOrgIdsResponse copyWith({List<String>? organizationIds}) {
    return V1GetSubOrgIdsResponse(
        organizationIds: organizationIds ?? this.organizationIds);
  }

  V1GetSubOrgIdsResponse copyWithWrapped(
      {Wrapped<List<String>>? organizationIds}) {
    return V1GetSubOrgIdsResponse(
        organizationIds: (organizationIds != null
            ? organizationIds.value
            : this.organizationIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetUserRequest {
  const V1GetUserRequest({
    required this.organizationId,
    required this.userId,
  });

  factory V1GetUserRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetUserRequestFromJson(json);

  static const toJsonFactory = _$V1GetUserRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetUserRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1GetUserRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetUserRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1GetUserRequestExtension on V1GetUserRequest {
  V1GetUserRequest copyWith({String? organizationId, String? userId}) {
    return V1GetUserRequest(
        organizationId: organizationId ?? this.organizationId,
        userId: userId ?? this.userId);
  }

  V1GetUserRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? userId}) {
    return V1GetUserRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetUserResponse {
  const V1GetUserResponse({
    required this.user,
  });

  factory V1GetUserResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetUserResponseFromJson(json);

  static const toJsonFactory = _$V1GetUserResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetUserResponseToJson(this);

  @JsonKey(name: 'user')
  final V1User user;
  static const fromJsonFactory = _$V1GetUserResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetUserResponse &&
            (identical(other.user, user) ||
                const DeepCollectionEquality().equals(other.user, user)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(user) ^ runtimeType.hashCode;
}

extension $V1GetUserResponseExtension on V1GetUserResponse {
  V1GetUserResponse copyWith({V1User? user}) {
    return V1GetUserResponse(user: user ?? this.user);
  }

  V1GetUserResponse copyWithWrapped({Wrapped<V1User>? user}) {
    return V1GetUserResponse(user: (user != null ? user.value : this.user));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetUsersRequest {
  const V1GetUsersRequest({
    required this.organizationId,
  });

  factory V1GetUsersRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetUsersRequestFromJson(json);

  static const toJsonFactory = _$V1GetUsersRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetUsersRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetUsersRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetUsersRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetUsersRequestExtension on V1GetUsersRequest {
  V1GetUsersRequest copyWith({String? organizationId}) {
    return V1GetUsersRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetUsersRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1GetUsersRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetUsersResponse {
  const V1GetUsersResponse({
    required this.users,
  });

  factory V1GetUsersResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetUsersResponseFromJson(json);

  static const toJsonFactory = _$V1GetUsersResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetUsersResponseToJson(this);

  @JsonKey(name: 'users', defaultValue: <V1User>[])
  final List<V1User> users;
  static const fromJsonFactory = _$V1GetUsersResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetUsersResponse &&
            (identical(other.users, users) ||
                const DeepCollectionEquality().equals(other.users, users)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(users) ^ runtimeType.hashCode;
}

extension $V1GetUsersResponseExtension on V1GetUsersResponse {
  V1GetUsersResponse copyWith({List<V1User>? users}) {
    return V1GetUsersResponse(users: users ?? this.users);
  }

  V1GetUsersResponse copyWithWrapped({Wrapped<List<V1User>>? users}) {
    return V1GetUsersResponse(
        users: (users != null ? users.value : this.users));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetVerifiedSubOrgIdsRequest {
  const V1GetVerifiedSubOrgIdsRequest({
    required this.organizationId,
    this.filterType,
    this.filterValue,
    this.paginationOptions,
  });

  factory V1GetVerifiedSubOrgIdsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetVerifiedSubOrgIdsRequestFromJson(json);

  static const toJsonFactory = _$V1GetVerifiedSubOrgIdsRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetVerifiedSubOrgIdsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'filterType')
  final String? filterType;
  @JsonKey(name: 'filterValue')
  final String? filterValue;
  @JsonKey(name: 'paginationOptions')
  final V1Pagination? paginationOptions;
  static const fromJsonFactory = _$V1GetVerifiedSubOrgIdsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetVerifiedSubOrgIdsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.filterType, filterType) ||
                const DeepCollectionEquality()
                    .equals(other.filterType, filterType)) &&
            (identical(other.filterValue, filterValue) ||
                const DeepCollectionEquality()
                    .equals(other.filterValue, filterValue)) &&
            (identical(other.paginationOptions, paginationOptions) ||
                const DeepCollectionEquality()
                    .equals(other.paginationOptions, paginationOptions)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(filterType) ^
      const DeepCollectionEquality().hash(filterValue) ^
      const DeepCollectionEquality().hash(paginationOptions) ^
      runtimeType.hashCode;
}

extension $V1GetVerifiedSubOrgIdsRequestExtension
    on V1GetVerifiedSubOrgIdsRequest {
  V1GetVerifiedSubOrgIdsRequest copyWith(
      {String? organizationId,
      String? filterType,
      String? filterValue,
      V1Pagination? paginationOptions}) {
    return V1GetVerifiedSubOrgIdsRequest(
        organizationId: organizationId ?? this.organizationId,
        filterType: filterType ?? this.filterType,
        filterValue: filterValue ?? this.filterValue,
        paginationOptions: paginationOptions ?? this.paginationOptions);
  }

  V1GetVerifiedSubOrgIdsRequest copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String?>? filterType,
      Wrapped<String?>? filterValue,
      Wrapped<V1Pagination?>? paginationOptions}) {
    return V1GetVerifiedSubOrgIdsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        filterType: (filterType != null ? filterType.value : this.filterType),
        filterValue:
            (filterValue != null ? filterValue.value : this.filterValue),
        paginationOptions: (paginationOptions != null
            ? paginationOptions.value
            : this.paginationOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetVerifiedSubOrgIdsResponse {
  const V1GetVerifiedSubOrgIdsResponse({
    required this.organizationIds,
  });

  factory V1GetVerifiedSubOrgIdsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetVerifiedSubOrgIdsResponseFromJson(json);

  static const toJsonFactory = _$V1GetVerifiedSubOrgIdsResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetVerifiedSubOrgIdsResponseToJson(this);

  @JsonKey(name: 'organizationIds', defaultValue: <String>[])
  final List<String> organizationIds;
  static const fromJsonFactory = _$V1GetVerifiedSubOrgIdsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetVerifiedSubOrgIdsResponse &&
            (identical(other.organizationIds, organizationIds) ||
                const DeepCollectionEquality()
                    .equals(other.organizationIds, organizationIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationIds) ^
      runtimeType.hashCode;
}

extension $V1GetVerifiedSubOrgIdsResponseExtension
    on V1GetVerifiedSubOrgIdsResponse {
  V1GetVerifiedSubOrgIdsResponse copyWith({List<String>? organizationIds}) {
    return V1GetVerifiedSubOrgIdsResponse(
        organizationIds: organizationIds ?? this.organizationIds);
  }

  V1GetVerifiedSubOrgIdsResponse copyWithWrapped(
      {Wrapped<List<String>>? organizationIds}) {
    return V1GetVerifiedSubOrgIdsResponse(
        organizationIds: (organizationIds != null
            ? organizationIds.value
            : this.organizationIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWalletAccountsRequest {
  const V1GetWalletAccountsRequest({
    required this.organizationId,
    required this.walletId,
    this.paginationOptions,
  });

  factory V1GetWalletAccountsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetWalletAccountsRequestFromJson(json);

  static const toJsonFactory = _$V1GetWalletAccountsRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetWalletAccountsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'paginationOptions')
  final V1Pagination? paginationOptions;
  static const fromJsonFactory = _$V1GetWalletAccountsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWalletAccountsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.paginationOptions, paginationOptions) ||
                const DeepCollectionEquality()
                    .equals(other.paginationOptions, paginationOptions)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(paginationOptions) ^
      runtimeType.hashCode;
}

extension $V1GetWalletAccountsRequestExtension on V1GetWalletAccountsRequest {
  V1GetWalletAccountsRequest copyWith(
      {String? organizationId,
      String? walletId,
      V1Pagination? paginationOptions}) {
    return V1GetWalletAccountsRequest(
        organizationId: organizationId ?? this.organizationId,
        walletId: walletId ?? this.walletId,
        paginationOptions: paginationOptions ?? this.paginationOptions);
  }

  V1GetWalletAccountsRequest copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String>? walletId,
      Wrapped<V1Pagination?>? paginationOptions}) {
    return V1GetWalletAccountsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        walletId: (walletId != null ? walletId.value : this.walletId),
        paginationOptions: (paginationOptions != null
            ? paginationOptions.value
            : this.paginationOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWalletAccountsResponse {
  const V1GetWalletAccountsResponse({
    required this.accounts,
  });

  factory V1GetWalletAccountsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetWalletAccountsResponseFromJson(json);

  static const toJsonFactory = _$V1GetWalletAccountsResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetWalletAccountsResponseToJson(this);

  @JsonKey(name: 'accounts', defaultValue: <V1WalletAccount>[])
  final List<V1WalletAccount> accounts;
  static const fromJsonFactory = _$V1GetWalletAccountsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWalletAccountsResponse &&
            (identical(other.accounts, accounts) ||
                const DeepCollectionEquality()
                    .equals(other.accounts, accounts)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(accounts) ^ runtimeType.hashCode;
}

extension $V1GetWalletAccountsResponseExtension on V1GetWalletAccountsResponse {
  V1GetWalletAccountsResponse copyWith({List<V1WalletAccount>? accounts}) {
    return V1GetWalletAccountsResponse(accounts: accounts ?? this.accounts);
  }

  V1GetWalletAccountsResponse copyWithWrapped(
      {Wrapped<List<V1WalletAccount>>? accounts}) {
    return V1GetWalletAccountsResponse(
        accounts: (accounts != null ? accounts.value : this.accounts));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWalletRequest {
  const V1GetWalletRequest({
    required this.organizationId,
    required this.walletId,
  });

  factory V1GetWalletRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetWalletRequestFromJson(json);

  static const toJsonFactory = _$V1GetWalletRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetWalletRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'walletId')
  final String walletId;
  static const fromJsonFactory = _$V1GetWalletRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWalletRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(walletId) ^
      runtimeType.hashCode;
}

extension $V1GetWalletRequestExtension on V1GetWalletRequest {
  V1GetWalletRequest copyWith({String? organizationId, String? walletId}) {
    return V1GetWalletRequest(
        organizationId: organizationId ?? this.organizationId,
        walletId: walletId ?? this.walletId);
  }

  V1GetWalletRequest copyWithWrapped(
      {Wrapped<String>? organizationId, Wrapped<String>? walletId}) {
    return V1GetWalletRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        walletId: (walletId != null ? walletId.value : this.walletId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWalletResponse {
  const V1GetWalletResponse({
    required this.wallet,
  });

  factory V1GetWalletResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetWalletResponseFromJson(json);

  static const toJsonFactory = _$V1GetWalletResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetWalletResponseToJson(this);

  @JsonKey(name: 'wallet')
  final V1Wallet wallet;
  static const fromJsonFactory = _$V1GetWalletResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWalletResponse &&
            (identical(other.wallet, wallet) ||
                const DeepCollectionEquality().equals(other.wallet, wallet)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(wallet) ^ runtimeType.hashCode;
}

extension $V1GetWalletResponseExtension on V1GetWalletResponse {
  V1GetWalletResponse copyWith({V1Wallet? wallet}) {
    return V1GetWalletResponse(wallet: wallet ?? this.wallet);
  }

  V1GetWalletResponse copyWithWrapped({Wrapped<V1Wallet>? wallet}) {
    return V1GetWalletResponse(
        wallet: (wallet != null ? wallet.value : this.wallet));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWalletsRequest {
  const V1GetWalletsRequest({
    required this.organizationId,
  });

  factory V1GetWalletsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetWalletsRequestFromJson(json);

  static const toJsonFactory = _$V1GetWalletsRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetWalletsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetWalletsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWalletsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetWalletsRequestExtension on V1GetWalletsRequest {
  V1GetWalletsRequest copyWith({String? organizationId}) {
    return V1GetWalletsRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetWalletsRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1GetWalletsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWalletsResponse {
  const V1GetWalletsResponse({
    required this.wallets,
  });

  factory V1GetWalletsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetWalletsResponseFromJson(json);

  static const toJsonFactory = _$V1GetWalletsResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetWalletsResponseToJson(this);

  @JsonKey(name: 'wallets', defaultValue: <V1Wallet>[])
  final List<V1Wallet> wallets;
  static const fromJsonFactory = _$V1GetWalletsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWalletsResponse &&
            (identical(other.wallets, wallets) ||
                const DeepCollectionEquality().equals(other.wallets, wallets)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(wallets) ^ runtimeType.hashCode;
}

extension $V1GetWalletsResponseExtension on V1GetWalletsResponse {
  V1GetWalletsResponse copyWith({List<V1Wallet>? wallets}) {
    return V1GetWalletsResponse(wallets: wallets ?? this.wallets);
  }

  V1GetWalletsResponse copyWithWrapped({Wrapped<List<V1Wallet>>? wallets}) {
    return V1GetWalletsResponse(
        wallets: (wallets != null ? wallets.value : this.wallets));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWhoamiRequest {
  const V1GetWhoamiRequest({
    required this.organizationId,
  });

  factory V1GetWhoamiRequest.fromJson(Map<String, dynamic> json) =>
      _$V1GetWhoamiRequestFromJson(json);

  static const toJsonFactory = _$V1GetWhoamiRequestToJson;
  Map<String, dynamic> toJson() => _$V1GetWhoamiRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1GetWhoamiRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWhoamiRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1GetWhoamiRequestExtension on V1GetWhoamiRequest {
  V1GetWhoamiRequest copyWith({String? organizationId}) {
    return V1GetWhoamiRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1GetWhoamiRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1GetWhoamiRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1GetWhoamiResponse {
  const V1GetWhoamiResponse({
    required this.organizationId,
    required this.organizationName,
    required this.userId,
    required this.username,
  });

  factory V1GetWhoamiResponse.fromJson(Map<String, dynamic> json) =>
      _$V1GetWhoamiResponseFromJson(json);

  static const toJsonFactory = _$V1GetWhoamiResponseToJson;
  Map<String, dynamic> toJson() => _$V1GetWhoamiResponseToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'organizationName')
  final String organizationName;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'username')
  final String username;
  static const fromJsonFactory = _$V1GetWhoamiResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1GetWhoamiResponse &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.organizationName, organizationName) ||
                const DeepCollectionEquality()
                    .equals(other.organizationName, organizationName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.username, username) ||
                const DeepCollectionEquality()
                    .equals(other.username, username)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(organizationName) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(username) ^
      runtimeType.hashCode;
}

extension $V1GetWhoamiResponseExtension on V1GetWhoamiResponse {
  V1GetWhoamiResponse copyWith(
      {String? organizationId,
      String? organizationName,
      String? userId,
      String? username}) {
    return V1GetWhoamiResponse(
        organizationId: organizationId ?? this.organizationId,
        organizationName: organizationName ?? this.organizationName,
        userId: userId ?? this.userId,
        username: username ?? this.username);
  }

  V1GetWhoamiResponse copyWithWrapped(
      {Wrapped<String>? organizationId,
      Wrapped<String>? organizationName,
      Wrapped<String>? userId,
      Wrapped<String>? username}) {
    return V1GetWhoamiResponse(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        organizationName: (organizationName != null
            ? organizationName.value
            : this.organizationName),
        userId: (userId != null ? userId.value : this.userId),
        username: (username != null ? username.value : this.username));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ImportPrivateKeyIntent {
  const V1ImportPrivateKeyIntent({
    required this.userId,
    required this.privateKeyName,
    required this.encryptedBundle,
    required this.curve,
    required this.addressFormats,
  });

  factory V1ImportPrivateKeyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1ImportPrivateKeyIntentFromJson(json);

  static const toJsonFactory = _$V1ImportPrivateKeyIntentToJson;
  Map<String, dynamic> toJson() => _$V1ImportPrivateKeyIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'privateKeyName')
  final String privateKeyName;
  @JsonKey(name: 'encryptedBundle')
  final String encryptedBundle;
  @JsonKey(
    name: 'curve',
    toJson: v1CurveToJson,
    fromJson: v1CurveFromJson,
  )
  final enums.V1Curve curve;
  @JsonKey(
    name: 'addressFormats',
    toJson: v1AddressFormatListToJson,
    fromJson: v1AddressFormatListFromJson,
  )
  final List<enums.V1AddressFormat> addressFormats;
  static const fromJsonFactory = _$V1ImportPrivateKeyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ImportPrivateKeyIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.privateKeyName, privateKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyName, privateKeyName)) &&
            (identical(other.encryptedBundle, encryptedBundle) ||
                const DeepCollectionEquality()
                    .equals(other.encryptedBundle, encryptedBundle)) &&
            (identical(other.curve, curve) ||
                const DeepCollectionEquality().equals(other.curve, curve)) &&
            (identical(other.addressFormats, addressFormats) ||
                const DeepCollectionEquality()
                    .equals(other.addressFormats, addressFormats)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(privateKeyName) ^
      const DeepCollectionEquality().hash(encryptedBundle) ^
      const DeepCollectionEquality().hash(curve) ^
      const DeepCollectionEquality().hash(addressFormats) ^
      runtimeType.hashCode;
}

extension $V1ImportPrivateKeyIntentExtension on V1ImportPrivateKeyIntent {
  V1ImportPrivateKeyIntent copyWith(
      {String? userId,
      String? privateKeyName,
      String? encryptedBundle,
      enums.V1Curve? curve,
      List<enums.V1AddressFormat>? addressFormats}) {
    return V1ImportPrivateKeyIntent(
        userId: userId ?? this.userId,
        privateKeyName: privateKeyName ?? this.privateKeyName,
        encryptedBundle: encryptedBundle ?? this.encryptedBundle,
        curve: curve ?? this.curve,
        addressFormats: addressFormats ?? this.addressFormats);
  }

  V1ImportPrivateKeyIntent copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<String>? privateKeyName,
      Wrapped<String>? encryptedBundle,
      Wrapped<enums.V1Curve>? curve,
      Wrapped<List<enums.V1AddressFormat>>? addressFormats}) {
    return V1ImportPrivateKeyIntent(
        userId: (userId != null ? userId.value : this.userId),
        privateKeyName: (privateKeyName != null
            ? privateKeyName.value
            : this.privateKeyName),
        encryptedBundle: (encryptedBundle != null
            ? encryptedBundle.value
            : this.encryptedBundle),
        curve: (curve != null ? curve.value : this.curve),
        addressFormats: (addressFormats != null
            ? addressFormats.value
            : this.addressFormats));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ImportPrivateKeyRequest {
  const V1ImportPrivateKeyRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1ImportPrivateKeyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ImportPrivateKeyRequestFromJson(json);

  static const toJsonFactory = _$V1ImportPrivateKeyRequestToJson;
  Map<String, dynamic> toJson() => _$V1ImportPrivateKeyRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1ImportPrivateKeyRequestTypeToJson,
    fromJson: v1ImportPrivateKeyRequestTypeFromJson,
  )
  final enums.V1ImportPrivateKeyRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1ImportPrivateKeyIntent parameters;
  static const fromJsonFactory = _$V1ImportPrivateKeyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ImportPrivateKeyRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1ImportPrivateKeyRequestExtension on V1ImportPrivateKeyRequest {
  V1ImportPrivateKeyRequest copyWith(
      {enums.V1ImportPrivateKeyRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1ImportPrivateKeyIntent? parameters}) {
    return V1ImportPrivateKeyRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1ImportPrivateKeyRequest copyWithWrapped(
      {Wrapped<enums.V1ImportPrivateKeyRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1ImportPrivateKeyIntent>? parameters}) {
    return V1ImportPrivateKeyRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ImportPrivateKeyResult {
  const V1ImportPrivateKeyResult({
    required this.privateKeyId,
    required this.addresses,
  });

  factory V1ImportPrivateKeyResult.fromJson(Map<String, dynamic> json) =>
      _$V1ImportPrivateKeyResultFromJson(json);

  static const toJsonFactory = _$V1ImportPrivateKeyResultToJson;
  Map<String, dynamic> toJson() => _$V1ImportPrivateKeyResultToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  @JsonKey(name: 'addresses', defaultValue: <Immutableactivityv1Address>[])
  final List<Immutableactivityv1Address> addresses;
  static const fromJsonFactory = _$V1ImportPrivateKeyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ImportPrivateKeyResult &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(addresses) ^
      runtimeType.hashCode;
}

extension $V1ImportPrivateKeyResultExtension on V1ImportPrivateKeyResult {
  V1ImportPrivateKeyResult copyWith(
      {String? privateKeyId, List<Immutableactivityv1Address>? addresses}) {
    return V1ImportPrivateKeyResult(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        addresses: addresses ?? this.addresses);
  }

  V1ImportPrivateKeyResult copyWithWrapped(
      {Wrapped<String>? privateKeyId,
      Wrapped<List<Immutableactivityv1Address>>? addresses}) {
    return V1ImportPrivateKeyResult(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        addresses: (addresses != null ? addresses.value : this.addresses));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ImportWalletIntent {
  const V1ImportWalletIntent({
    required this.userId,
    required this.walletName,
    required this.encryptedBundle,
    required this.accounts,
  });

  factory V1ImportWalletIntent.fromJson(Map<String, dynamic> json) =>
      _$V1ImportWalletIntentFromJson(json);

  static const toJsonFactory = _$V1ImportWalletIntentToJson;
  Map<String, dynamic> toJson() => _$V1ImportWalletIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'walletName')
  final String walletName;
  @JsonKey(name: 'encryptedBundle')
  final String encryptedBundle;
  @JsonKey(name: 'accounts', defaultValue: <V1WalletAccountParams>[])
  final List<V1WalletAccountParams> accounts;
  static const fromJsonFactory = _$V1ImportWalletIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ImportWalletIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.walletName, walletName) ||
                const DeepCollectionEquality()
                    .equals(other.walletName, walletName)) &&
            (identical(other.encryptedBundle, encryptedBundle) ||
                const DeepCollectionEquality()
                    .equals(other.encryptedBundle, encryptedBundle)) &&
            (identical(other.accounts, accounts) ||
                const DeepCollectionEquality()
                    .equals(other.accounts, accounts)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(walletName) ^
      const DeepCollectionEquality().hash(encryptedBundle) ^
      const DeepCollectionEquality().hash(accounts) ^
      runtimeType.hashCode;
}

extension $V1ImportWalletIntentExtension on V1ImportWalletIntent {
  V1ImportWalletIntent copyWith(
      {String? userId,
      String? walletName,
      String? encryptedBundle,
      List<V1WalletAccountParams>? accounts}) {
    return V1ImportWalletIntent(
        userId: userId ?? this.userId,
        walletName: walletName ?? this.walletName,
        encryptedBundle: encryptedBundle ?? this.encryptedBundle,
        accounts: accounts ?? this.accounts);
  }

  V1ImportWalletIntent copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<String>? walletName,
      Wrapped<String>? encryptedBundle,
      Wrapped<List<V1WalletAccountParams>>? accounts}) {
    return V1ImportWalletIntent(
        userId: (userId != null ? userId.value : this.userId),
        walletName: (walletName != null ? walletName.value : this.walletName),
        encryptedBundle: (encryptedBundle != null
            ? encryptedBundle.value
            : this.encryptedBundle),
        accounts: (accounts != null ? accounts.value : this.accounts));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ImportWalletRequest {
  const V1ImportWalletRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1ImportWalletRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ImportWalletRequestFromJson(json);

  static const toJsonFactory = _$V1ImportWalletRequestToJson;
  Map<String, dynamic> toJson() => _$V1ImportWalletRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1ImportWalletRequestTypeToJson,
    fromJson: v1ImportWalletRequestTypeFromJson,
  )
  final enums.V1ImportWalletRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1ImportWalletIntent parameters;
  static const fromJsonFactory = _$V1ImportWalletRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ImportWalletRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1ImportWalletRequestExtension on V1ImportWalletRequest {
  V1ImportWalletRequest copyWith(
      {enums.V1ImportWalletRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1ImportWalletIntent? parameters}) {
    return V1ImportWalletRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1ImportWalletRequest copyWithWrapped(
      {Wrapped<enums.V1ImportWalletRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1ImportWalletIntent>? parameters}) {
    return V1ImportWalletRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ImportWalletResult {
  const V1ImportWalletResult({
    required this.walletId,
    required this.addresses,
  });

  factory V1ImportWalletResult.fromJson(Map<String, dynamic> json) =>
      _$V1ImportWalletResultFromJson(json);

  static const toJsonFactory = _$V1ImportWalletResultToJson;
  Map<String, dynamic> toJson() => _$V1ImportWalletResultToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'addresses', defaultValue: <String>[])
  final List<String> addresses;
  static const fromJsonFactory = _$V1ImportWalletResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ImportWalletResult &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(addresses) ^
      runtimeType.hashCode;
}

extension $V1ImportWalletResultExtension on V1ImportWalletResult {
  V1ImportWalletResult copyWith({String? walletId, List<String>? addresses}) {
    return V1ImportWalletResult(
        walletId: walletId ?? this.walletId,
        addresses: addresses ?? this.addresses);
  }

  V1ImportWalletResult copyWithWrapped(
      {Wrapped<String>? walletId, Wrapped<List<String>>? addresses}) {
    return V1ImportWalletResult(
        walletId: (walletId != null ? walletId.value : this.walletId),
        addresses: (addresses != null ? addresses.value : this.addresses));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitImportPrivateKeyIntent {
  const V1InitImportPrivateKeyIntent({
    required this.userId,
  });

  factory V1InitImportPrivateKeyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1InitImportPrivateKeyIntentFromJson(json);

  static const toJsonFactory = _$V1InitImportPrivateKeyIntentToJson;
  Map<String, dynamic> toJson() => _$V1InitImportPrivateKeyIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1InitImportPrivateKeyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitImportPrivateKeyIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^ runtimeType.hashCode;
}

extension $V1InitImportPrivateKeyIntentExtension
    on V1InitImportPrivateKeyIntent {
  V1InitImportPrivateKeyIntent copyWith({String? userId}) {
    return V1InitImportPrivateKeyIntent(userId: userId ?? this.userId);
  }

  V1InitImportPrivateKeyIntent copyWithWrapped({Wrapped<String>? userId}) {
    return V1InitImportPrivateKeyIntent(
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitImportPrivateKeyRequest {
  const V1InitImportPrivateKeyRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1InitImportPrivateKeyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1InitImportPrivateKeyRequestFromJson(json);

  static const toJsonFactory = _$V1InitImportPrivateKeyRequestToJson;
  Map<String, dynamic> toJson() => _$V1InitImportPrivateKeyRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1InitImportPrivateKeyRequestTypeToJson,
    fromJson: v1InitImportPrivateKeyRequestTypeFromJson,
  )
  final enums.V1InitImportPrivateKeyRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1InitImportPrivateKeyIntent parameters;
  static const fromJsonFactory = _$V1InitImportPrivateKeyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitImportPrivateKeyRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1InitImportPrivateKeyRequestExtension
    on V1InitImportPrivateKeyRequest {
  V1InitImportPrivateKeyRequest copyWith(
      {enums.V1InitImportPrivateKeyRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1InitImportPrivateKeyIntent? parameters}) {
    return V1InitImportPrivateKeyRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1InitImportPrivateKeyRequest copyWithWrapped(
      {Wrapped<enums.V1InitImportPrivateKeyRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1InitImportPrivateKeyIntent>? parameters}) {
    return V1InitImportPrivateKeyRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitImportPrivateKeyResult {
  const V1InitImportPrivateKeyResult({
    required this.importBundle,
  });

  factory V1InitImportPrivateKeyResult.fromJson(Map<String, dynamic> json) =>
      _$V1InitImportPrivateKeyResultFromJson(json);

  static const toJsonFactory = _$V1InitImportPrivateKeyResultToJson;
  Map<String, dynamic> toJson() => _$V1InitImportPrivateKeyResultToJson(this);

  @JsonKey(name: 'importBundle')
  final String importBundle;
  static const fromJsonFactory = _$V1InitImportPrivateKeyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitImportPrivateKeyResult &&
            (identical(other.importBundle, importBundle) ||
                const DeepCollectionEquality()
                    .equals(other.importBundle, importBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(importBundle) ^ runtimeType.hashCode;
}

extension $V1InitImportPrivateKeyResultExtension
    on V1InitImportPrivateKeyResult {
  V1InitImportPrivateKeyResult copyWith({String? importBundle}) {
    return V1InitImportPrivateKeyResult(
        importBundle: importBundle ?? this.importBundle);
  }

  V1InitImportPrivateKeyResult copyWithWrapped(
      {Wrapped<String>? importBundle}) {
    return V1InitImportPrivateKeyResult(
        importBundle:
            (importBundle != null ? importBundle.value : this.importBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitImportWalletIntent {
  const V1InitImportWalletIntent({
    required this.userId,
  });

  factory V1InitImportWalletIntent.fromJson(Map<String, dynamic> json) =>
      _$V1InitImportWalletIntentFromJson(json);

  static const toJsonFactory = _$V1InitImportWalletIntentToJson;
  Map<String, dynamic> toJson() => _$V1InitImportWalletIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1InitImportWalletIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitImportWalletIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^ runtimeType.hashCode;
}

extension $V1InitImportWalletIntentExtension on V1InitImportWalletIntent {
  V1InitImportWalletIntent copyWith({String? userId}) {
    return V1InitImportWalletIntent(userId: userId ?? this.userId);
  }

  V1InitImportWalletIntent copyWithWrapped({Wrapped<String>? userId}) {
    return V1InitImportWalletIntent(
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitImportWalletRequest {
  const V1InitImportWalletRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1InitImportWalletRequest.fromJson(Map<String, dynamic> json) =>
      _$V1InitImportWalletRequestFromJson(json);

  static const toJsonFactory = _$V1InitImportWalletRequestToJson;
  Map<String, dynamic> toJson() => _$V1InitImportWalletRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1InitImportWalletRequestTypeToJson,
    fromJson: v1InitImportWalletRequestTypeFromJson,
  )
  final enums.V1InitImportWalletRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1InitImportWalletIntent parameters;
  static const fromJsonFactory = _$V1InitImportWalletRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitImportWalletRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1InitImportWalletRequestExtension on V1InitImportWalletRequest {
  V1InitImportWalletRequest copyWith(
      {enums.V1InitImportWalletRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1InitImportWalletIntent? parameters}) {
    return V1InitImportWalletRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1InitImportWalletRequest copyWithWrapped(
      {Wrapped<enums.V1InitImportWalletRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1InitImportWalletIntent>? parameters}) {
    return V1InitImportWalletRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitImportWalletResult {
  const V1InitImportWalletResult({
    required this.importBundle,
  });

  factory V1InitImportWalletResult.fromJson(Map<String, dynamic> json) =>
      _$V1InitImportWalletResultFromJson(json);

  static const toJsonFactory = _$V1InitImportWalletResultToJson;
  Map<String, dynamic> toJson() => _$V1InitImportWalletResultToJson(this);

  @JsonKey(name: 'importBundle')
  final String importBundle;
  static const fromJsonFactory = _$V1InitImportWalletResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitImportWalletResult &&
            (identical(other.importBundle, importBundle) ||
                const DeepCollectionEquality()
                    .equals(other.importBundle, importBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(importBundle) ^ runtimeType.hashCode;
}

extension $V1InitImportWalletResultExtension on V1InitImportWalletResult {
  V1InitImportWalletResult copyWith({String? importBundle}) {
    return V1InitImportWalletResult(
        importBundle: importBundle ?? this.importBundle);
  }

  V1InitImportWalletResult copyWithWrapped({Wrapped<String>? importBundle}) {
    return V1InitImportWalletResult(
        importBundle:
            (importBundle != null ? importBundle.value : this.importBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitOtpAuthIntent {
  const V1InitOtpAuthIntent({
    required this.otpType,
    required this.contact,
    this.emailCustomization,
    this.smsCustomization,
    this.userIdentifier,
  });

  factory V1InitOtpAuthIntent.fromJson(Map<String, dynamic> json) =>
      _$V1InitOtpAuthIntentFromJson(json);

  static const toJsonFactory = _$V1InitOtpAuthIntentToJson;
  Map<String, dynamic> toJson() => _$V1InitOtpAuthIntentToJson(this);

  @JsonKey(name: 'otpType')
  final String otpType;
  @JsonKey(name: 'contact')
  final String contact;
  @JsonKey(name: 'emailCustomization')
  final V1EmailCustomizationParams? emailCustomization;
  @JsonKey(name: 'smsCustomization')
  final V1SmsCustomizationParams? smsCustomization;
  @JsonKey(name: 'userIdentifier')
  final String? userIdentifier;
  static const fromJsonFactory = _$V1InitOtpAuthIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitOtpAuthIntent &&
            (identical(other.otpType, otpType) ||
                const DeepCollectionEquality()
                    .equals(other.otpType, otpType)) &&
            (identical(other.contact, contact) ||
                const DeepCollectionEquality()
                    .equals(other.contact, contact)) &&
            (identical(other.emailCustomization, emailCustomization) ||
                const DeepCollectionEquality()
                    .equals(other.emailCustomization, emailCustomization)) &&
            (identical(other.smsCustomization, smsCustomization) ||
                const DeepCollectionEquality()
                    .equals(other.smsCustomization, smsCustomization)) &&
            (identical(other.userIdentifier, userIdentifier) ||
                const DeepCollectionEquality()
                    .equals(other.userIdentifier, userIdentifier)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(otpType) ^
      const DeepCollectionEquality().hash(contact) ^
      const DeepCollectionEquality().hash(emailCustomization) ^
      const DeepCollectionEquality().hash(smsCustomization) ^
      const DeepCollectionEquality().hash(userIdentifier) ^
      runtimeType.hashCode;
}

extension $V1InitOtpAuthIntentExtension on V1InitOtpAuthIntent {
  V1InitOtpAuthIntent copyWith(
      {String? otpType,
      String? contact,
      V1EmailCustomizationParams? emailCustomization,
      V1SmsCustomizationParams? smsCustomization,
      String? userIdentifier}) {
    return V1InitOtpAuthIntent(
        otpType: otpType ?? this.otpType,
        contact: contact ?? this.contact,
        emailCustomization: emailCustomization ?? this.emailCustomization,
        smsCustomization: smsCustomization ?? this.smsCustomization,
        userIdentifier: userIdentifier ?? this.userIdentifier);
  }

  V1InitOtpAuthIntent copyWithWrapped(
      {Wrapped<String>? otpType,
      Wrapped<String>? contact,
      Wrapped<V1EmailCustomizationParams?>? emailCustomization,
      Wrapped<V1SmsCustomizationParams?>? smsCustomization,
      Wrapped<String?>? userIdentifier}) {
    return V1InitOtpAuthIntent(
        otpType: (otpType != null ? otpType.value : this.otpType),
        contact: (contact != null ? contact.value : this.contact),
        emailCustomization: (emailCustomization != null
            ? emailCustomization.value
            : this.emailCustomization),
        smsCustomization: (smsCustomization != null
            ? smsCustomization.value
            : this.smsCustomization),
        userIdentifier: (userIdentifier != null
            ? userIdentifier.value
            : this.userIdentifier));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitOtpAuthRequest {
  const V1InitOtpAuthRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1InitOtpAuthRequest.fromJson(Map<String, dynamic> json) =>
      _$V1InitOtpAuthRequestFromJson(json);

  static const toJsonFactory = _$V1InitOtpAuthRequestToJson;
  Map<String, dynamic> toJson() => _$V1InitOtpAuthRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1InitOtpAuthRequestTypeToJson,
    fromJson: v1InitOtpAuthRequestTypeFromJson,
  )
  final enums.V1InitOtpAuthRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1InitOtpAuthIntent parameters;
  static const fromJsonFactory = _$V1InitOtpAuthRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitOtpAuthRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1InitOtpAuthRequestExtension on V1InitOtpAuthRequest {
  V1InitOtpAuthRequest copyWith(
      {enums.V1InitOtpAuthRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1InitOtpAuthIntent? parameters}) {
    return V1InitOtpAuthRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1InitOtpAuthRequest copyWithWrapped(
      {Wrapped<enums.V1InitOtpAuthRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1InitOtpAuthIntent>? parameters}) {
    return V1InitOtpAuthRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitOtpAuthResult {
  const V1InitOtpAuthResult({
    required this.otpId,
  });

  factory V1InitOtpAuthResult.fromJson(Map<String, dynamic> json) =>
      _$V1InitOtpAuthResultFromJson(json);

  static const toJsonFactory = _$V1InitOtpAuthResultToJson;
  Map<String, dynamic> toJson() => _$V1InitOtpAuthResultToJson(this);

  @JsonKey(name: 'otpId')
  final String otpId;
  static const fromJsonFactory = _$V1InitOtpAuthResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitOtpAuthResult &&
            (identical(other.otpId, otpId) ||
                const DeepCollectionEquality().equals(other.otpId, otpId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(otpId) ^ runtimeType.hashCode;
}

extension $V1InitOtpAuthResultExtension on V1InitOtpAuthResult {
  V1InitOtpAuthResult copyWith({String? otpId}) {
    return V1InitOtpAuthResult(otpId: otpId ?? this.otpId);
  }

  V1InitOtpAuthResult copyWithWrapped({Wrapped<String>? otpId}) {
    return V1InitOtpAuthResult(
        otpId: (otpId != null ? otpId.value : this.otpId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitUserEmailRecoveryIntent {
  const V1InitUserEmailRecoveryIntent({
    required this.email,
    required this.targetPublicKey,
    this.expirationSeconds,
    this.emailCustomization,
  });

  factory V1InitUserEmailRecoveryIntent.fromJson(Map<String, dynamic> json) =>
      _$V1InitUserEmailRecoveryIntentFromJson(json);

  static const toJsonFactory = _$V1InitUserEmailRecoveryIntentToJson;
  Map<String, dynamic> toJson() => _$V1InitUserEmailRecoveryIntentToJson(this);

  @JsonKey(name: 'email')
  final String email;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  @JsonKey(name: 'emailCustomization')
  final V1EmailCustomizationParams? emailCustomization;
  static const fromJsonFactory = _$V1InitUserEmailRecoveryIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitUserEmailRecoveryIntent &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)) &&
            (identical(other.emailCustomization, emailCustomization) ||
                const DeepCollectionEquality()
                    .equals(other.emailCustomization, emailCustomization)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      const DeepCollectionEquality().hash(emailCustomization) ^
      runtimeType.hashCode;
}

extension $V1InitUserEmailRecoveryIntentExtension
    on V1InitUserEmailRecoveryIntent {
  V1InitUserEmailRecoveryIntent copyWith(
      {String? email,
      String? targetPublicKey,
      String? expirationSeconds,
      V1EmailCustomizationParams? emailCustomization}) {
    return V1InitUserEmailRecoveryIntent(
        email: email ?? this.email,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds,
        emailCustomization: emailCustomization ?? this.emailCustomization);
  }

  V1InitUserEmailRecoveryIntent copyWithWrapped(
      {Wrapped<String>? email,
      Wrapped<String>? targetPublicKey,
      Wrapped<String?>? expirationSeconds,
      Wrapped<V1EmailCustomizationParams?>? emailCustomization}) {
    return V1InitUserEmailRecoveryIntent(
        email: (email != null ? email.value : this.email),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds),
        emailCustomization: (emailCustomization != null
            ? emailCustomization.value
            : this.emailCustomization));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitUserEmailRecoveryRequest {
  const V1InitUserEmailRecoveryRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1InitUserEmailRecoveryRequest.fromJson(Map<String, dynamic> json) =>
      _$V1InitUserEmailRecoveryRequestFromJson(json);

  static const toJsonFactory = _$V1InitUserEmailRecoveryRequestToJson;
  Map<String, dynamic> toJson() => _$V1InitUserEmailRecoveryRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1InitUserEmailRecoveryRequestTypeToJson,
    fromJson: v1InitUserEmailRecoveryRequestTypeFromJson,
  )
  final enums.V1InitUserEmailRecoveryRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1InitUserEmailRecoveryIntent parameters;
  static const fromJsonFactory = _$V1InitUserEmailRecoveryRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitUserEmailRecoveryRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1InitUserEmailRecoveryRequestExtension
    on V1InitUserEmailRecoveryRequest {
  V1InitUserEmailRecoveryRequest copyWith(
      {enums.V1InitUserEmailRecoveryRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1InitUserEmailRecoveryIntent? parameters}) {
    return V1InitUserEmailRecoveryRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1InitUserEmailRecoveryRequest copyWithWrapped(
      {Wrapped<enums.V1InitUserEmailRecoveryRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1InitUserEmailRecoveryIntent>? parameters}) {
    return V1InitUserEmailRecoveryRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InitUserEmailRecoveryResult {
  const V1InitUserEmailRecoveryResult({
    required this.userId,
  });

  factory V1InitUserEmailRecoveryResult.fromJson(Map<String, dynamic> json) =>
      _$V1InitUserEmailRecoveryResultFromJson(json);

  static const toJsonFactory = _$V1InitUserEmailRecoveryResultToJson;
  Map<String, dynamic> toJson() => _$V1InitUserEmailRecoveryResultToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1InitUserEmailRecoveryResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InitUserEmailRecoveryResult &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^ runtimeType.hashCode;
}

extension $V1InitUserEmailRecoveryResultExtension
    on V1InitUserEmailRecoveryResult {
  V1InitUserEmailRecoveryResult copyWith({String? userId}) {
    return V1InitUserEmailRecoveryResult(userId: userId ?? this.userId);
  }

  V1InitUserEmailRecoveryResult copyWithWrapped({Wrapped<String>? userId}) {
    return V1InitUserEmailRecoveryResult(
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Intent {
  const V1Intent({
    this.createOrganizationIntent,
    this.createAuthenticatorsIntent,
    this.createUsersIntent,
    this.createPrivateKeysIntent,
    this.signRawPayloadIntent,
    this.createInvitationsIntent,
    this.acceptInvitationIntent,
    this.createPolicyIntent,
    this.disablePrivateKeyIntent,
    this.deleteUsersIntent,
    this.deleteAuthenticatorsIntent,
    this.deleteInvitationIntent,
    this.deleteOrganizationIntent,
    this.deletePolicyIntent,
    this.createUserTagIntent,
    this.deleteUserTagsIntent,
    this.signTransactionIntent,
    this.createApiKeysIntent,
    this.deleteApiKeysIntent,
    this.approveActivityIntent,
    this.rejectActivityIntent,
    this.createPrivateKeyTagIntent,
    this.deletePrivateKeyTagsIntent,
    this.createPolicyIntentV2,
    this.setPaymentMethodIntent,
    this.activateBillingTierIntent,
    this.deletePaymentMethodIntent,
    this.createPolicyIntentV3,
    this.createApiOnlyUsersIntent,
    this.updateRootQuorumIntent,
    this.updateUserTagIntent,
    this.updatePrivateKeyTagIntent,
    this.createAuthenticatorsIntentV2,
    this.acceptInvitationIntentV2,
    this.createOrganizationIntentV2,
    this.createUsersIntentV2,
    this.createSubOrganizationIntent,
    this.createSubOrganizationIntentV2,
    this.updateAllowedOriginsIntent,
    this.createPrivateKeysIntentV2,
    this.updateUserIntent,
    this.updatePolicyIntent,
    this.setPaymentMethodIntentV2,
    this.createSubOrganizationIntentV3,
    this.createWalletIntent,
    this.createWalletAccountsIntent,
    this.initUserEmailRecoveryIntent,
    this.recoverUserIntent,
    this.setOrganizationFeatureIntent,
    this.removeOrganizationFeatureIntent,
    this.signRawPayloadIntentV2,
    this.signTransactionIntentV2,
    this.exportPrivateKeyIntent,
    this.exportWalletIntent,
    this.createSubOrganizationIntentV4,
    this.emailAuthIntent,
    this.exportWalletAccountIntent,
    this.initImportWalletIntent,
    this.importWalletIntent,
    this.initImportPrivateKeyIntent,
    this.importPrivateKeyIntent,
    this.createPoliciesIntent,
    this.signRawPayloadsIntent,
    this.createReadOnlySessionIntent,
    this.createOauthProvidersIntent,
    this.deleteOauthProvidersIntent,
    this.createSubOrganizationIntentV5,
    this.oauthIntent,
    this.createApiKeysIntentV2,
    this.createReadWriteSessionIntent,
    this.emailAuthIntentV2,
    this.createSubOrganizationIntentV6,
    this.deletePrivateKeysIntent,
    this.deleteWalletsIntent,
    this.createReadWriteSessionIntentV2,
    this.deleteSubOrganizationIntent,
    this.initOtpAuthIntent,
    this.otpAuthIntent,
    this.createSubOrganizationIntentV7,
  });

  factory V1Intent.fromJson(Map<String, dynamic> json) =>
      _$V1IntentFromJson(json);

  static const toJsonFactory = _$V1IntentToJson;
  Map<String, dynamic> toJson() => _$V1IntentToJson(this);

  @JsonKey(name: 'createOrganizationIntent')
  final V1CreateOrganizationIntent? createOrganizationIntent;
  @JsonKey(name: 'createAuthenticatorsIntent')
  final V1CreateAuthenticatorsIntent? createAuthenticatorsIntent;
  @JsonKey(name: 'createUsersIntent')
  final V1CreateUsersIntent? createUsersIntent;
  @JsonKey(name: 'createPrivateKeysIntent')
  final V1CreatePrivateKeysIntent? createPrivateKeysIntent;
  @JsonKey(name: 'signRawPayloadIntent')
  final V1SignRawPayloadIntent? signRawPayloadIntent;
  @JsonKey(name: 'createInvitationsIntent')
  final V1CreateInvitationsIntent? createInvitationsIntent;
  @JsonKey(name: 'acceptInvitationIntent')
  final V1AcceptInvitationIntent? acceptInvitationIntent;
  @JsonKey(name: 'createPolicyIntent')
  final V1CreatePolicyIntent? createPolicyIntent;
  @JsonKey(name: 'disablePrivateKeyIntent')
  final V1DisablePrivateKeyIntent? disablePrivateKeyIntent;
  @JsonKey(name: 'deleteUsersIntent')
  final V1DeleteUsersIntent? deleteUsersIntent;
  @JsonKey(name: 'deleteAuthenticatorsIntent')
  final V1DeleteAuthenticatorsIntent? deleteAuthenticatorsIntent;
  @JsonKey(name: 'deleteInvitationIntent')
  final V1DeleteInvitationIntent? deleteInvitationIntent;
  @JsonKey(name: 'deleteOrganizationIntent')
  final V1DeleteOrganizationIntent? deleteOrganizationIntent;
  @JsonKey(name: 'deletePolicyIntent')
  final V1DeletePolicyIntent? deletePolicyIntent;
  @JsonKey(name: 'createUserTagIntent')
  final V1CreateUserTagIntent? createUserTagIntent;
  @JsonKey(name: 'deleteUserTagsIntent')
  final V1DeleteUserTagsIntent? deleteUserTagsIntent;
  @JsonKey(name: 'signTransactionIntent')
  final V1SignTransactionIntent? signTransactionIntent;
  @JsonKey(name: 'createApiKeysIntent')
  final V1CreateApiKeysIntent? createApiKeysIntent;
  @JsonKey(name: 'deleteApiKeysIntent')
  final V1DeleteApiKeysIntent? deleteApiKeysIntent;
  @JsonKey(name: 'approveActivityIntent')
  final V1ApproveActivityIntent? approveActivityIntent;
  @JsonKey(name: 'rejectActivityIntent')
  final V1RejectActivityIntent? rejectActivityIntent;
  @JsonKey(name: 'createPrivateKeyTagIntent')
  final V1CreatePrivateKeyTagIntent? createPrivateKeyTagIntent;
  @JsonKey(name: 'deletePrivateKeyTagsIntent')
  final V1DeletePrivateKeyTagsIntent? deletePrivateKeyTagsIntent;
  @JsonKey(name: 'createPolicyIntentV2')
  final V1CreatePolicyIntentV2? createPolicyIntentV2;
  @JsonKey(name: 'setPaymentMethodIntent')
  final BillingSetPaymentMethodIntent? setPaymentMethodIntent;
  @JsonKey(name: 'activateBillingTierIntent')
  final BillingActivateBillingTierIntent? activateBillingTierIntent;
  @JsonKey(name: 'deletePaymentMethodIntent')
  final BillingDeletePaymentMethodIntent? deletePaymentMethodIntent;
  @JsonKey(name: 'createPolicyIntentV3')
  final V1CreatePolicyIntentV3? createPolicyIntentV3;
  @JsonKey(name: 'createApiOnlyUsersIntent')
  final V1CreateApiOnlyUsersIntent? createApiOnlyUsersIntent;
  @JsonKey(name: 'updateRootQuorumIntent')
  final V1UpdateRootQuorumIntent? updateRootQuorumIntent;
  @JsonKey(name: 'updateUserTagIntent')
  final V1UpdateUserTagIntent? updateUserTagIntent;
  @JsonKey(name: 'updatePrivateKeyTagIntent')
  final V1UpdatePrivateKeyTagIntent? updatePrivateKeyTagIntent;
  @JsonKey(name: 'createAuthenticatorsIntentV2')
  final V1CreateAuthenticatorsIntentV2? createAuthenticatorsIntentV2;
  @JsonKey(name: 'acceptInvitationIntentV2')
  final V1AcceptInvitationIntentV2? acceptInvitationIntentV2;
  @JsonKey(name: 'createOrganizationIntentV2')
  final V1CreateOrganizationIntentV2? createOrganizationIntentV2;
  @JsonKey(name: 'createUsersIntentV2')
  final V1CreateUsersIntentV2? createUsersIntentV2;
  @JsonKey(name: 'createSubOrganizationIntent')
  final V1CreateSubOrganizationIntent? createSubOrganizationIntent;
  @JsonKey(name: 'createSubOrganizationIntentV2')
  final V1CreateSubOrganizationIntentV2? createSubOrganizationIntentV2;
  @JsonKey(name: 'updateAllowedOriginsIntent')
  final V1UpdateAllowedOriginsIntent? updateAllowedOriginsIntent;
  @JsonKey(name: 'createPrivateKeysIntentV2')
  final V1CreatePrivateKeysIntentV2? createPrivateKeysIntentV2;
  @JsonKey(name: 'updateUserIntent')
  final V1UpdateUserIntent? updateUserIntent;
  @JsonKey(name: 'updatePolicyIntent')
  final V1UpdatePolicyIntent? updatePolicyIntent;
  @JsonKey(name: 'setPaymentMethodIntentV2')
  final BillingSetPaymentMethodIntentV2? setPaymentMethodIntentV2;
  @JsonKey(name: 'createSubOrganizationIntentV3')
  final V1CreateSubOrganizationIntentV3? createSubOrganizationIntentV3;
  @JsonKey(name: 'createWalletIntent')
  final V1CreateWalletIntent? createWalletIntent;
  @JsonKey(name: 'createWalletAccountsIntent')
  final V1CreateWalletAccountsIntent? createWalletAccountsIntent;
  @JsonKey(name: 'initUserEmailRecoveryIntent')
  final V1InitUserEmailRecoveryIntent? initUserEmailRecoveryIntent;
  @JsonKey(name: 'recoverUserIntent')
  final V1RecoverUserIntent? recoverUserIntent;
  @JsonKey(name: 'setOrganizationFeatureIntent')
  final V1SetOrganizationFeatureIntent? setOrganizationFeatureIntent;
  @JsonKey(name: 'removeOrganizationFeatureIntent')
  final V1RemoveOrganizationFeatureIntent? removeOrganizationFeatureIntent;
  @JsonKey(name: 'signRawPayloadIntentV2')
  final V1SignRawPayloadIntentV2? signRawPayloadIntentV2;
  @JsonKey(name: 'signTransactionIntentV2')
  final V1SignTransactionIntentV2? signTransactionIntentV2;
  @JsonKey(name: 'exportPrivateKeyIntent')
  final V1ExportPrivateKeyIntent? exportPrivateKeyIntent;
  @JsonKey(name: 'exportWalletIntent')
  final V1ExportWalletIntent? exportWalletIntent;
  @JsonKey(name: 'createSubOrganizationIntentV4')
  final V1CreateSubOrganizationIntentV4? createSubOrganizationIntentV4;
  @JsonKey(name: 'emailAuthIntent')
  final V1EmailAuthIntent? emailAuthIntent;
  @JsonKey(name: 'exportWalletAccountIntent')
  final V1ExportWalletAccountIntent? exportWalletAccountIntent;
  @JsonKey(name: 'initImportWalletIntent')
  final V1InitImportWalletIntent? initImportWalletIntent;
  @JsonKey(name: 'importWalletIntent')
  final V1ImportWalletIntent? importWalletIntent;
  @JsonKey(name: 'initImportPrivateKeyIntent')
  final V1InitImportPrivateKeyIntent? initImportPrivateKeyIntent;
  @JsonKey(name: 'importPrivateKeyIntent')
  final V1ImportPrivateKeyIntent? importPrivateKeyIntent;
  @JsonKey(name: 'createPoliciesIntent')
  final V1CreatePoliciesIntent? createPoliciesIntent;
  @JsonKey(name: 'signRawPayloadsIntent')
  final V1SignRawPayloadsIntent? signRawPayloadsIntent;
  @JsonKey(name: 'createReadOnlySessionIntent')
  final V1CreateReadOnlySessionIntent? createReadOnlySessionIntent;
  @JsonKey(name: 'createOauthProvidersIntent')
  final V1CreateOauthProvidersIntent? createOauthProvidersIntent;
  @JsonKey(name: 'deleteOauthProvidersIntent')
  final V1DeleteOauthProvidersIntent? deleteOauthProvidersIntent;
  @JsonKey(name: 'createSubOrganizationIntentV5')
  final V1CreateSubOrganizationIntentV5? createSubOrganizationIntentV5;
  @JsonKey(name: 'oauthIntent')
  final V1OauthIntent? oauthIntent;
  @JsonKey(name: 'createApiKeysIntentV2')
  final V1CreateApiKeysIntentV2? createApiKeysIntentV2;
  @JsonKey(name: 'createReadWriteSessionIntent')
  final V1CreateReadWriteSessionIntent? createReadWriteSessionIntent;
  @JsonKey(name: 'emailAuthIntentV2')
  final V1EmailAuthIntentV2? emailAuthIntentV2;
  @JsonKey(name: 'createSubOrganizationIntentV6')
  final V1CreateSubOrganizationIntentV6? createSubOrganizationIntentV6;
  @JsonKey(name: 'deletePrivateKeysIntent')
  final V1DeletePrivateKeysIntent? deletePrivateKeysIntent;
  @JsonKey(name: 'deleteWalletsIntent')
  final V1DeleteWalletsIntent? deleteWalletsIntent;
  @JsonKey(name: 'createReadWriteSessionIntentV2')
  final V1CreateReadWriteSessionIntentV2? createReadWriteSessionIntentV2;
  @JsonKey(name: 'deleteSubOrganizationIntent')
  final V1DeleteSubOrganizationIntent? deleteSubOrganizationIntent;
  @JsonKey(name: 'initOtpAuthIntent')
  final V1InitOtpAuthIntent? initOtpAuthIntent;
  @JsonKey(name: 'otpAuthIntent')
  final V1OtpAuthIntent? otpAuthIntent;
  @JsonKey(name: 'createSubOrganizationIntentV7')
  final V1CreateSubOrganizationIntentV7? createSubOrganizationIntentV7;
  static const fromJsonFactory = _$V1IntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Intent &&
            (identical(other.createOrganizationIntent, createOrganizationIntent) ||
                const DeepCollectionEquality().equals(
                    other.createOrganizationIntent,
                    createOrganizationIntent)) &&
            (identical(other.createAuthenticatorsIntent, createAuthenticatorsIntent) ||
                const DeepCollectionEquality().equals(
                    other.createAuthenticatorsIntent,
                    createAuthenticatorsIntent)) &&
            (identical(other.createUsersIntent, createUsersIntent) ||
                const DeepCollectionEquality()
                    .equals(other.createUsersIntent, createUsersIntent)) &&
            (identical(other.createPrivateKeysIntent, createPrivateKeysIntent) ||
                const DeepCollectionEquality().equals(
                    other.createPrivateKeysIntent, createPrivateKeysIntent)) &&
            (identical(other.signRawPayloadIntent, signRawPayloadIntent) ||
                const DeepCollectionEquality().equals(
                    other.signRawPayloadIntent, signRawPayloadIntent)) &&
            (identical(other.createInvitationsIntent, createInvitationsIntent) ||
                const DeepCollectionEquality().equals(
                    other.createInvitationsIntent, createInvitationsIntent)) &&
            (identical(other.acceptInvitationIntent, acceptInvitationIntent) ||
                const DeepCollectionEquality().equals(
                    other.acceptInvitationIntent, acceptInvitationIntent)) &&
            (identical(other.createPolicyIntent, createPolicyIntent) ||
                const DeepCollectionEquality()
                    .equals(other.createPolicyIntent, createPolicyIntent)) &&
            (identical(other.disablePrivateKeyIntent, disablePrivateKeyIntent) ||
                const DeepCollectionEquality().equals(
                    other.disablePrivateKeyIntent, disablePrivateKeyIntent)) &&
            (identical(other.deleteUsersIntent, deleteUsersIntent) ||
                const DeepCollectionEquality()
                    .equals(other.deleteUsersIntent, deleteUsersIntent)) &&
            (identical(other.deleteAuthenticatorsIntent, deleteAuthenticatorsIntent) || const DeepCollectionEquality().equals(other.deleteAuthenticatorsIntent, deleteAuthenticatorsIntent)) &&
            (identical(other.deleteInvitationIntent, deleteInvitationIntent) || const DeepCollectionEquality().equals(other.deleteInvitationIntent, deleteInvitationIntent)) &&
            (identical(other.deleteOrganizationIntent, deleteOrganizationIntent) || const DeepCollectionEquality().equals(other.deleteOrganizationIntent, deleteOrganizationIntent)) &&
            (identical(other.deletePolicyIntent, deletePolicyIntent) || const DeepCollectionEquality().equals(other.deletePolicyIntent, deletePolicyIntent)) &&
            (identical(other.createUserTagIntent, createUserTagIntent) || const DeepCollectionEquality().equals(other.createUserTagIntent, createUserTagIntent)) &&
            (identical(other.deleteUserTagsIntent, deleteUserTagsIntent) || const DeepCollectionEquality().equals(other.deleteUserTagsIntent, deleteUserTagsIntent)) &&
            (identical(other.signTransactionIntent, signTransactionIntent) || const DeepCollectionEquality().equals(other.signTransactionIntent, signTransactionIntent)) &&
            (identical(other.createApiKeysIntent, createApiKeysIntent) || const DeepCollectionEquality().equals(other.createApiKeysIntent, createApiKeysIntent)) &&
            (identical(other.deleteApiKeysIntent, deleteApiKeysIntent) || const DeepCollectionEquality().equals(other.deleteApiKeysIntent, deleteApiKeysIntent)) &&
            (identical(other.approveActivityIntent, approveActivityIntent) || const DeepCollectionEquality().equals(other.approveActivityIntent, approveActivityIntent)) &&
            (identical(other.rejectActivityIntent, rejectActivityIntent) || const DeepCollectionEquality().equals(other.rejectActivityIntent, rejectActivityIntent)) &&
            (identical(other.createPrivateKeyTagIntent, createPrivateKeyTagIntent) || const DeepCollectionEquality().equals(other.createPrivateKeyTagIntent, createPrivateKeyTagIntent)) &&
            (identical(other.deletePrivateKeyTagsIntent, deletePrivateKeyTagsIntent) || const DeepCollectionEquality().equals(other.deletePrivateKeyTagsIntent, deletePrivateKeyTagsIntent)) &&
            (identical(other.createPolicyIntentV2, createPolicyIntentV2) || const DeepCollectionEquality().equals(other.createPolicyIntentV2, createPolicyIntentV2)) &&
            (identical(other.setPaymentMethodIntent, setPaymentMethodIntent) || const DeepCollectionEquality().equals(other.setPaymentMethodIntent, setPaymentMethodIntent)) &&
            (identical(other.activateBillingTierIntent, activateBillingTierIntent) || const DeepCollectionEquality().equals(other.activateBillingTierIntent, activateBillingTierIntent)) &&
            (identical(other.deletePaymentMethodIntent, deletePaymentMethodIntent) || const DeepCollectionEquality().equals(other.deletePaymentMethodIntent, deletePaymentMethodIntent)) &&
            (identical(other.createPolicyIntentV3, createPolicyIntentV3) || const DeepCollectionEquality().equals(other.createPolicyIntentV3, createPolicyIntentV3)) &&
            (identical(other.createApiOnlyUsersIntent, createApiOnlyUsersIntent) || const DeepCollectionEquality().equals(other.createApiOnlyUsersIntent, createApiOnlyUsersIntent)) &&
            (identical(other.updateRootQuorumIntent, updateRootQuorumIntent) || const DeepCollectionEquality().equals(other.updateRootQuorumIntent, updateRootQuorumIntent)) &&
            (identical(other.updateUserTagIntent, updateUserTagIntent) || const DeepCollectionEquality().equals(other.updateUserTagIntent, updateUserTagIntent)) &&
            (identical(other.updatePrivateKeyTagIntent, updatePrivateKeyTagIntent) || const DeepCollectionEquality().equals(other.updatePrivateKeyTagIntent, updatePrivateKeyTagIntent)) &&
            (identical(other.createAuthenticatorsIntentV2, createAuthenticatorsIntentV2) || const DeepCollectionEquality().equals(other.createAuthenticatorsIntentV2, createAuthenticatorsIntentV2)) &&
            (identical(other.acceptInvitationIntentV2, acceptInvitationIntentV2) || const DeepCollectionEquality().equals(other.acceptInvitationIntentV2, acceptInvitationIntentV2)) &&
            (identical(other.createOrganizationIntentV2, createOrganizationIntentV2) || const DeepCollectionEquality().equals(other.createOrganizationIntentV2, createOrganizationIntentV2)) &&
            (identical(other.createUsersIntentV2, createUsersIntentV2) || const DeepCollectionEquality().equals(other.createUsersIntentV2, createUsersIntentV2)) &&
            (identical(other.createSubOrganizationIntent, createSubOrganizationIntent) || const DeepCollectionEquality().equals(other.createSubOrganizationIntent, createSubOrganizationIntent)) &&
            (identical(other.createSubOrganizationIntentV2, createSubOrganizationIntentV2) || const DeepCollectionEquality().equals(other.createSubOrganizationIntentV2, createSubOrganizationIntentV2)) &&
            (identical(other.updateAllowedOriginsIntent, updateAllowedOriginsIntent) || const DeepCollectionEquality().equals(other.updateAllowedOriginsIntent, updateAllowedOriginsIntent)) &&
            (identical(other.createPrivateKeysIntentV2, createPrivateKeysIntentV2) || const DeepCollectionEquality().equals(other.createPrivateKeysIntentV2, createPrivateKeysIntentV2)) &&
            (identical(other.updateUserIntent, updateUserIntent) || const DeepCollectionEquality().equals(other.updateUserIntent, updateUserIntent)) &&
            (identical(other.updatePolicyIntent, updatePolicyIntent) || const DeepCollectionEquality().equals(other.updatePolicyIntent, updatePolicyIntent)) &&
            (identical(other.setPaymentMethodIntentV2, setPaymentMethodIntentV2) || const DeepCollectionEquality().equals(other.setPaymentMethodIntentV2, setPaymentMethodIntentV2)) &&
            (identical(other.createSubOrganizationIntentV3, createSubOrganizationIntentV3) || const DeepCollectionEquality().equals(other.createSubOrganizationIntentV3, createSubOrganizationIntentV3)) &&
            (identical(other.createWalletIntent, createWalletIntent) || const DeepCollectionEquality().equals(other.createWalletIntent, createWalletIntent)) &&
            (identical(other.createWalletAccountsIntent, createWalletAccountsIntent) || const DeepCollectionEquality().equals(other.createWalletAccountsIntent, createWalletAccountsIntent)) &&
            (identical(other.initUserEmailRecoveryIntent, initUserEmailRecoveryIntent) || const DeepCollectionEquality().equals(other.initUserEmailRecoveryIntent, initUserEmailRecoveryIntent)) &&
            (identical(other.recoverUserIntent, recoverUserIntent) || const DeepCollectionEquality().equals(other.recoverUserIntent, recoverUserIntent)) &&
            (identical(other.setOrganizationFeatureIntent, setOrganizationFeatureIntent) || const DeepCollectionEquality().equals(other.setOrganizationFeatureIntent, setOrganizationFeatureIntent)) &&
            (identical(other.removeOrganizationFeatureIntent, removeOrganizationFeatureIntent) || const DeepCollectionEquality().equals(other.removeOrganizationFeatureIntent, removeOrganizationFeatureIntent)) &&
            (identical(other.signRawPayloadIntentV2, signRawPayloadIntentV2) || const DeepCollectionEquality().equals(other.signRawPayloadIntentV2, signRawPayloadIntentV2)) &&
            (identical(other.signTransactionIntentV2, signTransactionIntentV2) || const DeepCollectionEquality().equals(other.signTransactionIntentV2, signTransactionIntentV2)) &&
            (identical(other.exportPrivateKeyIntent, exportPrivateKeyIntent) || const DeepCollectionEquality().equals(other.exportPrivateKeyIntent, exportPrivateKeyIntent)) &&
            (identical(other.exportWalletIntent, exportWalletIntent) || const DeepCollectionEquality().equals(other.exportWalletIntent, exportWalletIntent)) &&
            (identical(other.createSubOrganizationIntentV4, createSubOrganizationIntentV4) || const DeepCollectionEquality().equals(other.createSubOrganizationIntentV4, createSubOrganizationIntentV4)) &&
            (identical(other.emailAuthIntent, emailAuthIntent) || const DeepCollectionEquality().equals(other.emailAuthIntent, emailAuthIntent)) &&
            (identical(other.exportWalletAccountIntent, exportWalletAccountIntent) || const DeepCollectionEquality().equals(other.exportWalletAccountIntent, exportWalletAccountIntent)) &&
            (identical(other.initImportWalletIntent, initImportWalletIntent) || const DeepCollectionEquality().equals(other.initImportWalletIntent, initImportWalletIntent)) &&
            (identical(other.importWalletIntent, importWalletIntent) || const DeepCollectionEquality().equals(other.importWalletIntent, importWalletIntent)) &&
            (identical(other.initImportPrivateKeyIntent, initImportPrivateKeyIntent) || const DeepCollectionEquality().equals(other.initImportPrivateKeyIntent, initImportPrivateKeyIntent)) &&
            (identical(other.importPrivateKeyIntent, importPrivateKeyIntent) || const DeepCollectionEquality().equals(other.importPrivateKeyIntent, importPrivateKeyIntent)) &&
            (identical(other.createPoliciesIntent, createPoliciesIntent) || const DeepCollectionEquality().equals(other.createPoliciesIntent, createPoliciesIntent)) &&
            (identical(other.signRawPayloadsIntent, signRawPayloadsIntent) || const DeepCollectionEquality().equals(other.signRawPayloadsIntent, signRawPayloadsIntent)) &&
            (identical(other.createReadOnlySessionIntent, createReadOnlySessionIntent) || const DeepCollectionEquality().equals(other.createReadOnlySessionIntent, createReadOnlySessionIntent)) &&
            (identical(other.createOauthProvidersIntent, createOauthProvidersIntent) || const DeepCollectionEquality().equals(other.createOauthProvidersIntent, createOauthProvidersIntent)) &&
            (identical(other.deleteOauthProvidersIntent, deleteOauthProvidersIntent) || const DeepCollectionEquality().equals(other.deleteOauthProvidersIntent, deleteOauthProvidersIntent)) &&
            (identical(other.createSubOrganizationIntentV5, createSubOrganizationIntentV5) || const DeepCollectionEquality().equals(other.createSubOrganizationIntentV5, createSubOrganizationIntentV5)) &&
            (identical(other.oauthIntent, oauthIntent) || const DeepCollectionEquality().equals(other.oauthIntent, oauthIntent)) &&
            (identical(other.createApiKeysIntentV2, createApiKeysIntentV2) || const DeepCollectionEquality().equals(other.createApiKeysIntentV2, createApiKeysIntentV2)) &&
            (identical(other.createReadWriteSessionIntent, createReadWriteSessionIntent) || const DeepCollectionEquality().equals(other.createReadWriteSessionIntent, createReadWriteSessionIntent)) &&
            (identical(other.emailAuthIntentV2, emailAuthIntentV2) || const DeepCollectionEquality().equals(other.emailAuthIntentV2, emailAuthIntentV2)) &&
            (identical(other.createSubOrganizationIntentV6, createSubOrganizationIntentV6) || const DeepCollectionEquality().equals(other.createSubOrganizationIntentV6, createSubOrganizationIntentV6)) &&
            (identical(other.deletePrivateKeysIntent, deletePrivateKeysIntent) || const DeepCollectionEquality().equals(other.deletePrivateKeysIntent, deletePrivateKeysIntent)) &&
            (identical(other.deleteWalletsIntent, deleteWalletsIntent) || const DeepCollectionEquality().equals(other.deleteWalletsIntent, deleteWalletsIntent)) &&
            (identical(other.createReadWriteSessionIntentV2, createReadWriteSessionIntentV2) || const DeepCollectionEquality().equals(other.createReadWriteSessionIntentV2, createReadWriteSessionIntentV2)) &&
            (identical(other.deleteSubOrganizationIntent, deleteSubOrganizationIntent) || const DeepCollectionEquality().equals(other.deleteSubOrganizationIntent, deleteSubOrganizationIntent)) &&
            (identical(other.initOtpAuthIntent, initOtpAuthIntent) || const DeepCollectionEquality().equals(other.initOtpAuthIntent, initOtpAuthIntent)) &&
            (identical(other.otpAuthIntent, otpAuthIntent) || const DeepCollectionEquality().equals(other.otpAuthIntent, otpAuthIntent)) &&
            (identical(other.createSubOrganizationIntentV7, createSubOrganizationIntentV7) || const DeepCollectionEquality().equals(other.createSubOrganizationIntentV7, createSubOrganizationIntentV7)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(createOrganizationIntent) ^
      const DeepCollectionEquality().hash(createAuthenticatorsIntent) ^
      const DeepCollectionEquality().hash(createUsersIntent) ^
      const DeepCollectionEquality().hash(createPrivateKeysIntent) ^
      const DeepCollectionEquality().hash(signRawPayloadIntent) ^
      const DeepCollectionEquality().hash(createInvitationsIntent) ^
      const DeepCollectionEquality().hash(acceptInvitationIntent) ^
      const DeepCollectionEquality().hash(createPolicyIntent) ^
      const DeepCollectionEquality().hash(disablePrivateKeyIntent) ^
      const DeepCollectionEquality().hash(deleteUsersIntent) ^
      const DeepCollectionEquality().hash(deleteAuthenticatorsIntent) ^
      const DeepCollectionEquality().hash(deleteInvitationIntent) ^
      const DeepCollectionEquality().hash(deleteOrganizationIntent) ^
      const DeepCollectionEquality().hash(deletePolicyIntent) ^
      const DeepCollectionEquality().hash(createUserTagIntent) ^
      const DeepCollectionEquality().hash(deleteUserTagsIntent) ^
      const DeepCollectionEquality().hash(signTransactionIntent) ^
      const DeepCollectionEquality().hash(createApiKeysIntent) ^
      const DeepCollectionEquality().hash(deleteApiKeysIntent) ^
      const DeepCollectionEquality().hash(approveActivityIntent) ^
      const DeepCollectionEquality().hash(rejectActivityIntent) ^
      const DeepCollectionEquality().hash(createPrivateKeyTagIntent) ^
      const DeepCollectionEquality().hash(deletePrivateKeyTagsIntent) ^
      const DeepCollectionEquality().hash(createPolicyIntentV2) ^
      const DeepCollectionEquality().hash(setPaymentMethodIntent) ^
      const DeepCollectionEquality().hash(activateBillingTierIntent) ^
      const DeepCollectionEquality().hash(deletePaymentMethodIntent) ^
      const DeepCollectionEquality().hash(createPolicyIntentV3) ^
      const DeepCollectionEquality().hash(createApiOnlyUsersIntent) ^
      const DeepCollectionEquality().hash(updateRootQuorumIntent) ^
      const DeepCollectionEquality().hash(updateUserTagIntent) ^
      const DeepCollectionEquality().hash(updatePrivateKeyTagIntent) ^
      const DeepCollectionEquality().hash(createAuthenticatorsIntentV2) ^
      const DeepCollectionEquality().hash(acceptInvitationIntentV2) ^
      const DeepCollectionEquality().hash(createOrganizationIntentV2) ^
      const DeepCollectionEquality().hash(createUsersIntentV2) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntent) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntentV2) ^
      const DeepCollectionEquality().hash(updateAllowedOriginsIntent) ^
      const DeepCollectionEquality().hash(createPrivateKeysIntentV2) ^
      const DeepCollectionEquality().hash(updateUserIntent) ^
      const DeepCollectionEquality().hash(updatePolicyIntent) ^
      const DeepCollectionEquality().hash(setPaymentMethodIntentV2) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntentV3) ^
      const DeepCollectionEquality().hash(createWalletIntent) ^
      const DeepCollectionEquality().hash(createWalletAccountsIntent) ^
      const DeepCollectionEquality().hash(initUserEmailRecoveryIntent) ^
      const DeepCollectionEquality().hash(recoverUserIntent) ^
      const DeepCollectionEquality().hash(setOrganizationFeatureIntent) ^
      const DeepCollectionEquality().hash(removeOrganizationFeatureIntent) ^
      const DeepCollectionEquality().hash(signRawPayloadIntentV2) ^
      const DeepCollectionEquality().hash(signTransactionIntentV2) ^
      const DeepCollectionEquality().hash(exportPrivateKeyIntent) ^
      const DeepCollectionEquality().hash(exportWalletIntent) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntentV4) ^
      const DeepCollectionEquality().hash(emailAuthIntent) ^
      const DeepCollectionEquality().hash(exportWalletAccountIntent) ^
      const DeepCollectionEquality().hash(initImportWalletIntent) ^
      const DeepCollectionEquality().hash(importWalletIntent) ^
      const DeepCollectionEquality().hash(initImportPrivateKeyIntent) ^
      const DeepCollectionEquality().hash(importPrivateKeyIntent) ^
      const DeepCollectionEquality().hash(createPoliciesIntent) ^
      const DeepCollectionEquality().hash(signRawPayloadsIntent) ^
      const DeepCollectionEquality().hash(createReadOnlySessionIntent) ^
      const DeepCollectionEquality().hash(createOauthProvidersIntent) ^
      const DeepCollectionEquality().hash(deleteOauthProvidersIntent) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntentV5) ^
      const DeepCollectionEquality().hash(oauthIntent) ^
      const DeepCollectionEquality().hash(createApiKeysIntentV2) ^
      const DeepCollectionEquality().hash(createReadWriteSessionIntent) ^
      const DeepCollectionEquality().hash(emailAuthIntentV2) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntentV6) ^
      const DeepCollectionEquality().hash(deletePrivateKeysIntent) ^
      const DeepCollectionEquality().hash(deleteWalletsIntent) ^
      const DeepCollectionEquality().hash(createReadWriteSessionIntentV2) ^
      const DeepCollectionEquality().hash(deleteSubOrganizationIntent) ^
      const DeepCollectionEquality().hash(initOtpAuthIntent) ^
      const DeepCollectionEquality().hash(otpAuthIntent) ^
      const DeepCollectionEquality().hash(createSubOrganizationIntentV7) ^
      runtimeType.hashCode;
}

extension $V1IntentExtension on V1Intent {
  V1Intent copyWith(
      {V1CreateOrganizationIntent? createOrganizationIntent,
      V1CreateAuthenticatorsIntent? createAuthenticatorsIntent,
      V1CreateUsersIntent? createUsersIntent,
      V1CreatePrivateKeysIntent? createPrivateKeysIntent,
      V1SignRawPayloadIntent? signRawPayloadIntent,
      V1CreateInvitationsIntent? createInvitationsIntent,
      V1AcceptInvitationIntent? acceptInvitationIntent,
      V1CreatePolicyIntent? createPolicyIntent,
      V1DisablePrivateKeyIntent? disablePrivateKeyIntent,
      V1DeleteUsersIntent? deleteUsersIntent,
      V1DeleteAuthenticatorsIntent? deleteAuthenticatorsIntent,
      V1DeleteInvitationIntent? deleteInvitationIntent,
      V1DeleteOrganizationIntent? deleteOrganizationIntent,
      V1DeletePolicyIntent? deletePolicyIntent,
      V1CreateUserTagIntent? createUserTagIntent,
      V1DeleteUserTagsIntent? deleteUserTagsIntent,
      V1SignTransactionIntent? signTransactionIntent,
      V1CreateApiKeysIntent? createApiKeysIntent,
      V1DeleteApiKeysIntent? deleteApiKeysIntent,
      V1ApproveActivityIntent? approveActivityIntent,
      V1RejectActivityIntent? rejectActivityIntent,
      V1CreatePrivateKeyTagIntent? createPrivateKeyTagIntent,
      V1DeletePrivateKeyTagsIntent? deletePrivateKeyTagsIntent,
      V1CreatePolicyIntentV2? createPolicyIntentV2,
      BillingSetPaymentMethodIntent? setPaymentMethodIntent,
      BillingActivateBillingTierIntent? activateBillingTierIntent,
      BillingDeletePaymentMethodIntent? deletePaymentMethodIntent,
      V1CreatePolicyIntentV3? createPolicyIntentV3,
      V1CreateApiOnlyUsersIntent? createApiOnlyUsersIntent,
      V1UpdateRootQuorumIntent? updateRootQuorumIntent,
      V1UpdateUserTagIntent? updateUserTagIntent,
      V1UpdatePrivateKeyTagIntent? updatePrivateKeyTagIntent,
      V1CreateAuthenticatorsIntentV2? createAuthenticatorsIntentV2,
      V1AcceptInvitationIntentV2? acceptInvitationIntentV2,
      V1CreateOrganizationIntentV2? createOrganizationIntentV2,
      V1CreateUsersIntentV2? createUsersIntentV2,
      V1CreateSubOrganizationIntent? createSubOrganizationIntent,
      V1CreateSubOrganizationIntentV2? createSubOrganizationIntentV2,
      V1UpdateAllowedOriginsIntent? updateAllowedOriginsIntent,
      V1CreatePrivateKeysIntentV2? createPrivateKeysIntentV2,
      V1UpdateUserIntent? updateUserIntent,
      V1UpdatePolicyIntent? updatePolicyIntent,
      BillingSetPaymentMethodIntentV2? setPaymentMethodIntentV2,
      V1CreateSubOrganizationIntentV3? createSubOrganizationIntentV3,
      V1CreateWalletIntent? createWalletIntent,
      V1CreateWalletAccountsIntent? createWalletAccountsIntent,
      V1InitUserEmailRecoveryIntent? initUserEmailRecoveryIntent,
      V1RecoverUserIntent? recoverUserIntent,
      V1SetOrganizationFeatureIntent? setOrganizationFeatureIntent,
      V1RemoveOrganizationFeatureIntent? removeOrganizationFeatureIntent,
      V1SignRawPayloadIntentV2? signRawPayloadIntentV2,
      V1SignTransactionIntentV2? signTransactionIntentV2,
      V1ExportPrivateKeyIntent? exportPrivateKeyIntent,
      V1ExportWalletIntent? exportWalletIntent,
      V1CreateSubOrganizationIntentV4? createSubOrganizationIntentV4,
      V1EmailAuthIntent? emailAuthIntent,
      V1ExportWalletAccountIntent? exportWalletAccountIntent,
      V1InitImportWalletIntent? initImportWalletIntent,
      V1ImportWalletIntent? importWalletIntent,
      V1InitImportPrivateKeyIntent? initImportPrivateKeyIntent,
      V1ImportPrivateKeyIntent? importPrivateKeyIntent,
      V1CreatePoliciesIntent? createPoliciesIntent,
      V1SignRawPayloadsIntent? signRawPayloadsIntent,
      V1CreateReadOnlySessionIntent? createReadOnlySessionIntent,
      V1CreateOauthProvidersIntent? createOauthProvidersIntent,
      V1DeleteOauthProvidersIntent? deleteOauthProvidersIntent,
      V1CreateSubOrganizationIntentV5? createSubOrganizationIntentV5,
      V1OauthIntent? oauthIntent,
      V1CreateApiKeysIntentV2? createApiKeysIntentV2,
      V1CreateReadWriteSessionIntent? createReadWriteSessionIntent,
      V1EmailAuthIntentV2? emailAuthIntentV2,
      V1CreateSubOrganizationIntentV6? createSubOrganizationIntentV6,
      V1DeletePrivateKeysIntent? deletePrivateKeysIntent,
      V1DeleteWalletsIntent? deleteWalletsIntent,
      V1CreateReadWriteSessionIntentV2? createReadWriteSessionIntentV2,
      V1DeleteSubOrganizationIntent? deleteSubOrganizationIntent,
      V1InitOtpAuthIntent? initOtpAuthIntent,
      V1OtpAuthIntent? otpAuthIntent,
      V1CreateSubOrganizationIntentV7? createSubOrganizationIntentV7}) {
    return V1Intent(
        createOrganizationIntent:
            createOrganizationIntent ?? this.createOrganizationIntent,
        createAuthenticatorsIntent:
            createAuthenticatorsIntent ?? this.createAuthenticatorsIntent,
        createUsersIntent: createUsersIntent ?? this.createUsersIntent,
        createPrivateKeysIntent:
            createPrivateKeysIntent ?? this.createPrivateKeysIntent,
        signRawPayloadIntent: signRawPayloadIntent ?? this.signRawPayloadIntent,
        createInvitationsIntent:
            createInvitationsIntent ?? this.createInvitationsIntent,
        acceptInvitationIntent:
            acceptInvitationIntent ?? this.acceptInvitationIntent,
        createPolicyIntent: createPolicyIntent ?? this.createPolicyIntent,
        disablePrivateKeyIntent:
            disablePrivateKeyIntent ?? this.disablePrivateKeyIntent,
        deleteUsersIntent: deleteUsersIntent ?? this.deleteUsersIntent,
        deleteAuthenticatorsIntent:
            deleteAuthenticatorsIntent ?? this.deleteAuthenticatorsIntent,
        deleteInvitationIntent:
            deleteInvitationIntent ?? this.deleteInvitationIntent,
        deleteOrganizationIntent:
            deleteOrganizationIntent ?? this.deleteOrganizationIntent,
        deletePolicyIntent: deletePolicyIntent ?? this.deletePolicyIntent,
        createUserTagIntent: createUserTagIntent ?? this.createUserTagIntent,
        deleteUserTagsIntent: deleteUserTagsIntent ?? this.deleteUserTagsIntent,
        signTransactionIntent:
            signTransactionIntent ?? this.signTransactionIntent,
        createApiKeysIntent: createApiKeysIntent ?? this.createApiKeysIntent,
        deleteApiKeysIntent: deleteApiKeysIntent ?? this.deleteApiKeysIntent,
        approveActivityIntent:
            approveActivityIntent ?? this.approveActivityIntent,
        rejectActivityIntent: rejectActivityIntent ?? this.rejectActivityIntent,
        createPrivateKeyTagIntent:
            createPrivateKeyTagIntent ?? this.createPrivateKeyTagIntent,
        deletePrivateKeyTagsIntent:
            deletePrivateKeyTagsIntent ?? this.deletePrivateKeyTagsIntent,
        createPolicyIntentV2: createPolicyIntentV2 ?? this.createPolicyIntentV2,
        setPaymentMethodIntent:
            setPaymentMethodIntent ?? this.setPaymentMethodIntent,
        activateBillingTierIntent:
            activateBillingTierIntent ?? this.activateBillingTierIntent,
        deletePaymentMethodIntent:
            deletePaymentMethodIntent ?? this.deletePaymentMethodIntent,
        createPolicyIntentV3: createPolicyIntentV3 ?? this.createPolicyIntentV3,
        createApiOnlyUsersIntent:
            createApiOnlyUsersIntent ?? this.createApiOnlyUsersIntent,
        updateRootQuorumIntent:
            updateRootQuorumIntent ?? this.updateRootQuorumIntent,
        updateUserTagIntent: updateUserTagIntent ?? this.updateUserTagIntent,
        updatePrivateKeyTagIntent:
            updatePrivateKeyTagIntent ?? this.updatePrivateKeyTagIntent,
        createAuthenticatorsIntentV2:
            createAuthenticatorsIntentV2 ?? this.createAuthenticatorsIntentV2,
        acceptInvitationIntentV2:
            acceptInvitationIntentV2 ?? this.acceptInvitationIntentV2,
        createOrganizationIntentV2:
            createOrganizationIntentV2 ?? this.createOrganizationIntentV2,
        createUsersIntentV2: createUsersIntentV2 ?? this.createUsersIntentV2,
        createSubOrganizationIntent:
            createSubOrganizationIntent ?? this.createSubOrganizationIntent,
        createSubOrganizationIntentV2:
            createSubOrganizationIntentV2 ?? this.createSubOrganizationIntentV2,
        updateAllowedOriginsIntent:
            updateAllowedOriginsIntent ?? this.updateAllowedOriginsIntent,
        createPrivateKeysIntentV2:
            createPrivateKeysIntentV2 ?? this.createPrivateKeysIntentV2,
        updateUserIntent: updateUserIntent ?? this.updateUserIntent,
        updatePolicyIntent: updatePolicyIntent ?? this.updatePolicyIntent,
        setPaymentMethodIntentV2:
            setPaymentMethodIntentV2 ?? this.setPaymentMethodIntentV2,
        createSubOrganizationIntentV3:
            createSubOrganizationIntentV3 ?? this.createSubOrganizationIntentV3,
        createWalletIntent: createWalletIntent ?? this.createWalletIntent,
        createWalletAccountsIntent:
            createWalletAccountsIntent ?? this.createWalletAccountsIntent,
        initUserEmailRecoveryIntent:
            initUserEmailRecoveryIntent ?? this.initUserEmailRecoveryIntent,
        recoverUserIntent: recoverUserIntent ?? this.recoverUserIntent,
        setOrganizationFeatureIntent:
            setOrganizationFeatureIntent ?? this.setOrganizationFeatureIntent,
        removeOrganizationFeatureIntent: removeOrganizationFeatureIntent ??
            this.removeOrganizationFeatureIntent,
        signRawPayloadIntentV2:
            signRawPayloadIntentV2 ?? this.signRawPayloadIntentV2,
        signTransactionIntentV2:
            signTransactionIntentV2 ?? this.signTransactionIntentV2,
        exportPrivateKeyIntent:
            exportPrivateKeyIntent ?? this.exportPrivateKeyIntent,
        exportWalletIntent: exportWalletIntent ?? this.exportWalletIntent,
        createSubOrganizationIntentV4:
            createSubOrganizationIntentV4 ?? this.createSubOrganizationIntentV4,
        emailAuthIntent: emailAuthIntent ?? this.emailAuthIntent,
        exportWalletAccountIntent:
            exportWalletAccountIntent ?? this.exportWalletAccountIntent,
        initImportWalletIntent:
            initImportWalletIntent ?? this.initImportWalletIntent,
        importWalletIntent: importWalletIntent ?? this.importWalletIntent,
        initImportPrivateKeyIntent:
            initImportPrivateKeyIntent ?? this.initImportPrivateKeyIntent,
        importPrivateKeyIntent:
            importPrivateKeyIntent ?? this.importPrivateKeyIntent,
        createPoliciesIntent: createPoliciesIntent ?? this.createPoliciesIntent,
        signRawPayloadsIntent:
            signRawPayloadsIntent ?? this.signRawPayloadsIntent,
        createReadOnlySessionIntent:
            createReadOnlySessionIntent ?? this.createReadOnlySessionIntent,
        createOauthProvidersIntent:
            createOauthProvidersIntent ?? this.createOauthProvidersIntent,
        deleteOauthProvidersIntent:
            deleteOauthProvidersIntent ?? this.deleteOauthProvidersIntent,
        createSubOrganizationIntentV5:
            createSubOrganizationIntentV5 ?? this.createSubOrganizationIntentV5,
        oauthIntent: oauthIntent ?? this.oauthIntent,
        createApiKeysIntentV2:
            createApiKeysIntentV2 ?? this.createApiKeysIntentV2,
        createReadWriteSessionIntent:
            createReadWriteSessionIntent ?? this.createReadWriteSessionIntent,
        emailAuthIntentV2: emailAuthIntentV2 ?? this.emailAuthIntentV2,
        createSubOrganizationIntentV6:
            createSubOrganizationIntentV6 ?? this.createSubOrganizationIntentV6,
        deletePrivateKeysIntent:
            deletePrivateKeysIntent ?? this.deletePrivateKeysIntent,
        deleteWalletsIntent: deleteWalletsIntent ?? this.deleteWalletsIntent,
        createReadWriteSessionIntentV2: createReadWriteSessionIntentV2 ??
            this.createReadWriteSessionIntentV2,
        deleteSubOrganizationIntent:
            deleteSubOrganizationIntent ?? this.deleteSubOrganizationIntent,
        initOtpAuthIntent: initOtpAuthIntent ?? this.initOtpAuthIntent,
        otpAuthIntent: otpAuthIntent ?? this.otpAuthIntent,
        createSubOrganizationIntentV7: createSubOrganizationIntentV7 ??
            this.createSubOrganizationIntentV7);
  }

  V1Intent copyWithWrapped(
      {Wrapped<V1CreateOrganizationIntent?>? createOrganizationIntent,
      Wrapped<V1CreateAuthenticatorsIntent?>? createAuthenticatorsIntent,
      Wrapped<V1CreateUsersIntent?>? createUsersIntent,
      Wrapped<V1CreatePrivateKeysIntent?>? createPrivateKeysIntent,
      Wrapped<V1SignRawPayloadIntent?>? signRawPayloadIntent,
      Wrapped<V1CreateInvitationsIntent?>? createInvitationsIntent,
      Wrapped<V1AcceptInvitationIntent?>? acceptInvitationIntent,
      Wrapped<V1CreatePolicyIntent?>? createPolicyIntent,
      Wrapped<V1DisablePrivateKeyIntent?>? disablePrivateKeyIntent,
      Wrapped<V1DeleteUsersIntent?>? deleteUsersIntent,
      Wrapped<V1DeleteAuthenticatorsIntent?>? deleteAuthenticatorsIntent,
      Wrapped<V1DeleteInvitationIntent?>? deleteInvitationIntent,
      Wrapped<V1DeleteOrganizationIntent?>? deleteOrganizationIntent,
      Wrapped<V1DeletePolicyIntent?>? deletePolicyIntent,
      Wrapped<V1CreateUserTagIntent?>? createUserTagIntent,
      Wrapped<V1DeleteUserTagsIntent?>? deleteUserTagsIntent,
      Wrapped<V1SignTransactionIntent?>? signTransactionIntent,
      Wrapped<V1CreateApiKeysIntent?>? createApiKeysIntent,
      Wrapped<V1DeleteApiKeysIntent?>? deleteApiKeysIntent,
      Wrapped<V1ApproveActivityIntent?>? approveActivityIntent,
      Wrapped<V1RejectActivityIntent?>? rejectActivityIntent,
      Wrapped<V1CreatePrivateKeyTagIntent?>? createPrivateKeyTagIntent,
      Wrapped<V1DeletePrivateKeyTagsIntent?>? deletePrivateKeyTagsIntent,
      Wrapped<V1CreatePolicyIntentV2?>? createPolicyIntentV2,
      Wrapped<BillingSetPaymentMethodIntent?>? setPaymentMethodIntent,
      Wrapped<BillingActivateBillingTierIntent?>? activateBillingTierIntent,
      Wrapped<BillingDeletePaymentMethodIntent?>? deletePaymentMethodIntent,
      Wrapped<V1CreatePolicyIntentV3?>? createPolicyIntentV3,
      Wrapped<V1CreateApiOnlyUsersIntent?>? createApiOnlyUsersIntent,
      Wrapped<V1UpdateRootQuorumIntent?>? updateRootQuorumIntent,
      Wrapped<V1UpdateUserTagIntent?>? updateUserTagIntent,
      Wrapped<V1UpdatePrivateKeyTagIntent?>? updatePrivateKeyTagIntent,
      Wrapped<V1CreateAuthenticatorsIntentV2?>? createAuthenticatorsIntentV2,
      Wrapped<V1AcceptInvitationIntentV2?>? acceptInvitationIntentV2,
      Wrapped<V1CreateOrganizationIntentV2?>? createOrganizationIntentV2,
      Wrapped<V1CreateUsersIntentV2?>? createUsersIntentV2,
      Wrapped<V1CreateSubOrganizationIntent?>? createSubOrganizationIntent,
      Wrapped<V1CreateSubOrganizationIntentV2?>? createSubOrganizationIntentV2,
      Wrapped<V1UpdateAllowedOriginsIntent?>? updateAllowedOriginsIntent,
      Wrapped<V1CreatePrivateKeysIntentV2?>? createPrivateKeysIntentV2,
      Wrapped<V1UpdateUserIntent?>? updateUserIntent,
      Wrapped<V1UpdatePolicyIntent?>? updatePolicyIntent,
      Wrapped<BillingSetPaymentMethodIntentV2?>? setPaymentMethodIntentV2,
      Wrapped<V1CreateSubOrganizationIntentV3?>? createSubOrganizationIntentV3,
      Wrapped<V1CreateWalletIntent?>? createWalletIntent,
      Wrapped<V1CreateWalletAccountsIntent?>? createWalletAccountsIntent,
      Wrapped<V1InitUserEmailRecoveryIntent?>? initUserEmailRecoveryIntent,
      Wrapped<V1RecoverUserIntent?>? recoverUserIntent,
      Wrapped<V1SetOrganizationFeatureIntent?>? setOrganizationFeatureIntent,
      Wrapped<V1RemoveOrganizationFeatureIntent?>?
          removeOrganizationFeatureIntent,
      Wrapped<V1SignRawPayloadIntentV2?>? signRawPayloadIntentV2,
      Wrapped<V1SignTransactionIntentV2?>? signTransactionIntentV2,
      Wrapped<V1ExportPrivateKeyIntent?>? exportPrivateKeyIntent,
      Wrapped<V1ExportWalletIntent?>? exportWalletIntent,
      Wrapped<V1CreateSubOrganizationIntentV4?>? createSubOrganizationIntentV4,
      Wrapped<V1EmailAuthIntent?>? emailAuthIntent,
      Wrapped<V1ExportWalletAccountIntent?>? exportWalletAccountIntent,
      Wrapped<V1InitImportWalletIntent?>? initImportWalletIntent,
      Wrapped<V1ImportWalletIntent?>? importWalletIntent,
      Wrapped<V1InitImportPrivateKeyIntent?>? initImportPrivateKeyIntent,
      Wrapped<V1ImportPrivateKeyIntent?>? importPrivateKeyIntent,
      Wrapped<V1CreatePoliciesIntent?>? createPoliciesIntent,
      Wrapped<V1SignRawPayloadsIntent?>? signRawPayloadsIntent,
      Wrapped<V1CreateReadOnlySessionIntent?>? createReadOnlySessionIntent,
      Wrapped<V1CreateOauthProvidersIntent?>? createOauthProvidersIntent,
      Wrapped<V1DeleteOauthProvidersIntent?>? deleteOauthProvidersIntent,
      Wrapped<V1CreateSubOrganizationIntentV5?>? createSubOrganizationIntentV5,
      Wrapped<V1OauthIntent?>? oauthIntent,
      Wrapped<V1CreateApiKeysIntentV2?>? createApiKeysIntentV2,
      Wrapped<V1CreateReadWriteSessionIntent?>? createReadWriteSessionIntent,
      Wrapped<V1EmailAuthIntentV2?>? emailAuthIntentV2,
      Wrapped<V1CreateSubOrganizationIntentV6?>? createSubOrganizationIntentV6,
      Wrapped<V1DeletePrivateKeysIntent?>? deletePrivateKeysIntent,
      Wrapped<V1DeleteWalletsIntent?>? deleteWalletsIntent,
      Wrapped<V1CreateReadWriteSessionIntentV2?>?
          createReadWriteSessionIntentV2,
      Wrapped<V1DeleteSubOrganizationIntent?>? deleteSubOrganizationIntent,
      Wrapped<V1InitOtpAuthIntent?>? initOtpAuthIntent,
      Wrapped<V1OtpAuthIntent?>? otpAuthIntent,
      Wrapped<V1CreateSubOrganizationIntentV7?>?
          createSubOrganizationIntentV7}) {
    return V1Intent(
        createOrganizationIntent: (createOrganizationIntent != null
            ? createOrganizationIntent.value
            : this.createOrganizationIntent),
        createAuthenticatorsIntent: (createAuthenticatorsIntent != null
            ? createAuthenticatorsIntent.value
            : this.createAuthenticatorsIntent),
        createUsersIntent: (createUsersIntent != null
            ? createUsersIntent.value
            : this.createUsersIntent),
        createPrivateKeysIntent: (createPrivateKeysIntent != null
            ? createPrivateKeysIntent.value
            : this.createPrivateKeysIntent),
        signRawPayloadIntent: (signRawPayloadIntent != null
            ? signRawPayloadIntent.value
            : this.signRawPayloadIntent),
        createInvitationsIntent: (createInvitationsIntent != null
            ? createInvitationsIntent.value
            : this.createInvitationsIntent),
        acceptInvitationIntent: (acceptInvitationIntent != null
            ? acceptInvitationIntent.value
            : this.acceptInvitationIntent),
        createPolicyIntent: (createPolicyIntent != null
            ? createPolicyIntent.value
            : this.createPolicyIntent),
        disablePrivateKeyIntent: (disablePrivateKeyIntent != null
            ? disablePrivateKeyIntent.value
            : this.disablePrivateKeyIntent),
        deleteUsersIntent: (deleteUsersIntent != null
            ? deleteUsersIntent.value
            : this.deleteUsersIntent),
        deleteAuthenticatorsIntent: (deleteAuthenticatorsIntent != null
            ? deleteAuthenticatorsIntent.value
            : this.deleteAuthenticatorsIntent),
        deleteInvitationIntent: (deleteInvitationIntent != null
            ? deleteInvitationIntent.value
            : this.deleteInvitationIntent),
        deleteOrganizationIntent: (deleteOrganizationIntent != null
            ? deleteOrganizationIntent.value
            : this.deleteOrganizationIntent),
        deletePolicyIntent: (deletePolicyIntent != null
            ? deletePolicyIntent.value
            : this.deletePolicyIntent),
        createUserTagIntent: (createUserTagIntent != null
            ? createUserTagIntent.value
            : this.createUserTagIntent),
        deleteUserTagsIntent: (deleteUserTagsIntent != null
            ? deleteUserTagsIntent.value
            : this.deleteUserTagsIntent),
        signTransactionIntent: (signTransactionIntent != null
            ? signTransactionIntent.value
            : this.signTransactionIntent),
        createApiKeysIntent: (createApiKeysIntent != null
            ? createApiKeysIntent.value
            : this.createApiKeysIntent),
        deleteApiKeysIntent: (deleteApiKeysIntent != null
            ? deleteApiKeysIntent.value
            : this.deleteApiKeysIntent),
        approveActivityIntent: (approveActivityIntent != null
            ? approveActivityIntent.value
            : this.approveActivityIntent),
        rejectActivityIntent: (rejectActivityIntent != null
            ? rejectActivityIntent.value
            : this.rejectActivityIntent),
        createPrivateKeyTagIntent: (createPrivateKeyTagIntent != null
            ? createPrivateKeyTagIntent.value
            : this.createPrivateKeyTagIntent),
        deletePrivateKeyTagsIntent: (deletePrivateKeyTagsIntent != null
            ? deletePrivateKeyTagsIntent.value
            : this.deletePrivateKeyTagsIntent),
        createPolicyIntentV2: (createPolicyIntentV2 != null
            ? createPolicyIntentV2.value
            : this.createPolicyIntentV2),
        setPaymentMethodIntent: (setPaymentMethodIntent != null
            ? setPaymentMethodIntent.value
            : this.setPaymentMethodIntent),
        activateBillingTierIntent: (activateBillingTierIntent != null
            ? activateBillingTierIntent.value
            : this.activateBillingTierIntent),
        deletePaymentMethodIntent: (deletePaymentMethodIntent != null
            ? deletePaymentMethodIntent.value
            : this.deletePaymentMethodIntent),
        createPolicyIntentV3: (createPolicyIntentV3 != null
            ? createPolicyIntentV3.value
            : this.createPolicyIntentV3),
        createApiOnlyUsersIntent: (createApiOnlyUsersIntent != null
            ? createApiOnlyUsersIntent.value
            : this.createApiOnlyUsersIntent),
        updateRootQuorumIntent: (updateRootQuorumIntent != null
            ? updateRootQuorumIntent.value
            : this.updateRootQuorumIntent),
        updateUserTagIntent: (updateUserTagIntent != null
            ? updateUserTagIntent.value
            : this.updateUserTagIntent),
        updatePrivateKeyTagIntent: (updatePrivateKeyTagIntent != null
            ? updatePrivateKeyTagIntent.value
            : this.updatePrivateKeyTagIntent),
        createAuthenticatorsIntentV2: (createAuthenticatorsIntentV2 != null
            ? createAuthenticatorsIntentV2.value
            : this.createAuthenticatorsIntentV2),
        acceptInvitationIntentV2: (acceptInvitationIntentV2 != null
            ? acceptInvitationIntentV2.value
            : this.acceptInvitationIntentV2),
        createOrganizationIntentV2: (createOrganizationIntentV2 != null
            ? createOrganizationIntentV2.value
            : this.createOrganizationIntentV2),
        createUsersIntentV2: (createUsersIntentV2 != null
            ? createUsersIntentV2.value
            : this.createUsersIntentV2),
        createSubOrganizationIntent: (createSubOrganizationIntent != null
            ? createSubOrganizationIntent.value
            : this.createSubOrganizationIntent),
        createSubOrganizationIntentV2: (createSubOrganizationIntentV2 != null
            ? createSubOrganizationIntentV2.value
            : this.createSubOrganizationIntentV2),
        updateAllowedOriginsIntent: (updateAllowedOriginsIntent != null
            ? updateAllowedOriginsIntent.value
            : this.updateAllowedOriginsIntent),
        createPrivateKeysIntentV2: (createPrivateKeysIntentV2 != null
            ? createPrivateKeysIntentV2.value
            : this.createPrivateKeysIntentV2),
        updateUserIntent: (updateUserIntent != null
            ? updateUserIntent.value
            : this.updateUserIntent),
        updatePolicyIntent: (updatePolicyIntent != null
            ? updatePolicyIntent.value
            : this.updatePolicyIntent),
        setPaymentMethodIntentV2: (setPaymentMethodIntentV2 != null
            ? setPaymentMethodIntentV2.value
            : this.setPaymentMethodIntentV2),
        createSubOrganizationIntentV3: (createSubOrganizationIntentV3 != null
            ? createSubOrganizationIntentV3.value
            : this.createSubOrganizationIntentV3),
        createWalletIntent: (createWalletIntent != null
            ? createWalletIntent.value
            : this.createWalletIntent),
        createWalletAccountsIntent: (createWalletAccountsIntent != null
            ? createWalletAccountsIntent.value
            : this.createWalletAccountsIntent),
        initUserEmailRecoveryIntent: (initUserEmailRecoveryIntent != null
            ? initUserEmailRecoveryIntent.value
            : this.initUserEmailRecoveryIntent),
        recoverUserIntent: (recoverUserIntent != null
            ? recoverUserIntent.value
            : this.recoverUserIntent),
        setOrganizationFeatureIntent: (setOrganizationFeatureIntent != null
            ? setOrganizationFeatureIntent.value
            : this.setOrganizationFeatureIntent),
        removeOrganizationFeatureIntent: (removeOrganizationFeatureIntent != null
            ? removeOrganizationFeatureIntent.value
            : this.removeOrganizationFeatureIntent),
        signRawPayloadIntentV2: (signRawPayloadIntentV2 != null
            ? signRawPayloadIntentV2.value
            : this.signRawPayloadIntentV2),
        signTransactionIntentV2: (signTransactionIntentV2 != null
            ? signTransactionIntentV2.value
            : this.signTransactionIntentV2),
        exportPrivateKeyIntent: (exportPrivateKeyIntent != null
            ? exportPrivateKeyIntent.value
            : this.exportPrivateKeyIntent),
        exportWalletIntent: (exportWalletIntent != null
            ? exportWalletIntent.value
            : this.exportWalletIntent),
        createSubOrganizationIntentV4: (createSubOrganizationIntentV4 != null
            ? createSubOrganizationIntentV4.value
            : this.createSubOrganizationIntentV4),
        emailAuthIntent: (emailAuthIntent != null
            ? emailAuthIntent.value
            : this.emailAuthIntent),
        exportWalletAccountIntent:
            (exportWalletAccountIntent != null ? exportWalletAccountIntent.value : this.exportWalletAccountIntent),
        initImportWalletIntent: (initImportWalletIntent != null ? initImportWalletIntent.value : this.initImportWalletIntent),
        importWalletIntent: (importWalletIntent != null ? importWalletIntent.value : this.importWalletIntent),
        initImportPrivateKeyIntent: (initImportPrivateKeyIntent != null ? initImportPrivateKeyIntent.value : this.initImportPrivateKeyIntent),
        importPrivateKeyIntent: (importPrivateKeyIntent != null ? importPrivateKeyIntent.value : this.importPrivateKeyIntent),
        createPoliciesIntent: (createPoliciesIntent != null ? createPoliciesIntent.value : this.createPoliciesIntent),
        signRawPayloadsIntent: (signRawPayloadsIntent != null ? signRawPayloadsIntent.value : this.signRawPayloadsIntent),
        createReadOnlySessionIntent: (createReadOnlySessionIntent != null ? createReadOnlySessionIntent.value : this.createReadOnlySessionIntent),
        createOauthProvidersIntent: (createOauthProvidersIntent != null ? createOauthProvidersIntent.value : this.createOauthProvidersIntent),
        deleteOauthProvidersIntent: (deleteOauthProvidersIntent != null ? deleteOauthProvidersIntent.value : this.deleteOauthProvidersIntent),
        createSubOrganizationIntentV5: (createSubOrganizationIntentV5 != null ? createSubOrganizationIntentV5.value : this.createSubOrganizationIntentV5),
        oauthIntent: (oauthIntent != null ? oauthIntent.value : this.oauthIntent),
        createApiKeysIntentV2: (createApiKeysIntentV2 != null ? createApiKeysIntentV2.value : this.createApiKeysIntentV2),
        createReadWriteSessionIntent: (createReadWriteSessionIntent != null ? createReadWriteSessionIntent.value : this.createReadWriteSessionIntent),
        emailAuthIntentV2: (emailAuthIntentV2 != null ? emailAuthIntentV2.value : this.emailAuthIntentV2),
        createSubOrganizationIntentV6: (createSubOrganizationIntentV6 != null ? createSubOrganizationIntentV6.value : this.createSubOrganizationIntentV6),
        deletePrivateKeysIntent: (deletePrivateKeysIntent != null ? deletePrivateKeysIntent.value : this.deletePrivateKeysIntent),
        deleteWalletsIntent: (deleteWalletsIntent != null ? deleteWalletsIntent.value : this.deleteWalletsIntent),
        createReadWriteSessionIntentV2: (createReadWriteSessionIntentV2 != null ? createReadWriteSessionIntentV2.value : this.createReadWriteSessionIntentV2),
        deleteSubOrganizationIntent: (deleteSubOrganizationIntent != null ? deleteSubOrganizationIntent.value : this.deleteSubOrganizationIntent),
        initOtpAuthIntent: (initOtpAuthIntent != null ? initOtpAuthIntent.value : this.initOtpAuthIntent),
        otpAuthIntent: (otpAuthIntent != null ? otpAuthIntent.value : this.otpAuthIntent),
        createSubOrganizationIntentV7: (createSubOrganizationIntentV7 != null ? createSubOrganizationIntentV7.value : this.createSubOrganizationIntentV7));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Invitation {
  const V1Invitation({
    required this.invitationId,
    required this.receiverUserName,
    required this.receiverEmail,
    required this.receiverUserTags,
    required this.accessType,
    required this.status,
    required this.createdAt,
    required this.updatedAt,
    required this.senderUserId,
  });

  factory V1Invitation.fromJson(Map<String, dynamic> json) =>
      _$V1InvitationFromJson(json);

  static const toJsonFactory = _$V1InvitationToJson;
  Map<String, dynamic> toJson() => _$V1InvitationToJson(this);

  @JsonKey(name: 'invitationId')
  final String invitationId;
  @JsonKey(name: 'receiverUserName')
  final String receiverUserName;
  @JsonKey(name: 'receiverEmail')
  final String receiverEmail;
  @JsonKey(name: 'receiverUserTags', defaultValue: <String>[])
  final List<String> receiverUserTags;
  @JsonKey(
    name: 'accessType',
    toJson: v1AccessTypeToJson,
    fromJson: v1AccessTypeFromJson,
  )
  final enums.V1AccessType accessType;
  @JsonKey(
    name: 'status',
    toJson: v1InvitationStatusToJson,
    fromJson: v1InvitationStatusFromJson,
  )
  final enums.V1InvitationStatus status;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  @JsonKey(name: 'senderUserId')
  final String senderUserId;
  static const fromJsonFactory = _$V1InvitationFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Invitation &&
            (identical(other.invitationId, invitationId) ||
                const DeepCollectionEquality()
                    .equals(other.invitationId, invitationId)) &&
            (identical(other.receiverUserName, receiverUserName) ||
                const DeepCollectionEquality()
                    .equals(other.receiverUserName, receiverUserName)) &&
            (identical(other.receiverEmail, receiverEmail) ||
                const DeepCollectionEquality()
                    .equals(other.receiverEmail, receiverEmail)) &&
            (identical(other.receiverUserTags, receiverUserTags) ||
                const DeepCollectionEquality()
                    .equals(other.receiverUserTags, receiverUserTags)) &&
            (identical(other.accessType, accessType) ||
                const DeepCollectionEquality()
                    .equals(other.accessType, accessType)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)) &&
            (identical(other.senderUserId, senderUserId) ||
                const DeepCollectionEquality()
                    .equals(other.senderUserId, senderUserId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invitationId) ^
      const DeepCollectionEquality().hash(receiverUserName) ^
      const DeepCollectionEquality().hash(receiverEmail) ^
      const DeepCollectionEquality().hash(receiverUserTags) ^
      const DeepCollectionEquality().hash(accessType) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      const DeepCollectionEquality().hash(senderUserId) ^
      runtimeType.hashCode;
}

extension $V1InvitationExtension on V1Invitation {
  V1Invitation copyWith(
      {String? invitationId,
      String? receiverUserName,
      String? receiverEmail,
      List<String>? receiverUserTags,
      enums.V1AccessType? accessType,
      enums.V1InvitationStatus? status,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt,
      String? senderUserId}) {
    return V1Invitation(
        invitationId: invitationId ?? this.invitationId,
        receiverUserName: receiverUserName ?? this.receiverUserName,
        receiverEmail: receiverEmail ?? this.receiverEmail,
        receiverUserTags: receiverUserTags ?? this.receiverUserTags,
        accessType: accessType ?? this.accessType,
        status: status ?? this.status,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        senderUserId: senderUserId ?? this.senderUserId);
  }

  V1Invitation copyWithWrapped(
      {Wrapped<String>? invitationId,
      Wrapped<String>? receiverUserName,
      Wrapped<String>? receiverEmail,
      Wrapped<List<String>>? receiverUserTags,
      Wrapped<enums.V1AccessType>? accessType,
      Wrapped<enums.V1InvitationStatus>? status,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt,
      Wrapped<String>? senderUserId}) {
    return V1Invitation(
        invitationId:
            (invitationId != null ? invitationId.value : this.invitationId),
        receiverUserName: (receiverUserName != null
            ? receiverUserName.value
            : this.receiverUserName),
        receiverEmail:
            (receiverEmail != null ? receiverEmail.value : this.receiverEmail),
        receiverUserTags: (receiverUserTags != null
            ? receiverUserTags.value
            : this.receiverUserTags),
        accessType: (accessType != null ? accessType.value : this.accessType),
        status: (status != null ? status.value : this.status),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        senderUserId:
            (senderUserId != null ? senderUserId.value : this.senderUserId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1InvitationParams {
  const V1InvitationParams({
    required this.receiverUserName,
    required this.receiverUserEmail,
    required this.receiverUserTags,
    required this.accessType,
    required this.senderUserId,
  });

  factory V1InvitationParams.fromJson(Map<String, dynamic> json) =>
      _$V1InvitationParamsFromJson(json);

  static const toJsonFactory = _$V1InvitationParamsToJson;
  Map<String, dynamic> toJson() => _$V1InvitationParamsToJson(this);

  @JsonKey(name: 'receiverUserName')
  final String receiverUserName;
  @JsonKey(name: 'receiverUserEmail')
  final String receiverUserEmail;
  @JsonKey(name: 'receiverUserTags', defaultValue: <String>[])
  final List<String> receiverUserTags;
  @JsonKey(
    name: 'accessType',
    toJson: v1AccessTypeToJson,
    fromJson: v1AccessTypeFromJson,
  )
  final enums.V1AccessType accessType;
  @JsonKey(name: 'senderUserId')
  final String senderUserId;
  static const fromJsonFactory = _$V1InvitationParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1InvitationParams &&
            (identical(other.receiverUserName, receiverUserName) ||
                const DeepCollectionEquality()
                    .equals(other.receiverUserName, receiverUserName)) &&
            (identical(other.receiverUserEmail, receiverUserEmail) ||
                const DeepCollectionEquality()
                    .equals(other.receiverUserEmail, receiverUserEmail)) &&
            (identical(other.receiverUserTags, receiverUserTags) ||
                const DeepCollectionEquality()
                    .equals(other.receiverUserTags, receiverUserTags)) &&
            (identical(other.accessType, accessType) ||
                const DeepCollectionEquality()
                    .equals(other.accessType, accessType)) &&
            (identical(other.senderUserId, senderUserId) ||
                const DeepCollectionEquality()
                    .equals(other.senderUserId, senderUserId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(receiverUserName) ^
      const DeepCollectionEquality().hash(receiverUserEmail) ^
      const DeepCollectionEquality().hash(receiverUserTags) ^
      const DeepCollectionEquality().hash(accessType) ^
      const DeepCollectionEquality().hash(senderUserId) ^
      runtimeType.hashCode;
}

extension $V1InvitationParamsExtension on V1InvitationParams {
  V1InvitationParams copyWith(
      {String? receiverUserName,
      String? receiverUserEmail,
      List<String>? receiverUserTags,
      enums.V1AccessType? accessType,
      String? senderUserId}) {
    return V1InvitationParams(
        receiverUserName: receiverUserName ?? this.receiverUserName,
        receiverUserEmail: receiverUserEmail ?? this.receiverUserEmail,
        receiverUserTags: receiverUserTags ?? this.receiverUserTags,
        accessType: accessType ?? this.accessType,
        senderUserId: senderUserId ?? this.senderUserId);
  }

  V1InvitationParams copyWithWrapped(
      {Wrapped<String>? receiverUserName,
      Wrapped<String>? receiverUserEmail,
      Wrapped<List<String>>? receiverUserTags,
      Wrapped<enums.V1AccessType>? accessType,
      Wrapped<String>? senderUserId}) {
    return V1InvitationParams(
        receiverUserName: (receiverUserName != null
            ? receiverUserName.value
            : this.receiverUserName),
        receiverUserEmail: (receiverUserEmail != null
            ? receiverUserEmail.value
            : this.receiverUserEmail),
        receiverUserTags: (receiverUserTags != null
            ? receiverUserTags.value
            : this.receiverUserTags),
        accessType: (accessType != null ? accessType.value : this.accessType),
        senderUserId:
            (senderUserId != null ? senderUserId.value : this.senderUserId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ListPrivateKeyTagsRequest {
  const V1ListPrivateKeyTagsRequest({
    required this.organizationId,
  });

  factory V1ListPrivateKeyTagsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ListPrivateKeyTagsRequestFromJson(json);

  static const toJsonFactory = _$V1ListPrivateKeyTagsRequestToJson;
  Map<String, dynamic> toJson() => _$V1ListPrivateKeyTagsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1ListPrivateKeyTagsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ListPrivateKeyTagsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1ListPrivateKeyTagsRequestExtension on V1ListPrivateKeyTagsRequest {
  V1ListPrivateKeyTagsRequest copyWith({String? organizationId}) {
    return V1ListPrivateKeyTagsRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1ListPrivateKeyTagsRequest copyWithWrapped(
      {Wrapped<String>? organizationId}) {
    return V1ListPrivateKeyTagsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ListPrivateKeyTagsResponse {
  const V1ListPrivateKeyTagsResponse({
    required this.privateKeyTags,
  });

  factory V1ListPrivateKeyTagsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1ListPrivateKeyTagsResponseFromJson(json);

  static const toJsonFactory = _$V1ListPrivateKeyTagsResponseToJson;
  Map<String, dynamic> toJson() => _$V1ListPrivateKeyTagsResponseToJson(this);

  @JsonKey(name: 'privateKeyTags', defaultValue: <Datav1Tag>[])
  final List<Datav1Tag> privateKeyTags;
  static const fromJsonFactory = _$V1ListPrivateKeyTagsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ListPrivateKeyTagsResponse &&
            (identical(other.privateKeyTags, privateKeyTags) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTags, privateKeyTags)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTags) ^
      runtimeType.hashCode;
}

extension $V1ListPrivateKeyTagsResponseExtension
    on V1ListPrivateKeyTagsResponse {
  V1ListPrivateKeyTagsResponse copyWith({List<Datav1Tag>? privateKeyTags}) {
    return V1ListPrivateKeyTagsResponse(
        privateKeyTags: privateKeyTags ?? this.privateKeyTags);
  }

  V1ListPrivateKeyTagsResponse copyWithWrapped(
      {Wrapped<List<Datav1Tag>>? privateKeyTags}) {
    return V1ListPrivateKeyTagsResponse(
        privateKeyTags: (privateKeyTags != null
            ? privateKeyTags.value
            : this.privateKeyTags));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ListUserTagsRequest {
  const V1ListUserTagsRequest({
    required this.organizationId,
  });

  factory V1ListUserTagsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1ListUserTagsRequestFromJson(json);

  static const toJsonFactory = _$V1ListUserTagsRequestToJson;
  Map<String, dynamic> toJson() => _$V1ListUserTagsRequestToJson(this);

  @JsonKey(name: 'organizationId')
  final String organizationId;
  static const fromJsonFactory = _$V1ListUserTagsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ListUserTagsRequest &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      runtimeType.hashCode;
}

extension $V1ListUserTagsRequestExtension on V1ListUserTagsRequest {
  V1ListUserTagsRequest copyWith({String? organizationId}) {
    return V1ListUserTagsRequest(
        organizationId: organizationId ?? this.organizationId);
  }

  V1ListUserTagsRequest copyWithWrapped({Wrapped<String>? organizationId}) {
    return V1ListUserTagsRequest(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1ListUserTagsResponse {
  const V1ListUserTagsResponse({
    required this.userTags,
  });

  factory V1ListUserTagsResponse.fromJson(Map<String, dynamic> json) =>
      _$V1ListUserTagsResponseFromJson(json);

  static const toJsonFactory = _$V1ListUserTagsResponseToJson;
  Map<String, dynamic> toJson() => _$V1ListUserTagsResponseToJson(this);

  @JsonKey(name: 'userTags', defaultValue: <Datav1Tag>[])
  final List<Datav1Tag> userTags;
  static const fromJsonFactory = _$V1ListUserTagsResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1ListUserTagsResponse &&
            (identical(other.userTags, userTags) ||
                const DeepCollectionEquality()
                    .equals(other.userTags, userTags)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTags) ^ runtimeType.hashCode;
}

extension $V1ListUserTagsResponseExtension on V1ListUserTagsResponse {
  V1ListUserTagsResponse copyWith({List<Datav1Tag>? userTags}) {
    return V1ListUserTagsResponse(userTags: userTags ?? this.userTags);
  }

  V1ListUserTagsResponse copyWithWrapped({Wrapped<List<Datav1Tag>>? userTags}) {
    return V1ListUserTagsResponse(
        userTags: (userTags != null ? userTags.value : this.userTags));
  }
}

@JsonSerializable(explicitToJson: true)
class V1NOOPCodegenAnchorResponse {
  const V1NOOPCodegenAnchorResponse({
    required this.stamp,
  });

  factory V1NOOPCodegenAnchorResponse.fromJson(Map<String, dynamic> json) =>
      _$V1NOOPCodegenAnchorResponseFromJson(json);

  static const toJsonFactory = _$V1NOOPCodegenAnchorResponseToJson;
  Map<String, dynamic> toJson() => _$V1NOOPCodegenAnchorResponseToJson(this);

  @JsonKey(name: 'stamp')
  final V1WebAuthnStamp stamp;
  static const fromJsonFactory = _$V1NOOPCodegenAnchorResponseFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1NOOPCodegenAnchorResponse &&
            (identical(other.stamp, stamp) ||
                const DeepCollectionEquality().equals(other.stamp, stamp)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(stamp) ^ runtimeType.hashCode;
}

extension $V1NOOPCodegenAnchorResponseExtension on V1NOOPCodegenAnchorResponse {
  V1NOOPCodegenAnchorResponse copyWith({V1WebAuthnStamp? stamp}) {
    return V1NOOPCodegenAnchorResponse(stamp: stamp ?? this.stamp);
  }

  V1NOOPCodegenAnchorResponse copyWithWrapped(
      {Wrapped<V1WebAuthnStamp>? stamp}) {
    return V1NOOPCodegenAnchorResponse(
        stamp: (stamp != null ? stamp.value : this.stamp));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OauthIntent {
  const V1OauthIntent({
    required this.oidcToken,
    required this.targetPublicKey,
    this.apiKeyName,
    this.expirationSeconds,
  });

  factory V1OauthIntent.fromJson(Map<String, dynamic> json) =>
      _$V1OauthIntentFromJson(json);

  static const toJsonFactory = _$V1OauthIntentToJson;
  Map<String, dynamic> toJson() => _$V1OauthIntentToJson(this);

  @JsonKey(name: 'oidcToken')
  final String oidcToken;
  @JsonKey(name: 'targetPublicKey')
  final String targetPublicKey;
  @JsonKey(name: 'apiKeyName')
  final String? apiKeyName;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  static const fromJsonFactory = _$V1OauthIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OauthIntent &&
            (identical(other.oidcToken, oidcToken) ||
                const DeepCollectionEquality()
                    .equals(other.oidcToken, oidcToken)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(oidcToken) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      runtimeType.hashCode;
}

extension $V1OauthIntentExtension on V1OauthIntent {
  V1OauthIntent copyWith(
      {String? oidcToken,
      String? targetPublicKey,
      String? apiKeyName,
      String? expirationSeconds}) {
    return V1OauthIntent(
        oidcToken: oidcToken ?? this.oidcToken,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds);
  }

  V1OauthIntent copyWithWrapped(
      {Wrapped<String>? oidcToken,
      Wrapped<String>? targetPublicKey,
      Wrapped<String?>? apiKeyName,
      Wrapped<String?>? expirationSeconds}) {
    return V1OauthIntent(
        oidcToken: (oidcToken != null ? oidcToken.value : this.oidcToken),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OauthProvider {
  const V1OauthProvider({
    required this.providerId,
    required this.providerName,
    required this.issuer,
    required this.audience,
    required this.subject,
    required this.createdAt,
    required this.updatedAt,
  });

  factory V1OauthProvider.fromJson(Map<String, dynamic> json) =>
      _$V1OauthProviderFromJson(json);

  static const toJsonFactory = _$V1OauthProviderToJson;
  Map<String, dynamic> toJson() => _$V1OauthProviderToJson(this);

  @JsonKey(name: 'providerId')
  final String providerId;
  @JsonKey(name: 'providerName')
  final String providerName;
  @JsonKey(name: 'issuer')
  final String issuer;
  @JsonKey(name: 'audience')
  final String audience;
  @JsonKey(name: 'subject')
  final String subject;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  static const fromJsonFactory = _$V1OauthProviderFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OauthProvider &&
            (identical(other.providerId, providerId) ||
                const DeepCollectionEquality()
                    .equals(other.providerId, providerId)) &&
            (identical(other.providerName, providerName) ||
                const DeepCollectionEquality()
                    .equals(other.providerName, providerName)) &&
            (identical(other.issuer, issuer) ||
                const DeepCollectionEquality().equals(other.issuer, issuer)) &&
            (identical(other.audience, audience) ||
                const DeepCollectionEquality()
                    .equals(other.audience, audience)) &&
            (identical(other.subject, subject) ||
                const DeepCollectionEquality()
                    .equals(other.subject, subject)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(providerId) ^
      const DeepCollectionEquality().hash(providerName) ^
      const DeepCollectionEquality().hash(issuer) ^
      const DeepCollectionEquality().hash(audience) ^
      const DeepCollectionEquality().hash(subject) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      runtimeType.hashCode;
}

extension $V1OauthProviderExtension on V1OauthProvider {
  V1OauthProvider copyWith(
      {String? providerId,
      String? providerName,
      String? issuer,
      String? audience,
      String? subject,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt}) {
    return V1OauthProvider(
        providerId: providerId ?? this.providerId,
        providerName: providerName ?? this.providerName,
        issuer: issuer ?? this.issuer,
        audience: audience ?? this.audience,
        subject: subject ?? this.subject,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  V1OauthProvider copyWithWrapped(
      {Wrapped<String>? providerId,
      Wrapped<String>? providerName,
      Wrapped<String>? issuer,
      Wrapped<String>? audience,
      Wrapped<String>? subject,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt}) {
    return V1OauthProvider(
        providerId: (providerId != null ? providerId.value : this.providerId),
        providerName:
            (providerName != null ? providerName.value : this.providerName),
        issuer: (issuer != null ? issuer.value : this.issuer),
        audience: (audience != null ? audience.value : this.audience),
        subject: (subject != null ? subject.value : this.subject),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OauthProviderParams {
  const V1OauthProviderParams({
    required this.providerName,
    required this.oidcToken,
  });

  factory V1OauthProviderParams.fromJson(Map<String, dynamic> json) =>
      _$V1OauthProviderParamsFromJson(json);

  static const toJsonFactory = _$V1OauthProviderParamsToJson;
  Map<String, dynamic> toJson() => _$V1OauthProviderParamsToJson(this);

  @JsonKey(name: 'providerName')
  final String providerName;
  @JsonKey(name: 'oidcToken')
  final String oidcToken;
  static const fromJsonFactory = _$V1OauthProviderParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OauthProviderParams &&
            (identical(other.providerName, providerName) ||
                const DeepCollectionEquality()
                    .equals(other.providerName, providerName)) &&
            (identical(other.oidcToken, oidcToken) ||
                const DeepCollectionEquality()
                    .equals(other.oidcToken, oidcToken)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(providerName) ^
      const DeepCollectionEquality().hash(oidcToken) ^
      runtimeType.hashCode;
}

extension $V1OauthProviderParamsExtension on V1OauthProviderParams {
  V1OauthProviderParams copyWith({String? providerName, String? oidcToken}) {
    return V1OauthProviderParams(
        providerName: providerName ?? this.providerName,
        oidcToken: oidcToken ?? this.oidcToken);
  }

  V1OauthProviderParams copyWithWrapped(
      {Wrapped<String>? providerName, Wrapped<String>? oidcToken}) {
    return V1OauthProviderParams(
        providerName:
            (providerName != null ? providerName.value : this.providerName),
        oidcToken: (oidcToken != null ? oidcToken.value : this.oidcToken));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OauthRequest {
  const V1OauthRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1OauthRequest.fromJson(Map<String, dynamic> json) =>
      _$V1OauthRequestFromJson(json);

  static const toJsonFactory = _$V1OauthRequestToJson;
  Map<String, dynamic> toJson() => _$V1OauthRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1OauthRequestTypeToJson,
    fromJson: v1OauthRequestTypeFromJson,
  )
  final enums.V1OauthRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1OauthIntent parameters;
  static const fromJsonFactory = _$V1OauthRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OauthRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1OauthRequestExtension on V1OauthRequest {
  V1OauthRequest copyWith(
      {enums.V1OauthRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1OauthIntent? parameters}) {
    return V1OauthRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1OauthRequest copyWithWrapped(
      {Wrapped<enums.V1OauthRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1OauthIntent>? parameters}) {
    return V1OauthRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OauthResult {
  const V1OauthResult({
    required this.userId,
    required this.apiKeyId,
    required this.credentialBundle,
  });

  factory V1OauthResult.fromJson(Map<String, dynamic> json) =>
      _$V1OauthResultFromJson(json);

  static const toJsonFactory = _$V1OauthResultToJson;
  Map<String, dynamic> toJson() => _$V1OauthResultToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'apiKeyId')
  final String apiKeyId;
  @JsonKey(name: 'credentialBundle')
  final String credentialBundle;
  static const fromJsonFactory = _$V1OauthResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OauthResult &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)) &&
            (identical(other.credentialBundle, credentialBundle) ||
                const DeepCollectionEquality()
                    .equals(other.credentialBundle, credentialBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      const DeepCollectionEquality().hash(credentialBundle) ^
      runtimeType.hashCode;
}

extension $V1OauthResultExtension on V1OauthResult {
  V1OauthResult copyWith(
      {String? userId, String? apiKeyId, String? credentialBundle}) {
    return V1OauthResult(
        userId: userId ?? this.userId,
        apiKeyId: apiKeyId ?? this.apiKeyId,
        credentialBundle: credentialBundle ?? this.credentialBundle);
  }

  V1OauthResult copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<String>? apiKeyId,
      Wrapped<String>? credentialBundle}) {
    return V1OauthResult(
        userId: (userId != null ? userId.value : this.userId),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId),
        credentialBundle: (credentialBundle != null
            ? credentialBundle.value
            : this.credentialBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OrganizationData {
  const V1OrganizationData({
    this.organizationId,
    this.name,
    this.users,
    this.policies,
    this.privateKeys,
    this.invitations,
    this.tags,
    this.rootQuorum,
    this.features,
    this.wallets,
  });

  factory V1OrganizationData.fromJson(Map<String, dynamic> json) =>
      _$V1OrganizationDataFromJson(json);

  static const toJsonFactory = _$V1OrganizationDataToJson;
  Map<String, dynamic> toJson() => _$V1OrganizationDataToJson(this);

  @JsonKey(name: 'organizationId')
  final String? organizationId;
  @JsonKey(name: 'name')
  final String? name;
  @JsonKey(name: 'users', defaultValue: <V1User>[])
  final List<V1User>? users;
  @JsonKey(name: 'policies', defaultValue: <V1Policy>[])
  final List<V1Policy>? policies;
  @JsonKey(name: 'privateKeys', defaultValue: <V1PrivateKey>[])
  final List<V1PrivateKey>? privateKeys;
  @JsonKey(name: 'invitations', defaultValue: <V1Invitation>[])
  final List<V1Invitation>? invitations;
  @JsonKey(name: 'tags', defaultValue: <Datav1Tag>[])
  final List<Datav1Tag>? tags;
  @JsonKey(name: 'rootQuorum')
  final Externaldatav1Quorum? rootQuorum;
  @JsonKey(name: 'features', defaultValue: <V1Feature>[])
  final List<V1Feature>? features;
  @JsonKey(name: 'wallets', defaultValue: <V1Wallet>[])
  final List<V1Wallet>? wallets;
  static const fromJsonFactory = _$V1OrganizationDataFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OrganizationData &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.users, users) ||
                const DeepCollectionEquality().equals(other.users, users)) &&
            (identical(other.policies, policies) ||
                const DeepCollectionEquality()
                    .equals(other.policies, policies)) &&
            (identical(other.privateKeys, privateKeys) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeys, privateKeys)) &&
            (identical(other.invitations, invitations) ||
                const DeepCollectionEquality()
                    .equals(other.invitations, invitations)) &&
            (identical(other.tags, tags) ||
                const DeepCollectionEquality().equals(other.tags, tags)) &&
            (identical(other.rootQuorum, rootQuorum) ||
                const DeepCollectionEquality()
                    .equals(other.rootQuorum, rootQuorum)) &&
            (identical(other.features, features) ||
                const DeepCollectionEquality()
                    .equals(other.features, features)) &&
            (identical(other.wallets, wallets) ||
                const DeepCollectionEquality().equals(other.wallets, wallets)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(users) ^
      const DeepCollectionEquality().hash(policies) ^
      const DeepCollectionEquality().hash(privateKeys) ^
      const DeepCollectionEquality().hash(invitations) ^
      const DeepCollectionEquality().hash(tags) ^
      const DeepCollectionEquality().hash(rootQuorum) ^
      const DeepCollectionEquality().hash(features) ^
      const DeepCollectionEquality().hash(wallets) ^
      runtimeType.hashCode;
}

extension $V1OrganizationDataExtension on V1OrganizationData {
  V1OrganizationData copyWith(
      {String? organizationId,
      String? name,
      List<V1User>? users,
      List<V1Policy>? policies,
      List<V1PrivateKey>? privateKeys,
      List<V1Invitation>? invitations,
      List<Datav1Tag>? tags,
      Externaldatav1Quorum? rootQuorum,
      List<V1Feature>? features,
      List<V1Wallet>? wallets}) {
    return V1OrganizationData(
        organizationId: organizationId ?? this.organizationId,
        name: name ?? this.name,
        users: users ?? this.users,
        policies: policies ?? this.policies,
        privateKeys: privateKeys ?? this.privateKeys,
        invitations: invitations ?? this.invitations,
        tags: tags ?? this.tags,
        rootQuorum: rootQuorum ?? this.rootQuorum,
        features: features ?? this.features,
        wallets: wallets ?? this.wallets);
  }

  V1OrganizationData copyWithWrapped(
      {Wrapped<String?>? organizationId,
      Wrapped<String?>? name,
      Wrapped<List<V1User>?>? users,
      Wrapped<List<V1Policy>?>? policies,
      Wrapped<List<V1PrivateKey>?>? privateKeys,
      Wrapped<List<V1Invitation>?>? invitations,
      Wrapped<List<Datav1Tag>?>? tags,
      Wrapped<Externaldatav1Quorum?>? rootQuorum,
      Wrapped<List<V1Feature>?>? features,
      Wrapped<List<V1Wallet>?>? wallets}) {
    return V1OrganizationData(
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        name: (name != null ? name.value : this.name),
        users: (users != null ? users.value : this.users),
        policies: (policies != null ? policies.value : this.policies),
        privateKeys:
            (privateKeys != null ? privateKeys.value : this.privateKeys),
        invitations:
            (invitations != null ? invitations.value : this.invitations),
        tags: (tags != null ? tags.value : this.tags),
        rootQuorum: (rootQuorum != null ? rootQuorum.value : this.rootQuorum),
        features: (features != null ? features.value : this.features),
        wallets: (wallets != null ? wallets.value : this.wallets));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OtpAuthIntent {
  const V1OtpAuthIntent({
    required this.otpId,
    required this.otpCode,
    this.targetPublicKey,
    this.apiKeyName,
    this.expirationSeconds,
    this.invalidateExisting,
  });

  factory V1OtpAuthIntent.fromJson(Map<String, dynamic> json) =>
      _$V1OtpAuthIntentFromJson(json);

  static const toJsonFactory = _$V1OtpAuthIntentToJson;
  Map<String, dynamic> toJson() => _$V1OtpAuthIntentToJson(this);

  @JsonKey(name: 'otpId')
  final String otpId;
  @JsonKey(name: 'otpCode')
  final String otpCode;
  @JsonKey(name: 'targetPublicKey')
  final String? targetPublicKey;
  @JsonKey(name: 'apiKeyName')
  final String? apiKeyName;
  @JsonKey(name: 'expirationSeconds')
  final String? expirationSeconds;
  @JsonKey(name: 'invalidateExisting')
  final bool? invalidateExisting;
  static const fromJsonFactory = _$V1OtpAuthIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OtpAuthIntent &&
            (identical(other.otpId, otpId) ||
                const DeepCollectionEquality().equals(other.otpId, otpId)) &&
            (identical(other.otpCode, otpCode) ||
                const DeepCollectionEquality()
                    .equals(other.otpCode, otpCode)) &&
            (identical(other.targetPublicKey, targetPublicKey) ||
                const DeepCollectionEquality()
                    .equals(other.targetPublicKey, targetPublicKey)) &&
            (identical(other.apiKeyName, apiKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyName, apiKeyName)) &&
            (identical(other.expirationSeconds, expirationSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.expirationSeconds, expirationSeconds)) &&
            (identical(other.invalidateExisting, invalidateExisting) ||
                const DeepCollectionEquality()
                    .equals(other.invalidateExisting, invalidateExisting)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(otpId) ^
      const DeepCollectionEquality().hash(otpCode) ^
      const DeepCollectionEquality().hash(targetPublicKey) ^
      const DeepCollectionEquality().hash(apiKeyName) ^
      const DeepCollectionEquality().hash(expirationSeconds) ^
      const DeepCollectionEquality().hash(invalidateExisting) ^
      runtimeType.hashCode;
}

extension $V1OtpAuthIntentExtension on V1OtpAuthIntent {
  V1OtpAuthIntent copyWith(
      {String? otpId,
      String? otpCode,
      String? targetPublicKey,
      String? apiKeyName,
      String? expirationSeconds,
      bool? invalidateExisting}) {
    return V1OtpAuthIntent(
        otpId: otpId ?? this.otpId,
        otpCode: otpCode ?? this.otpCode,
        targetPublicKey: targetPublicKey ?? this.targetPublicKey,
        apiKeyName: apiKeyName ?? this.apiKeyName,
        expirationSeconds: expirationSeconds ?? this.expirationSeconds,
        invalidateExisting: invalidateExisting ?? this.invalidateExisting);
  }

  V1OtpAuthIntent copyWithWrapped(
      {Wrapped<String>? otpId,
      Wrapped<String>? otpCode,
      Wrapped<String?>? targetPublicKey,
      Wrapped<String?>? apiKeyName,
      Wrapped<String?>? expirationSeconds,
      Wrapped<bool?>? invalidateExisting}) {
    return V1OtpAuthIntent(
        otpId: (otpId != null ? otpId.value : this.otpId),
        otpCode: (otpCode != null ? otpCode.value : this.otpCode),
        targetPublicKey: (targetPublicKey != null
            ? targetPublicKey.value
            : this.targetPublicKey),
        apiKeyName: (apiKeyName != null ? apiKeyName.value : this.apiKeyName),
        expirationSeconds: (expirationSeconds != null
            ? expirationSeconds.value
            : this.expirationSeconds),
        invalidateExisting: (invalidateExisting != null
            ? invalidateExisting.value
            : this.invalidateExisting));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OtpAuthRequest {
  const V1OtpAuthRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1OtpAuthRequest.fromJson(Map<String, dynamic> json) =>
      _$V1OtpAuthRequestFromJson(json);

  static const toJsonFactory = _$V1OtpAuthRequestToJson;
  Map<String, dynamic> toJson() => _$V1OtpAuthRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1OtpAuthRequestTypeToJson,
    fromJson: v1OtpAuthRequestTypeFromJson,
  )
  final enums.V1OtpAuthRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1OtpAuthIntent parameters;
  static const fromJsonFactory = _$V1OtpAuthRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OtpAuthRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1OtpAuthRequestExtension on V1OtpAuthRequest {
  V1OtpAuthRequest copyWith(
      {enums.V1OtpAuthRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1OtpAuthIntent? parameters}) {
    return V1OtpAuthRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1OtpAuthRequest copyWithWrapped(
      {Wrapped<enums.V1OtpAuthRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1OtpAuthIntent>? parameters}) {
    return V1OtpAuthRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1OtpAuthResult {
  const V1OtpAuthResult({
    required this.userId,
    this.apiKeyId,
    this.credentialBundle,
  });

  factory V1OtpAuthResult.fromJson(Map<String, dynamic> json) =>
      _$V1OtpAuthResultFromJson(json);

  static const toJsonFactory = _$V1OtpAuthResultToJson;
  Map<String, dynamic> toJson() => _$V1OtpAuthResultToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'apiKeyId')
  final String? apiKeyId;
  @JsonKey(name: 'credentialBundle')
  final String? credentialBundle;
  static const fromJsonFactory = _$V1OtpAuthResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1OtpAuthResult &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.apiKeyId, apiKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeyId, apiKeyId)) &&
            (identical(other.credentialBundle, credentialBundle) ||
                const DeepCollectionEquality()
                    .equals(other.credentialBundle, credentialBundle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(apiKeyId) ^
      const DeepCollectionEquality().hash(credentialBundle) ^
      runtimeType.hashCode;
}

extension $V1OtpAuthResultExtension on V1OtpAuthResult {
  V1OtpAuthResult copyWith(
      {String? userId, String? apiKeyId, String? credentialBundle}) {
    return V1OtpAuthResult(
        userId: userId ?? this.userId,
        apiKeyId: apiKeyId ?? this.apiKeyId,
        credentialBundle: credentialBundle ?? this.credentialBundle);
  }

  V1OtpAuthResult copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<String?>? apiKeyId,
      Wrapped<String?>? credentialBundle}) {
    return V1OtpAuthResult(
        userId: (userId != null ? userId.value : this.userId),
        apiKeyId: (apiKeyId != null ? apiKeyId.value : this.apiKeyId),
        credentialBundle: (credentialBundle != null
            ? credentialBundle.value
            : this.credentialBundle));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Pagination {
  const V1Pagination({
    this.limit,
    this.before,
    this.after,
  });

  factory V1Pagination.fromJson(Map<String, dynamic> json) =>
      _$V1PaginationFromJson(json);

  static const toJsonFactory = _$V1PaginationToJson;
  Map<String, dynamic> toJson() => _$V1PaginationToJson(this);

  @JsonKey(name: 'limit')
  final String? limit;
  @JsonKey(name: 'before')
  final String? before;
  @JsonKey(name: 'after')
  final String? after;
  static const fromJsonFactory = _$V1PaginationFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Pagination &&
            (identical(other.limit, limit) ||
                const DeepCollectionEquality().equals(other.limit, limit)) &&
            (identical(other.before, before) ||
                const DeepCollectionEquality().equals(other.before, before)) &&
            (identical(other.after, after) ||
                const DeepCollectionEquality().equals(other.after, after)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(limit) ^
      const DeepCollectionEquality().hash(before) ^
      const DeepCollectionEquality().hash(after) ^
      runtimeType.hashCode;
}

extension $V1PaginationExtension on V1Pagination {
  V1Pagination copyWith({String? limit, String? before, String? after}) {
    return V1Pagination(
        limit: limit ?? this.limit,
        before: before ?? this.before,
        after: after ?? this.after);
  }

  V1Pagination copyWithWrapped(
      {Wrapped<String?>? limit,
      Wrapped<String?>? before,
      Wrapped<String?>? after}) {
    return V1Pagination(
        limit: (limit != null ? limit.value : this.limit),
        before: (before != null ? before.value : this.before),
        after: (after != null ? after.value : this.after));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Policy {
  const V1Policy({
    required this.policyId,
    required this.policyName,
    required this.effect,
    required this.createdAt,
    required this.updatedAt,
    required this.notes,
    required this.consensus,
    required this.condition,
  });

  factory V1Policy.fromJson(Map<String, dynamic> json) =>
      _$V1PolicyFromJson(json);

  static const toJsonFactory = _$V1PolicyToJson;
  Map<String, dynamic> toJson() => _$V1PolicyToJson(this);

  @JsonKey(name: 'policyId')
  final String policyId;
  @JsonKey(name: 'policyName')
  final String policyName;
  @JsonKey(
    name: 'effect',
    toJson: v1EffectToJson,
    fromJson: v1EffectFromJson,
  )
  final enums.V1Effect effect;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  @JsonKey(name: 'notes')
  final String notes;
  @JsonKey(name: 'consensus')
  final String consensus;
  @JsonKey(name: 'condition')
  final String condition;
  static const fromJsonFactory = _$V1PolicyFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Policy &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)) &&
            (identical(other.policyName, policyName) ||
                const DeepCollectionEquality()
                    .equals(other.policyName, policyName)) &&
            (identical(other.effect, effect) ||
                const DeepCollectionEquality().equals(other.effect, effect)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)) &&
            (identical(other.consensus, consensus) ||
                const DeepCollectionEquality()
                    .equals(other.consensus, consensus)) &&
            (identical(other.condition, condition) ||
                const DeepCollectionEquality()
                    .equals(other.condition, condition)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyId) ^
      const DeepCollectionEquality().hash(policyName) ^
      const DeepCollectionEquality().hash(effect) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      const DeepCollectionEquality().hash(notes) ^
      const DeepCollectionEquality().hash(consensus) ^
      const DeepCollectionEquality().hash(condition) ^
      runtimeType.hashCode;
}

extension $V1PolicyExtension on V1Policy {
  V1Policy copyWith(
      {String? policyId,
      String? policyName,
      enums.V1Effect? effect,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt,
      String? notes,
      String? consensus,
      String? condition}) {
    return V1Policy(
        policyId: policyId ?? this.policyId,
        policyName: policyName ?? this.policyName,
        effect: effect ?? this.effect,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        notes: notes ?? this.notes,
        consensus: consensus ?? this.consensus,
        condition: condition ?? this.condition);
  }

  V1Policy copyWithWrapped(
      {Wrapped<String>? policyId,
      Wrapped<String>? policyName,
      Wrapped<enums.V1Effect>? effect,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt,
      Wrapped<String>? notes,
      Wrapped<String>? consensus,
      Wrapped<String>? condition}) {
    return V1Policy(
        policyId: (policyId != null ? policyId.value : this.policyId),
        policyName: (policyName != null ? policyName.value : this.policyName),
        effect: (effect != null ? effect.value : this.effect),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        notes: (notes != null ? notes.value : this.notes),
        consensus: (consensus != null ? consensus.value : this.consensus),
        condition: (condition != null ? condition.value : this.condition));
  }
}

@JsonSerializable(explicitToJson: true)
class V1PrivateKey {
  const V1PrivateKey({
    required this.privateKeyId,
    required this.publicKey,
    required this.privateKeyName,
    required this.curve,
    required this.addresses,
    required this.privateKeyTags,
    required this.createdAt,
    required this.updatedAt,
    required this.exported,
    required this.imported,
  });

  factory V1PrivateKey.fromJson(Map<String, dynamic> json) =>
      _$V1PrivateKeyFromJson(json);

  static const toJsonFactory = _$V1PrivateKeyToJson;
  Map<String, dynamic> toJson() => _$V1PrivateKeyToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  @JsonKey(name: 'publicKey')
  final String publicKey;
  @JsonKey(name: 'privateKeyName')
  final String privateKeyName;
  @JsonKey(
    name: 'curve',
    toJson: v1CurveToJson,
    fromJson: v1CurveFromJson,
  )
  final enums.V1Curve curve;
  @JsonKey(name: 'addresses', defaultValue: <Externaldatav1Address>[])
  final List<Externaldatav1Address> addresses;
  @JsonKey(name: 'privateKeyTags', defaultValue: <String>[])
  final List<String> privateKeyTags;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  @JsonKey(name: 'exported')
  final bool exported;
  @JsonKey(name: 'imported')
  final bool imported;
  static const fromJsonFactory = _$V1PrivateKeyFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1PrivateKey &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.publicKey, publicKey) ||
                const DeepCollectionEquality()
                    .equals(other.publicKey, publicKey)) &&
            (identical(other.privateKeyName, privateKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyName, privateKeyName)) &&
            (identical(other.curve, curve) ||
                const DeepCollectionEquality().equals(other.curve, curve)) &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)) &&
            (identical(other.privateKeyTags, privateKeyTags) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTags, privateKeyTags)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)) &&
            (identical(other.exported, exported) ||
                const DeepCollectionEquality()
                    .equals(other.exported, exported)) &&
            (identical(other.imported, imported) ||
                const DeepCollectionEquality()
                    .equals(other.imported, imported)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(publicKey) ^
      const DeepCollectionEquality().hash(privateKeyName) ^
      const DeepCollectionEquality().hash(curve) ^
      const DeepCollectionEquality().hash(addresses) ^
      const DeepCollectionEquality().hash(privateKeyTags) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      const DeepCollectionEquality().hash(exported) ^
      const DeepCollectionEquality().hash(imported) ^
      runtimeType.hashCode;
}

extension $V1PrivateKeyExtension on V1PrivateKey {
  V1PrivateKey copyWith(
      {String? privateKeyId,
      String? publicKey,
      String? privateKeyName,
      enums.V1Curve? curve,
      List<Externaldatav1Address>? addresses,
      List<String>? privateKeyTags,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt,
      bool? exported,
      bool? imported}) {
    return V1PrivateKey(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        publicKey: publicKey ?? this.publicKey,
        privateKeyName: privateKeyName ?? this.privateKeyName,
        curve: curve ?? this.curve,
        addresses: addresses ?? this.addresses,
        privateKeyTags: privateKeyTags ?? this.privateKeyTags,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        exported: exported ?? this.exported,
        imported: imported ?? this.imported);
  }

  V1PrivateKey copyWithWrapped(
      {Wrapped<String>? privateKeyId,
      Wrapped<String>? publicKey,
      Wrapped<String>? privateKeyName,
      Wrapped<enums.V1Curve>? curve,
      Wrapped<List<Externaldatav1Address>>? addresses,
      Wrapped<List<String>>? privateKeyTags,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt,
      Wrapped<bool>? exported,
      Wrapped<bool>? imported}) {
    return V1PrivateKey(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        publicKey: (publicKey != null ? publicKey.value : this.publicKey),
        privateKeyName: (privateKeyName != null
            ? privateKeyName.value
            : this.privateKeyName),
        curve: (curve != null ? curve.value : this.curve),
        addresses: (addresses != null ? addresses.value : this.addresses),
        privateKeyTags: (privateKeyTags != null
            ? privateKeyTags.value
            : this.privateKeyTags),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        exported: (exported != null ? exported.value : this.exported),
        imported: (imported != null ? imported.value : this.imported));
  }
}

@JsonSerializable(explicitToJson: true)
class V1PrivateKeyParams {
  const V1PrivateKeyParams({
    required this.privateKeyName,
    required this.curve,
    required this.privateKeyTags,
    required this.addressFormats,
  });

  factory V1PrivateKeyParams.fromJson(Map<String, dynamic> json) =>
      _$V1PrivateKeyParamsFromJson(json);

  static const toJsonFactory = _$V1PrivateKeyParamsToJson;
  Map<String, dynamic> toJson() => _$V1PrivateKeyParamsToJson(this);

  @JsonKey(name: 'privateKeyName')
  final String privateKeyName;
  @JsonKey(
    name: 'curve',
    toJson: v1CurveToJson,
    fromJson: v1CurveFromJson,
  )
  final enums.V1Curve curve;
  @JsonKey(name: 'privateKeyTags', defaultValue: <String>[])
  final List<String> privateKeyTags;
  @JsonKey(
    name: 'addressFormats',
    toJson: v1AddressFormatListToJson,
    fromJson: v1AddressFormatListFromJson,
  )
  final List<enums.V1AddressFormat> addressFormats;
  static const fromJsonFactory = _$V1PrivateKeyParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1PrivateKeyParams &&
            (identical(other.privateKeyName, privateKeyName) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyName, privateKeyName)) &&
            (identical(other.curve, curve) ||
                const DeepCollectionEquality().equals(other.curve, curve)) &&
            (identical(other.privateKeyTags, privateKeyTags) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTags, privateKeyTags)) &&
            (identical(other.addressFormats, addressFormats) ||
                const DeepCollectionEquality()
                    .equals(other.addressFormats, addressFormats)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyName) ^
      const DeepCollectionEquality().hash(curve) ^
      const DeepCollectionEquality().hash(privateKeyTags) ^
      const DeepCollectionEquality().hash(addressFormats) ^
      runtimeType.hashCode;
}

extension $V1PrivateKeyParamsExtension on V1PrivateKeyParams {
  V1PrivateKeyParams copyWith(
      {String? privateKeyName,
      enums.V1Curve? curve,
      List<String>? privateKeyTags,
      List<enums.V1AddressFormat>? addressFormats}) {
    return V1PrivateKeyParams(
        privateKeyName: privateKeyName ?? this.privateKeyName,
        curve: curve ?? this.curve,
        privateKeyTags: privateKeyTags ?? this.privateKeyTags,
        addressFormats: addressFormats ?? this.addressFormats);
  }

  V1PrivateKeyParams copyWithWrapped(
      {Wrapped<String>? privateKeyName,
      Wrapped<enums.V1Curve>? curve,
      Wrapped<List<String>>? privateKeyTags,
      Wrapped<List<enums.V1AddressFormat>>? addressFormats}) {
    return V1PrivateKeyParams(
        privateKeyName: (privateKeyName != null
            ? privateKeyName.value
            : this.privateKeyName),
        curve: (curve != null ? curve.value : this.curve),
        privateKeyTags: (privateKeyTags != null
            ? privateKeyTags.value
            : this.privateKeyTags),
        addressFormats: (addressFormats != null
            ? addressFormats.value
            : this.addressFormats));
  }
}

@JsonSerializable(explicitToJson: true)
class V1PrivateKeyResult {
  const V1PrivateKeyResult({
    this.privateKeyId,
    this.addresses,
  });

  factory V1PrivateKeyResult.fromJson(Map<String, dynamic> json) =>
      _$V1PrivateKeyResultFromJson(json);

  static const toJsonFactory = _$V1PrivateKeyResultToJson;
  Map<String, dynamic> toJson() => _$V1PrivateKeyResultToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String? privateKeyId;
  @JsonKey(name: 'addresses', defaultValue: <Immutableactivityv1Address>[])
  final List<Immutableactivityv1Address>? addresses;
  static const fromJsonFactory = _$V1PrivateKeyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1PrivateKeyResult &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(addresses) ^
      runtimeType.hashCode;
}

extension $V1PrivateKeyResultExtension on V1PrivateKeyResult {
  V1PrivateKeyResult copyWith(
      {String? privateKeyId, List<Immutableactivityv1Address>? addresses}) {
    return V1PrivateKeyResult(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        addresses: addresses ?? this.addresses);
  }

  V1PrivateKeyResult copyWithWrapped(
      {Wrapped<String?>? privateKeyId,
      Wrapped<List<Immutableactivityv1Address>?>? addresses}) {
    return V1PrivateKeyResult(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        addresses: (addresses != null ? addresses.value : this.addresses));
  }
}

@JsonSerializable(explicitToJson: true)
class V1PublicKeyCredentialWithAttestation {
  const V1PublicKeyCredentialWithAttestation({
    required this.id,
    required this.type,
    required this.rawId,
    this.authenticatorAttachment,
    required this.response,
    required this.clientExtensionResults,
  });

  factory V1PublicKeyCredentialWithAttestation.fromJson(
          Map<String, dynamic> json) =>
      _$V1PublicKeyCredentialWithAttestationFromJson(json);

  static const toJsonFactory = _$V1PublicKeyCredentialWithAttestationToJson;
  Map<String, dynamic> toJson() =>
      _$V1PublicKeyCredentialWithAttestationToJson(this);

  @JsonKey(name: 'id')
  final String id;
  @JsonKey(
    name: 'type',
    toJson: v1PublicKeyCredentialWithAttestationTypeToJson,
    fromJson: v1PublicKeyCredentialWithAttestationTypeFromJson,
  )
  final enums.V1PublicKeyCredentialWithAttestationType type;
  @JsonKey(name: 'rawId')
  final String rawId;
  @JsonKey(
    name: 'authenticatorAttachment',
    toJson:
        v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentNullableToJson,
    fromJson:
        v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentNullableFromJson,
  )
  final enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?
      authenticatorAttachment;
  @JsonKey(name: 'response')
  final V1AuthenticatorAttestationResponse response;
  @JsonKey(name: 'clientExtensionResults')
  final V1SimpleClientExtensionResults clientExtensionResults;
  static const fromJsonFactory = _$V1PublicKeyCredentialWithAttestationFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1PublicKeyCredentialWithAttestation &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.rawId, rawId) ||
                const DeepCollectionEquality().equals(other.rawId, rawId)) &&
            (identical(
                    other.authenticatorAttachment, authenticatorAttachment) ||
                const DeepCollectionEquality().equals(
                    other.authenticatorAttachment, authenticatorAttachment)) &&
            (identical(other.response, response) ||
                const DeepCollectionEquality()
                    .equals(other.response, response)) &&
            (identical(other.clientExtensionResults, clientExtensionResults) ||
                const DeepCollectionEquality().equals(
                    other.clientExtensionResults, clientExtensionResults)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(rawId) ^
      const DeepCollectionEquality().hash(authenticatorAttachment) ^
      const DeepCollectionEquality().hash(response) ^
      const DeepCollectionEquality().hash(clientExtensionResults) ^
      runtimeType.hashCode;
}

extension $V1PublicKeyCredentialWithAttestationExtension
    on V1PublicKeyCredentialWithAttestation {
  V1PublicKeyCredentialWithAttestation copyWith(
      {String? id,
      enums.V1PublicKeyCredentialWithAttestationType? type,
      String? rawId,
      enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?
          authenticatorAttachment,
      V1AuthenticatorAttestationResponse? response,
      V1SimpleClientExtensionResults? clientExtensionResults}) {
    return V1PublicKeyCredentialWithAttestation(
        id: id ?? this.id,
        type: type ?? this.type,
        rawId: rawId ?? this.rawId,
        authenticatorAttachment:
            authenticatorAttachment ?? this.authenticatorAttachment,
        response: response ?? this.response,
        clientExtensionResults:
            clientExtensionResults ?? this.clientExtensionResults);
  }

  V1PublicKeyCredentialWithAttestation copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<enums.V1PublicKeyCredentialWithAttestationType>? type,
      Wrapped<String>? rawId,
      Wrapped<
              enums
              .V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?>?
          authenticatorAttachment,
      Wrapped<V1AuthenticatorAttestationResponse>? response,
      Wrapped<V1SimpleClientExtensionResults>? clientExtensionResults}) {
    return V1PublicKeyCredentialWithAttestation(
        id: (id != null ? id.value : this.id),
        type: (type != null ? type.value : this.type),
        rawId: (rawId != null ? rawId.value : this.rawId),
        authenticatorAttachment: (authenticatorAttachment != null
            ? authenticatorAttachment.value
            : this.authenticatorAttachment),
        response: (response != null ? response.value : this.response),
        clientExtensionResults: (clientExtensionResults != null
            ? clientExtensionResults.value
            : this.clientExtensionResults));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RecoverUserIntent {
  const V1RecoverUserIntent({
    required this.authenticator,
    required this.userId,
  });

  factory V1RecoverUserIntent.fromJson(Map<String, dynamic> json) =>
      _$V1RecoverUserIntentFromJson(json);

  static const toJsonFactory = _$V1RecoverUserIntentToJson;
  Map<String, dynamic> toJson() => _$V1RecoverUserIntentToJson(this);

  @JsonKey(name: 'authenticator')
  final V1AuthenticatorParamsV2 authenticator;
  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1RecoverUserIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RecoverUserIntent &&
            (identical(other.authenticator, authenticator) ||
                const DeepCollectionEquality()
                    .equals(other.authenticator, authenticator)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticator) ^
      const DeepCollectionEquality().hash(userId) ^
      runtimeType.hashCode;
}

extension $V1RecoverUserIntentExtension on V1RecoverUserIntent {
  V1RecoverUserIntent copyWith(
      {V1AuthenticatorParamsV2? authenticator, String? userId}) {
    return V1RecoverUserIntent(
        authenticator: authenticator ?? this.authenticator,
        userId: userId ?? this.userId);
  }

  V1RecoverUserIntent copyWithWrapped(
      {Wrapped<V1AuthenticatorParamsV2>? authenticator,
      Wrapped<String>? userId}) {
    return V1RecoverUserIntent(
        authenticator:
            (authenticator != null ? authenticator.value : this.authenticator),
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RecoverUserRequest {
  const V1RecoverUserRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1RecoverUserRequest.fromJson(Map<String, dynamic> json) =>
      _$V1RecoverUserRequestFromJson(json);

  static const toJsonFactory = _$V1RecoverUserRequestToJson;
  Map<String, dynamic> toJson() => _$V1RecoverUserRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1RecoverUserRequestTypeToJson,
    fromJson: v1RecoverUserRequestTypeFromJson,
  )
  final enums.V1RecoverUserRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1RecoverUserIntent parameters;
  static const fromJsonFactory = _$V1RecoverUserRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RecoverUserRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1RecoverUserRequestExtension on V1RecoverUserRequest {
  V1RecoverUserRequest copyWith(
      {enums.V1RecoverUserRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1RecoverUserIntent? parameters}) {
    return V1RecoverUserRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1RecoverUserRequest copyWithWrapped(
      {Wrapped<enums.V1RecoverUserRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1RecoverUserIntent>? parameters}) {
    return V1RecoverUserRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RecoverUserResult {
  const V1RecoverUserResult({
    required this.authenticatorId,
  });

  factory V1RecoverUserResult.fromJson(Map<String, dynamic> json) =>
      _$V1RecoverUserResultFromJson(json);

  static const toJsonFactory = _$V1RecoverUserResultToJson;
  Map<String, dynamic> toJson() => _$V1RecoverUserResultToJson(this);

  @JsonKey(name: 'authenticatorId', defaultValue: <String>[])
  final List<String> authenticatorId;
  static const fromJsonFactory = _$V1RecoverUserResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RecoverUserResult &&
            (identical(other.authenticatorId, authenticatorId) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorId, authenticatorId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(authenticatorId) ^
      runtimeType.hashCode;
}

extension $V1RecoverUserResultExtension on V1RecoverUserResult {
  V1RecoverUserResult copyWith({List<String>? authenticatorId}) {
    return V1RecoverUserResult(
        authenticatorId: authenticatorId ?? this.authenticatorId);
  }

  V1RecoverUserResult copyWithWrapped(
      {Wrapped<List<String>>? authenticatorId}) {
    return V1RecoverUserResult(
        authenticatorId: (authenticatorId != null
            ? authenticatorId.value
            : this.authenticatorId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RejectActivityIntent {
  const V1RejectActivityIntent({
    required this.fingerprint,
  });

  factory V1RejectActivityIntent.fromJson(Map<String, dynamic> json) =>
      _$V1RejectActivityIntentFromJson(json);

  static const toJsonFactory = _$V1RejectActivityIntentToJson;
  Map<String, dynamic> toJson() => _$V1RejectActivityIntentToJson(this);

  @JsonKey(name: 'fingerprint')
  final String fingerprint;
  static const fromJsonFactory = _$V1RejectActivityIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RejectActivityIntent &&
            (identical(other.fingerprint, fingerprint) ||
                const DeepCollectionEquality()
                    .equals(other.fingerprint, fingerprint)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fingerprint) ^ runtimeType.hashCode;
}

extension $V1RejectActivityIntentExtension on V1RejectActivityIntent {
  V1RejectActivityIntent copyWith({String? fingerprint}) {
    return V1RejectActivityIntent(fingerprint: fingerprint ?? this.fingerprint);
  }

  V1RejectActivityIntent copyWithWrapped({Wrapped<String>? fingerprint}) {
    return V1RejectActivityIntent(
        fingerprint:
            (fingerprint != null ? fingerprint.value : this.fingerprint));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RejectActivityRequest {
  const V1RejectActivityRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1RejectActivityRequest.fromJson(Map<String, dynamic> json) =>
      _$V1RejectActivityRequestFromJson(json);

  static const toJsonFactory = _$V1RejectActivityRequestToJson;
  Map<String, dynamic> toJson() => _$V1RejectActivityRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1RejectActivityRequestTypeToJson,
    fromJson: v1RejectActivityRequestTypeFromJson,
  )
  final enums.V1RejectActivityRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1RejectActivityIntent parameters;
  static const fromJsonFactory = _$V1RejectActivityRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RejectActivityRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1RejectActivityRequestExtension on V1RejectActivityRequest {
  V1RejectActivityRequest copyWith(
      {enums.V1RejectActivityRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1RejectActivityIntent? parameters}) {
    return V1RejectActivityRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1RejectActivityRequest copyWithWrapped(
      {Wrapped<enums.V1RejectActivityRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1RejectActivityIntent>? parameters}) {
    return V1RejectActivityRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RemoveOrganizationFeatureIntent {
  const V1RemoveOrganizationFeatureIntent({
    required this.name,
  });

  factory V1RemoveOrganizationFeatureIntent.fromJson(
          Map<String, dynamic> json) =>
      _$V1RemoveOrganizationFeatureIntentFromJson(json);

  static const toJsonFactory = _$V1RemoveOrganizationFeatureIntentToJson;
  Map<String, dynamic> toJson() =>
      _$V1RemoveOrganizationFeatureIntentToJson(this);

  @JsonKey(
    name: 'name',
    toJson: v1FeatureNameToJson,
    fromJson: v1FeatureNameFromJson,
  )
  final enums.V1FeatureName name;
  static const fromJsonFactory = _$V1RemoveOrganizationFeatureIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RemoveOrganizationFeatureIntent &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^ runtimeType.hashCode;
}

extension $V1RemoveOrganizationFeatureIntentExtension
    on V1RemoveOrganizationFeatureIntent {
  V1RemoveOrganizationFeatureIntent copyWith({enums.V1FeatureName? name}) {
    return V1RemoveOrganizationFeatureIntent(name: name ?? this.name);
  }

  V1RemoveOrganizationFeatureIntent copyWithWrapped(
      {Wrapped<enums.V1FeatureName>? name}) {
    return V1RemoveOrganizationFeatureIntent(
        name: (name != null ? name.value : this.name));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RemoveOrganizationFeatureRequest {
  const V1RemoveOrganizationFeatureRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1RemoveOrganizationFeatureRequest.fromJson(
          Map<String, dynamic> json) =>
      _$V1RemoveOrganizationFeatureRequestFromJson(json);

  static const toJsonFactory = _$V1RemoveOrganizationFeatureRequestToJson;
  Map<String, dynamic> toJson() =>
      _$V1RemoveOrganizationFeatureRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1RemoveOrganizationFeatureRequestTypeToJson,
    fromJson: v1RemoveOrganizationFeatureRequestTypeFromJson,
  )
  final enums.V1RemoveOrganizationFeatureRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1RemoveOrganizationFeatureIntent parameters;
  static const fromJsonFactory = _$V1RemoveOrganizationFeatureRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RemoveOrganizationFeatureRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1RemoveOrganizationFeatureRequestExtension
    on V1RemoveOrganizationFeatureRequest {
  V1RemoveOrganizationFeatureRequest copyWith(
      {enums.V1RemoveOrganizationFeatureRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1RemoveOrganizationFeatureIntent? parameters}) {
    return V1RemoveOrganizationFeatureRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1RemoveOrganizationFeatureRequest copyWithWrapped(
      {Wrapped<enums.V1RemoveOrganizationFeatureRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1RemoveOrganizationFeatureIntent>? parameters}) {
    return V1RemoveOrganizationFeatureRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RemoveOrganizationFeatureResult {
  const V1RemoveOrganizationFeatureResult({
    required this.features,
  });

  factory V1RemoveOrganizationFeatureResult.fromJson(
          Map<String, dynamic> json) =>
      _$V1RemoveOrganizationFeatureResultFromJson(json);

  static const toJsonFactory = _$V1RemoveOrganizationFeatureResultToJson;
  Map<String, dynamic> toJson() =>
      _$V1RemoveOrganizationFeatureResultToJson(this);

  @JsonKey(name: 'features', defaultValue: <V1Feature>[])
  final List<V1Feature> features;
  static const fromJsonFactory = _$V1RemoveOrganizationFeatureResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RemoveOrganizationFeatureResult &&
            (identical(other.features, features) ||
                const DeepCollectionEquality()
                    .equals(other.features, features)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(features) ^ runtimeType.hashCode;
}

extension $V1RemoveOrganizationFeatureResultExtension
    on V1RemoveOrganizationFeatureResult {
  V1RemoveOrganizationFeatureResult copyWith({List<V1Feature>? features}) {
    return V1RemoveOrganizationFeatureResult(
        features: features ?? this.features);
  }

  V1RemoveOrganizationFeatureResult copyWithWrapped(
      {Wrapped<List<V1Feature>>? features}) {
    return V1RemoveOrganizationFeatureResult(
        features: (features != null ? features.value : this.features));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Result {
  const V1Result({
    this.createOrganizationResult,
    this.createAuthenticatorsResult,
    this.createUsersResult,
    this.createPrivateKeysResult,
    this.createInvitationsResult,
    this.acceptInvitationResult,
    this.signRawPayloadResult,
    this.createPolicyResult,
    this.disablePrivateKeyResult,
    this.deleteUsersResult,
    this.deleteAuthenticatorsResult,
    this.deleteInvitationResult,
    this.deleteOrganizationResult,
    this.deletePolicyResult,
    this.createUserTagResult,
    this.deleteUserTagsResult,
    this.signTransactionResult,
    this.deleteApiKeysResult,
    this.createApiKeysResult,
    this.createPrivateKeyTagResult,
    this.deletePrivateKeyTagsResult,
    this.setPaymentMethodResult,
    this.activateBillingTierResult,
    this.deletePaymentMethodResult,
    this.createApiOnlyUsersResult,
    this.updateRootQuorumResult,
    this.updateUserTagResult,
    this.updatePrivateKeyTagResult,
    this.createSubOrganizationResult,
    this.updateAllowedOriginsResult,
    this.createPrivateKeysResultV2,
    this.updateUserResult,
    this.updatePolicyResult,
    this.createSubOrganizationResultV3,
    this.createWalletResult,
    this.createWalletAccountsResult,
    this.initUserEmailRecoveryResult,
    this.recoverUserResult,
    this.setOrganizationFeatureResult,
    this.removeOrganizationFeatureResult,
    this.exportPrivateKeyResult,
    this.exportWalletResult,
    this.createSubOrganizationResultV4,
    this.emailAuthResult,
    this.exportWalletAccountResult,
    this.initImportWalletResult,
    this.importWalletResult,
    this.initImportPrivateKeyResult,
    this.importPrivateKeyResult,
    this.createPoliciesResult,
    this.signRawPayloadsResult,
    this.createReadOnlySessionResult,
    this.createOauthProvidersResult,
    this.deleteOauthProvidersResult,
    this.createSubOrganizationResultV5,
    this.oauthResult,
    this.createReadWriteSessionResult,
    this.createSubOrganizationResultV6,
    this.deletePrivateKeysResult,
    this.deleteWalletsResult,
    this.createReadWriteSessionResultV2,
    this.deleteSubOrganizationResult,
    this.initOtpAuthResult,
    this.otpAuthResult,
    this.createSubOrganizationResultV7,
  });

  factory V1Result.fromJson(Map<String, dynamic> json) =>
      _$V1ResultFromJson(json);

  static const toJsonFactory = _$V1ResultToJson;
  Map<String, dynamic> toJson() => _$V1ResultToJson(this);

  @JsonKey(name: 'createOrganizationResult')
  final V1CreateOrganizationResult? createOrganizationResult;
  @JsonKey(name: 'createAuthenticatorsResult')
  final V1CreateAuthenticatorsResult? createAuthenticatorsResult;
  @JsonKey(name: 'createUsersResult')
  final V1CreateUsersResult? createUsersResult;
  @JsonKey(name: 'createPrivateKeysResult')
  final V1CreatePrivateKeysResult? createPrivateKeysResult;
  @JsonKey(name: 'createInvitationsResult')
  final V1CreateInvitationsResult? createInvitationsResult;
  @JsonKey(name: 'acceptInvitationResult')
  final V1AcceptInvitationResult? acceptInvitationResult;
  @JsonKey(name: 'signRawPayloadResult')
  final V1SignRawPayloadResult? signRawPayloadResult;
  @JsonKey(name: 'createPolicyResult')
  final V1CreatePolicyResult? createPolicyResult;
  @JsonKey(name: 'disablePrivateKeyResult')
  final V1DisablePrivateKeyResult? disablePrivateKeyResult;
  @JsonKey(name: 'deleteUsersResult')
  final V1DeleteUsersResult? deleteUsersResult;
  @JsonKey(name: 'deleteAuthenticatorsResult')
  final V1DeleteAuthenticatorsResult? deleteAuthenticatorsResult;
  @JsonKey(name: 'deleteInvitationResult')
  final V1DeleteInvitationResult? deleteInvitationResult;
  @JsonKey(name: 'deleteOrganizationResult')
  final V1DeleteOrganizationResult? deleteOrganizationResult;
  @JsonKey(name: 'deletePolicyResult')
  final V1DeletePolicyResult? deletePolicyResult;
  @JsonKey(name: 'createUserTagResult')
  final V1CreateUserTagResult? createUserTagResult;
  @JsonKey(name: 'deleteUserTagsResult')
  final V1DeleteUserTagsResult? deleteUserTagsResult;
  @JsonKey(name: 'signTransactionResult')
  final V1SignTransactionResult? signTransactionResult;
  @JsonKey(name: 'deleteApiKeysResult')
  final V1DeleteApiKeysResult? deleteApiKeysResult;
  @JsonKey(name: 'createApiKeysResult')
  final V1CreateApiKeysResult? createApiKeysResult;
  @JsonKey(name: 'createPrivateKeyTagResult')
  final V1CreatePrivateKeyTagResult? createPrivateKeyTagResult;
  @JsonKey(name: 'deletePrivateKeyTagsResult')
  final V1DeletePrivateKeyTagsResult? deletePrivateKeyTagsResult;
  @JsonKey(name: 'setPaymentMethodResult')
  final BillingSetPaymentMethodResult? setPaymentMethodResult;
  @JsonKey(name: 'activateBillingTierResult')
  final BillingActivateBillingTierResult? activateBillingTierResult;
  @JsonKey(name: 'deletePaymentMethodResult')
  final BillingDeletePaymentMethodResult? deletePaymentMethodResult;
  @JsonKey(name: 'createApiOnlyUsersResult')
  final V1CreateApiOnlyUsersResult? createApiOnlyUsersResult;
  @JsonKey(name: 'updateRootQuorumResult')
  final V1UpdateRootQuorumResult? updateRootQuorumResult;
  @JsonKey(name: 'updateUserTagResult')
  final V1UpdateUserTagResult? updateUserTagResult;
  @JsonKey(name: 'updatePrivateKeyTagResult')
  final V1UpdatePrivateKeyTagResult? updatePrivateKeyTagResult;
  @JsonKey(name: 'createSubOrganizationResult')
  final V1CreateSubOrganizationResult? createSubOrganizationResult;
  @JsonKey(name: 'updateAllowedOriginsResult')
  final V1UpdateAllowedOriginsResult? updateAllowedOriginsResult;
  @JsonKey(name: 'createPrivateKeysResultV2')
  final V1CreatePrivateKeysResultV2? createPrivateKeysResultV2;
  @JsonKey(name: 'updateUserResult')
  final V1UpdateUserResult? updateUserResult;
  @JsonKey(name: 'updatePolicyResult')
  final V1UpdatePolicyResult? updatePolicyResult;
  @JsonKey(name: 'createSubOrganizationResultV3')
  final V1CreateSubOrganizationResultV3? createSubOrganizationResultV3;
  @JsonKey(name: 'createWalletResult')
  final V1CreateWalletResult? createWalletResult;
  @JsonKey(name: 'createWalletAccountsResult')
  final V1CreateWalletAccountsResult? createWalletAccountsResult;
  @JsonKey(name: 'initUserEmailRecoveryResult')
  final V1InitUserEmailRecoveryResult? initUserEmailRecoveryResult;
  @JsonKey(name: 'recoverUserResult')
  final V1RecoverUserResult? recoverUserResult;
  @JsonKey(name: 'setOrganizationFeatureResult')
  final V1SetOrganizationFeatureResult? setOrganizationFeatureResult;
  @JsonKey(name: 'removeOrganizationFeatureResult')
  final V1RemoveOrganizationFeatureResult? removeOrganizationFeatureResult;
  @JsonKey(name: 'exportPrivateKeyResult')
  final V1ExportPrivateKeyResult? exportPrivateKeyResult;
  @JsonKey(name: 'exportWalletResult')
  final V1ExportWalletResult? exportWalletResult;
  @JsonKey(name: 'createSubOrganizationResultV4')
  final V1CreateSubOrganizationResultV4? createSubOrganizationResultV4;
  @JsonKey(name: 'emailAuthResult')
  final V1EmailAuthResult? emailAuthResult;
  @JsonKey(name: 'exportWalletAccountResult')
  final V1ExportWalletAccountResult? exportWalletAccountResult;
  @JsonKey(name: 'initImportWalletResult')
  final V1InitImportWalletResult? initImportWalletResult;
  @JsonKey(name: 'importWalletResult')
  final V1ImportWalletResult? importWalletResult;
  @JsonKey(name: 'initImportPrivateKeyResult')
  final V1InitImportPrivateKeyResult? initImportPrivateKeyResult;
  @JsonKey(name: 'importPrivateKeyResult')
  final V1ImportPrivateKeyResult? importPrivateKeyResult;
  @JsonKey(name: 'createPoliciesResult')
  final V1CreatePoliciesResult? createPoliciesResult;
  @JsonKey(name: 'signRawPayloadsResult')
  final V1SignRawPayloadsResult? signRawPayloadsResult;
  @JsonKey(name: 'createReadOnlySessionResult')
  final V1CreateReadOnlySessionResult? createReadOnlySessionResult;
  @JsonKey(name: 'createOauthProvidersResult')
  final V1CreateOauthProvidersResult? createOauthProvidersResult;
  @JsonKey(name: 'deleteOauthProvidersResult')
  final V1DeleteOauthProvidersResult? deleteOauthProvidersResult;
  @JsonKey(name: 'createSubOrganizationResultV5')
  final V1CreateSubOrganizationResultV5? createSubOrganizationResultV5;
  @JsonKey(name: 'oauthResult')
  final V1OauthResult? oauthResult;
  @JsonKey(name: 'createReadWriteSessionResult')
  final V1CreateReadWriteSessionResult? createReadWriteSessionResult;
  @JsonKey(name: 'createSubOrganizationResultV6')
  final V1CreateSubOrganizationResultV6? createSubOrganizationResultV6;
  @JsonKey(name: 'deletePrivateKeysResult')
  final V1DeletePrivateKeysResult? deletePrivateKeysResult;
  @JsonKey(name: 'deleteWalletsResult')
  final V1DeleteWalletsResult? deleteWalletsResult;
  @JsonKey(name: 'createReadWriteSessionResultV2')
  final V1CreateReadWriteSessionResultV2? createReadWriteSessionResultV2;
  @JsonKey(name: 'deleteSubOrganizationResult')
  final V1DeleteSubOrganizationResult? deleteSubOrganizationResult;
  @JsonKey(name: 'initOtpAuthResult')
  final V1InitOtpAuthResult? initOtpAuthResult;
  @JsonKey(name: 'otpAuthResult')
  final V1OtpAuthResult? otpAuthResult;
  @JsonKey(name: 'createSubOrganizationResultV7')
  final V1CreateSubOrganizationResultV7? createSubOrganizationResultV7;
  static const fromJsonFactory = _$V1ResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Result &&
            (identical(other.createOrganizationResult, createOrganizationResult) ||
                const DeepCollectionEquality().equals(
                    other.createOrganizationResult,
                    createOrganizationResult)) &&
            (identical(other.createAuthenticatorsResult, createAuthenticatorsResult) ||
                const DeepCollectionEquality().equals(
                    other.createAuthenticatorsResult,
                    createAuthenticatorsResult)) &&
            (identical(other.createUsersResult, createUsersResult) ||
                const DeepCollectionEquality()
                    .equals(other.createUsersResult, createUsersResult)) &&
            (identical(other.createPrivateKeysResult, createPrivateKeysResult) ||
                const DeepCollectionEquality().equals(
                    other.createPrivateKeysResult, createPrivateKeysResult)) &&
            (identical(other.createInvitationsResult, createInvitationsResult) ||
                const DeepCollectionEquality().equals(
                    other.createInvitationsResult, createInvitationsResult)) &&
            (identical(other.acceptInvitationResult, acceptInvitationResult) ||
                const DeepCollectionEquality().equals(
                    other.acceptInvitationResult, acceptInvitationResult)) &&
            (identical(other.signRawPayloadResult, signRawPayloadResult) ||
                const DeepCollectionEquality().equals(
                    other.signRawPayloadResult, signRawPayloadResult)) &&
            (identical(other.createPolicyResult, createPolicyResult) ||
                const DeepCollectionEquality()
                    .equals(other.createPolicyResult, createPolicyResult)) &&
            (identical(other.disablePrivateKeyResult, disablePrivateKeyResult) ||
                const DeepCollectionEquality().equals(
                    other.disablePrivateKeyResult, disablePrivateKeyResult)) &&
            (identical(other.deleteUsersResult, deleteUsersResult) ||
                const DeepCollectionEquality().equals(other.deleteUsersResult, deleteUsersResult)) &&
            (identical(other.deleteAuthenticatorsResult, deleteAuthenticatorsResult) || const DeepCollectionEquality().equals(other.deleteAuthenticatorsResult, deleteAuthenticatorsResult)) &&
            (identical(other.deleteInvitationResult, deleteInvitationResult) || const DeepCollectionEquality().equals(other.deleteInvitationResult, deleteInvitationResult)) &&
            (identical(other.deleteOrganizationResult, deleteOrganizationResult) || const DeepCollectionEquality().equals(other.deleteOrganizationResult, deleteOrganizationResult)) &&
            (identical(other.deletePolicyResult, deletePolicyResult) || const DeepCollectionEquality().equals(other.deletePolicyResult, deletePolicyResult)) &&
            (identical(other.createUserTagResult, createUserTagResult) || const DeepCollectionEquality().equals(other.createUserTagResult, createUserTagResult)) &&
            (identical(other.deleteUserTagsResult, deleteUserTagsResult) || const DeepCollectionEquality().equals(other.deleteUserTagsResult, deleteUserTagsResult)) &&
            (identical(other.signTransactionResult, signTransactionResult) || const DeepCollectionEquality().equals(other.signTransactionResult, signTransactionResult)) &&
            (identical(other.deleteApiKeysResult, deleteApiKeysResult) || const DeepCollectionEquality().equals(other.deleteApiKeysResult, deleteApiKeysResult)) &&
            (identical(other.createApiKeysResult, createApiKeysResult) || const DeepCollectionEquality().equals(other.createApiKeysResult, createApiKeysResult)) &&
            (identical(other.createPrivateKeyTagResult, createPrivateKeyTagResult) || const DeepCollectionEquality().equals(other.createPrivateKeyTagResult, createPrivateKeyTagResult)) &&
            (identical(other.deletePrivateKeyTagsResult, deletePrivateKeyTagsResult) || const DeepCollectionEquality().equals(other.deletePrivateKeyTagsResult, deletePrivateKeyTagsResult)) &&
            (identical(other.setPaymentMethodResult, setPaymentMethodResult) || const DeepCollectionEquality().equals(other.setPaymentMethodResult, setPaymentMethodResult)) &&
            (identical(other.activateBillingTierResult, activateBillingTierResult) || const DeepCollectionEquality().equals(other.activateBillingTierResult, activateBillingTierResult)) &&
            (identical(other.deletePaymentMethodResult, deletePaymentMethodResult) || const DeepCollectionEquality().equals(other.deletePaymentMethodResult, deletePaymentMethodResult)) &&
            (identical(other.createApiOnlyUsersResult, createApiOnlyUsersResult) || const DeepCollectionEquality().equals(other.createApiOnlyUsersResult, createApiOnlyUsersResult)) &&
            (identical(other.updateRootQuorumResult, updateRootQuorumResult) || const DeepCollectionEquality().equals(other.updateRootQuorumResult, updateRootQuorumResult)) &&
            (identical(other.updateUserTagResult, updateUserTagResult) || const DeepCollectionEquality().equals(other.updateUserTagResult, updateUserTagResult)) &&
            (identical(other.updatePrivateKeyTagResult, updatePrivateKeyTagResult) || const DeepCollectionEquality().equals(other.updatePrivateKeyTagResult, updatePrivateKeyTagResult)) &&
            (identical(other.createSubOrganizationResult, createSubOrganizationResult) || const DeepCollectionEquality().equals(other.createSubOrganizationResult, createSubOrganizationResult)) &&
            (identical(other.updateAllowedOriginsResult, updateAllowedOriginsResult) || const DeepCollectionEquality().equals(other.updateAllowedOriginsResult, updateAllowedOriginsResult)) &&
            (identical(other.createPrivateKeysResultV2, createPrivateKeysResultV2) || const DeepCollectionEquality().equals(other.createPrivateKeysResultV2, createPrivateKeysResultV2)) &&
            (identical(other.updateUserResult, updateUserResult) || const DeepCollectionEquality().equals(other.updateUserResult, updateUserResult)) &&
            (identical(other.updatePolicyResult, updatePolicyResult) || const DeepCollectionEquality().equals(other.updatePolicyResult, updatePolicyResult)) &&
            (identical(other.createSubOrganizationResultV3, createSubOrganizationResultV3) || const DeepCollectionEquality().equals(other.createSubOrganizationResultV3, createSubOrganizationResultV3)) &&
            (identical(other.createWalletResult, createWalletResult) || const DeepCollectionEquality().equals(other.createWalletResult, createWalletResult)) &&
            (identical(other.createWalletAccountsResult, createWalletAccountsResult) || const DeepCollectionEquality().equals(other.createWalletAccountsResult, createWalletAccountsResult)) &&
            (identical(other.initUserEmailRecoveryResult, initUserEmailRecoveryResult) || const DeepCollectionEquality().equals(other.initUserEmailRecoveryResult, initUserEmailRecoveryResult)) &&
            (identical(other.recoverUserResult, recoverUserResult) || const DeepCollectionEquality().equals(other.recoverUserResult, recoverUserResult)) &&
            (identical(other.setOrganizationFeatureResult, setOrganizationFeatureResult) || const DeepCollectionEquality().equals(other.setOrganizationFeatureResult, setOrganizationFeatureResult)) &&
            (identical(other.removeOrganizationFeatureResult, removeOrganizationFeatureResult) || const DeepCollectionEquality().equals(other.removeOrganizationFeatureResult, removeOrganizationFeatureResult)) &&
            (identical(other.exportPrivateKeyResult, exportPrivateKeyResult) || const DeepCollectionEquality().equals(other.exportPrivateKeyResult, exportPrivateKeyResult)) &&
            (identical(other.exportWalletResult, exportWalletResult) || const DeepCollectionEquality().equals(other.exportWalletResult, exportWalletResult)) &&
            (identical(other.createSubOrganizationResultV4, createSubOrganizationResultV4) || const DeepCollectionEquality().equals(other.createSubOrganizationResultV4, createSubOrganizationResultV4)) &&
            (identical(other.emailAuthResult, emailAuthResult) || const DeepCollectionEquality().equals(other.emailAuthResult, emailAuthResult)) &&
            (identical(other.exportWalletAccountResult, exportWalletAccountResult) || const DeepCollectionEquality().equals(other.exportWalletAccountResult, exportWalletAccountResult)) &&
            (identical(other.initImportWalletResult, initImportWalletResult) || const DeepCollectionEquality().equals(other.initImportWalletResult, initImportWalletResult)) &&
            (identical(other.importWalletResult, importWalletResult) || const DeepCollectionEquality().equals(other.importWalletResult, importWalletResult)) &&
            (identical(other.initImportPrivateKeyResult, initImportPrivateKeyResult) || const DeepCollectionEquality().equals(other.initImportPrivateKeyResult, initImportPrivateKeyResult)) &&
            (identical(other.importPrivateKeyResult, importPrivateKeyResult) || const DeepCollectionEquality().equals(other.importPrivateKeyResult, importPrivateKeyResult)) &&
            (identical(other.createPoliciesResult, createPoliciesResult) || const DeepCollectionEquality().equals(other.createPoliciesResult, createPoliciesResult)) &&
            (identical(other.signRawPayloadsResult, signRawPayloadsResult) || const DeepCollectionEquality().equals(other.signRawPayloadsResult, signRawPayloadsResult)) &&
            (identical(other.createReadOnlySessionResult, createReadOnlySessionResult) || const DeepCollectionEquality().equals(other.createReadOnlySessionResult, createReadOnlySessionResult)) &&
            (identical(other.createOauthProvidersResult, createOauthProvidersResult) || const DeepCollectionEquality().equals(other.createOauthProvidersResult, createOauthProvidersResult)) &&
            (identical(other.deleteOauthProvidersResult, deleteOauthProvidersResult) || const DeepCollectionEquality().equals(other.deleteOauthProvidersResult, deleteOauthProvidersResult)) &&
            (identical(other.createSubOrganizationResultV5, createSubOrganizationResultV5) || const DeepCollectionEquality().equals(other.createSubOrganizationResultV5, createSubOrganizationResultV5)) &&
            (identical(other.oauthResult, oauthResult) || const DeepCollectionEquality().equals(other.oauthResult, oauthResult)) &&
            (identical(other.createReadWriteSessionResult, createReadWriteSessionResult) || const DeepCollectionEquality().equals(other.createReadWriteSessionResult, createReadWriteSessionResult)) &&
            (identical(other.createSubOrganizationResultV6, createSubOrganizationResultV6) || const DeepCollectionEquality().equals(other.createSubOrganizationResultV6, createSubOrganizationResultV6)) &&
            (identical(other.deletePrivateKeysResult, deletePrivateKeysResult) || const DeepCollectionEquality().equals(other.deletePrivateKeysResult, deletePrivateKeysResult)) &&
            (identical(other.deleteWalletsResult, deleteWalletsResult) || const DeepCollectionEquality().equals(other.deleteWalletsResult, deleteWalletsResult)) &&
            (identical(other.createReadWriteSessionResultV2, createReadWriteSessionResultV2) || const DeepCollectionEquality().equals(other.createReadWriteSessionResultV2, createReadWriteSessionResultV2)) &&
            (identical(other.deleteSubOrganizationResult, deleteSubOrganizationResult) || const DeepCollectionEquality().equals(other.deleteSubOrganizationResult, deleteSubOrganizationResult)) &&
            (identical(other.initOtpAuthResult, initOtpAuthResult) || const DeepCollectionEquality().equals(other.initOtpAuthResult, initOtpAuthResult)) &&
            (identical(other.otpAuthResult, otpAuthResult) || const DeepCollectionEquality().equals(other.otpAuthResult, otpAuthResult)) &&
            (identical(other.createSubOrganizationResultV7, createSubOrganizationResultV7) || const DeepCollectionEquality().equals(other.createSubOrganizationResultV7, createSubOrganizationResultV7)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(createOrganizationResult) ^
      const DeepCollectionEquality().hash(createAuthenticatorsResult) ^
      const DeepCollectionEquality().hash(createUsersResult) ^
      const DeepCollectionEquality().hash(createPrivateKeysResult) ^
      const DeepCollectionEquality().hash(createInvitationsResult) ^
      const DeepCollectionEquality().hash(acceptInvitationResult) ^
      const DeepCollectionEquality().hash(signRawPayloadResult) ^
      const DeepCollectionEquality().hash(createPolicyResult) ^
      const DeepCollectionEquality().hash(disablePrivateKeyResult) ^
      const DeepCollectionEquality().hash(deleteUsersResult) ^
      const DeepCollectionEquality().hash(deleteAuthenticatorsResult) ^
      const DeepCollectionEquality().hash(deleteInvitationResult) ^
      const DeepCollectionEquality().hash(deleteOrganizationResult) ^
      const DeepCollectionEquality().hash(deletePolicyResult) ^
      const DeepCollectionEquality().hash(createUserTagResult) ^
      const DeepCollectionEquality().hash(deleteUserTagsResult) ^
      const DeepCollectionEquality().hash(signTransactionResult) ^
      const DeepCollectionEquality().hash(deleteApiKeysResult) ^
      const DeepCollectionEquality().hash(createApiKeysResult) ^
      const DeepCollectionEquality().hash(createPrivateKeyTagResult) ^
      const DeepCollectionEquality().hash(deletePrivateKeyTagsResult) ^
      const DeepCollectionEquality().hash(setPaymentMethodResult) ^
      const DeepCollectionEquality().hash(activateBillingTierResult) ^
      const DeepCollectionEquality().hash(deletePaymentMethodResult) ^
      const DeepCollectionEquality().hash(createApiOnlyUsersResult) ^
      const DeepCollectionEquality().hash(updateRootQuorumResult) ^
      const DeepCollectionEquality().hash(updateUserTagResult) ^
      const DeepCollectionEquality().hash(updatePrivateKeyTagResult) ^
      const DeepCollectionEquality().hash(createSubOrganizationResult) ^
      const DeepCollectionEquality().hash(updateAllowedOriginsResult) ^
      const DeepCollectionEquality().hash(createPrivateKeysResultV2) ^
      const DeepCollectionEquality().hash(updateUserResult) ^
      const DeepCollectionEquality().hash(updatePolicyResult) ^
      const DeepCollectionEquality().hash(createSubOrganizationResultV3) ^
      const DeepCollectionEquality().hash(createWalletResult) ^
      const DeepCollectionEquality().hash(createWalletAccountsResult) ^
      const DeepCollectionEquality().hash(initUserEmailRecoveryResult) ^
      const DeepCollectionEquality().hash(recoverUserResult) ^
      const DeepCollectionEquality().hash(setOrganizationFeatureResult) ^
      const DeepCollectionEquality().hash(removeOrganizationFeatureResult) ^
      const DeepCollectionEquality().hash(exportPrivateKeyResult) ^
      const DeepCollectionEquality().hash(exportWalletResult) ^
      const DeepCollectionEquality().hash(createSubOrganizationResultV4) ^
      const DeepCollectionEquality().hash(emailAuthResult) ^
      const DeepCollectionEquality().hash(exportWalletAccountResult) ^
      const DeepCollectionEquality().hash(initImportWalletResult) ^
      const DeepCollectionEquality().hash(importWalletResult) ^
      const DeepCollectionEquality().hash(initImportPrivateKeyResult) ^
      const DeepCollectionEquality().hash(importPrivateKeyResult) ^
      const DeepCollectionEquality().hash(createPoliciesResult) ^
      const DeepCollectionEquality().hash(signRawPayloadsResult) ^
      const DeepCollectionEquality().hash(createReadOnlySessionResult) ^
      const DeepCollectionEquality().hash(createOauthProvidersResult) ^
      const DeepCollectionEquality().hash(deleteOauthProvidersResult) ^
      const DeepCollectionEquality().hash(createSubOrganizationResultV5) ^
      const DeepCollectionEquality().hash(oauthResult) ^
      const DeepCollectionEquality().hash(createReadWriteSessionResult) ^
      const DeepCollectionEquality().hash(createSubOrganizationResultV6) ^
      const DeepCollectionEquality().hash(deletePrivateKeysResult) ^
      const DeepCollectionEquality().hash(deleteWalletsResult) ^
      const DeepCollectionEquality().hash(createReadWriteSessionResultV2) ^
      const DeepCollectionEquality().hash(deleteSubOrganizationResult) ^
      const DeepCollectionEquality().hash(initOtpAuthResult) ^
      const DeepCollectionEquality().hash(otpAuthResult) ^
      const DeepCollectionEquality().hash(createSubOrganizationResultV7) ^
      runtimeType.hashCode;
}

extension $V1ResultExtension on V1Result {
  V1Result copyWith(
      {V1CreateOrganizationResult? createOrganizationResult,
      V1CreateAuthenticatorsResult? createAuthenticatorsResult,
      V1CreateUsersResult? createUsersResult,
      V1CreatePrivateKeysResult? createPrivateKeysResult,
      V1CreateInvitationsResult? createInvitationsResult,
      V1AcceptInvitationResult? acceptInvitationResult,
      V1SignRawPayloadResult? signRawPayloadResult,
      V1CreatePolicyResult? createPolicyResult,
      V1DisablePrivateKeyResult? disablePrivateKeyResult,
      V1DeleteUsersResult? deleteUsersResult,
      V1DeleteAuthenticatorsResult? deleteAuthenticatorsResult,
      V1DeleteInvitationResult? deleteInvitationResult,
      V1DeleteOrganizationResult? deleteOrganizationResult,
      V1DeletePolicyResult? deletePolicyResult,
      V1CreateUserTagResult? createUserTagResult,
      V1DeleteUserTagsResult? deleteUserTagsResult,
      V1SignTransactionResult? signTransactionResult,
      V1DeleteApiKeysResult? deleteApiKeysResult,
      V1CreateApiKeysResult? createApiKeysResult,
      V1CreatePrivateKeyTagResult? createPrivateKeyTagResult,
      V1DeletePrivateKeyTagsResult? deletePrivateKeyTagsResult,
      BillingSetPaymentMethodResult? setPaymentMethodResult,
      BillingActivateBillingTierResult? activateBillingTierResult,
      BillingDeletePaymentMethodResult? deletePaymentMethodResult,
      V1CreateApiOnlyUsersResult? createApiOnlyUsersResult,
      V1UpdateRootQuorumResult? updateRootQuorumResult,
      V1UpdateUserTagResult? updateUserTagResult,
      V1UpdatePrivateKeyTagResult? updatePrivateKeyTagResult,
      V1CreateSubOrganizationResult? createSubOrganizationResult,
      V1UpdateAllowedOriginsResult? updateAllowedOriginsResult,
      V1CreatePrivateKeysResultV2? createPrivateKeysResultV2,
      V1UpdateUserResult? updateUserResult,
      V1UpdatePolicyResult? updatePolicyResult,
      V1CreateSubOrganizationResultV3? createSubOrganizationResultV3,
      V1CreateWalletResult? createWalletResult,
      V1CreateWalletAccountsResult? createWalletAccountsResult,
      V1InitUserEmailRecoveryResult? initUserEmailRecoveryResult,
      V1RecoverUserResult? recoverUserResult,
      V1SetOrganizationFeatureResult? setOrganizationFeatureResult,
      V1RemoveOrganizationFeatureResult? removeOrganizationFeatureResult,
      V1ExportPrivateKeyResult? exportPrivateKeyResult,
      V1ExportWalletResult? exportWalletResult,
      V1CreateSubOrganizationResultV4? createSubOrganizationResultV4,
      V1EmailAuthResult? emailAuthResult,
      V1ExportWalletAccountResult? exportWalletAccountResult,
      V1InitImportWalletResult? initImportWalletResult,
      V1ImportWalletResult? importWalletResult,
      V1InitImportPrivateKeyResult? initImportPrivateKeyResult,
      V1ImportPrivateKeyResult? importPrivateKeyResult,
      V1CreatePoliciesResult? createPoliciesResult,
      V1SignRawPayloadsResult? signRawPayloadsResult,
      V1CreateReadOnlySessionResult? createReadOnlySessionResult,
      V1CreateOauthProvidersResult? createOauthProvidersResult,
      V1DeleteOauthProvidersResult? deleteOauthProvidersResult,
      V1CreateSubOrganizationResultV5? createSubOrganizationResultV5,
      V1OauthResult? oauthResult,
      V1CreateReadWriteSessionResult? createReadWriteSessionResult,
      V1CreateSubOrganizationResultV6? createSubOrganizationResultV6,
      V1DeletePrivateKeysResult? deletePrivateKeysResult,
      V1DeleteWalletsResult? deleteWalletsResult,
      V1CreateReadWriteSessionResultV2? createReadWriteSessionResultV2,
      V1DeleteSubOrganizationResult? deleteSubOrganizationResult,
      V1InitOtpAuthResult? initOtpAuthResult,
      V1OtpAuthResult? otpAuthResult,
      V1CreateSubOrganizationResultV7? createSubOrganizationResultV7}) {
    return V1Result(
        createOrganizationResult:
            createOrganizationResult ?? this.createOrganizationResult,
        createAuthenticatorsResult:
            createAuthenticatorsResult ?? this.createAuthenticatorsResult,
        createUsersResult: createUsersResult ?? this.createUsersResult,
        createPrivateKeysResult:
            createPrivateKeysResult ?? this.createPrivateKeysResult,
        createInvitationsResult:
            createInvitationsResult ?? this.createInvitationsResult,
        acceptInvitationResult:
            acceptInvitationResult ?? this.acceptInvitationResult,
        signRawPayloadResult: signRawPayloadResult ?? this.signRawPayloadResult,
        createPolicyResult: createPolicyResult ?? this.createPolicyResult,
        disablePrivateKeyResult:
            disablePrivateKeyResult ?? this.disablePrivateKeyResult,
        deleteUsersResult: deleteUsersResult ?? this.deleteUsersResult,
        deleteAuthenticatorsResult:
            deleteAuthenticatorsResult ?? this.deleteAuthenticatorsResult,
        deleteInvitationResult:
            deleteInvitationResult ?? this.deleteInvitationResult,
        deleteOrganizationResult:
            deleteOrganizationResult ?? this.deleteOrganizationResult,
        deletePolicyResult: deletePolicyResult ?? this.deletePolicyResult,
        createUserTagResult: createUserTagResult ?? this.createUserTagResult,
        deleteUserTagsResult: deleteUserTagsResult ?? this.deleteUserTagsResult,
        signTransactionResult:
            signTransactionResult ?? this.signTransactionResult,
        deleteApiKeysResult: deleteApiKeysResult ?? this.deleteApiKeysResult,
        createApiKeysResult: createApiKeysResult ?? this.createApiKeysResult,
        createPrivateKeyTagResult:
            createPrivateKeyTagResult ?? this.createPrivateKeyTagResult,
        deletePrivateKeyTagsResult:
            deletePrivateKeyTagsResult ?? this.deletePrivateKeyTagsResult,
        setPaymentMethodResult:
            setPaymentMethodResult ?? this.setPaymentMethodResult,
        activateBillingTierResult:
            activateBillingTierResult ?? this.activateBillingTierResult,
        deletePaymentMethodResult:
            deletePaymentMethodResult ?? this.deletePaymentMethodResult,
        createApiOnlyUsersResult:
            createApiOnlyUsersResult ?? this.createApiOnlyUsersResult,
        updateRootQuorumResult:
            updateRootQuorumResult ?? this.updateRootQuorumResult,
        updateUserTagResult: updateUserTagResult ?? this.updateUserTagResult,
        updatePrivateKeyTagResult:
            updatePrivateKeyTagResult ?? this.updatePrivateKeyTagResult,
        createSubOrganizationResult:
            createSubOrganizationResult ?? this.createSubOrganizationResult,
        updateAllowedOriginsResult:
            updateAllowedOriginsResult ?? this.updateAllowedOriginsResult,
        createPrivateKeysResultV2:
            createPrivateKeysResultV2 ?? this.createPrivateKeysResultV2,
        updateUserResult: updateUserResult ?? this.updateUserResult,
        updatePolicyResult: updatePolicyResult ?? this.updatePolicyResult,
        createSubOrganizationResultV3:
            createSubOrganizationResultV3 ?? this.createSubOrganizationResultV3,
        createWalletResult: createWalletResult ?? this.createWalletResult,
        createWalletAccountsResult:
            createWalletAccountsResult ?? this.createWalletAccountsResult,
        initUserEmailRecoveryResult:
            initUserEmailRecoveryResult ?? this.initUserEmailRecoveryResult,
        recoverUserResult: recoverUserResult ?? this.recoverUserResult,
        setOrganizationFeatureResult:
            setOrganizationFeatureResult ?? this.setOrganizationFeatureResult,
        removeOrganizationFeatureResult: removeOrganizationFeatureResult ??
            this.removeOrganizationFeatureResult,
        exportPrivateKeyResult:
            exportPrivateKeyResult ?? this.exportPrivateKeyResult,
        exportWalletResult: exportWalletResult ?? this.exportWalletResult,
        createSubOrganizationResultV4:
            createSubOrganizationResultV4 ?? this.createSubOrganizationResultV4,
        emailAuthResult: emailAuthResult ?? this.emailAuthResult,
        exportWalletAccountResult:
            exportWalletAccountResult ?? this.exportWalletAccountResult,
        initImportWalletResult:
            initImportWalletResult ?? this.initImportWalletResult,
        importWalletResult: importWalletResult ?? this.importWalletResult,
        initImportPrivateKeyResult:
            initImportPrivateKeyResult ?? this.initImportPrivateKeyResult,
        importPrivateKeyResult:
            importPrivateKeyResult ?? this.importPrivateKeyResult,
        createPoliciesResult: createPoliciesResult ?? this.createPoliciesResult,
        signRawPayloadsResult:
            signRawPayloadsResult ?? this.signRawPayloadsResult,
        createReadOnlySessionResult:
            createReadOnlySessionResult ?? this.createReadOnlySessionResult,
        createOauthProvidersResult:
            createOauthProvidersResult ?? this.createOauthProvidersResult,
        deleteOauthProvidersResult:
            deleteOauthProvidersResult ?? this.deleteOauthProvidersResult,
        createSubOrganizationResultV5:
            createSubOrganizationResultV5 ?? this.createSubOrganizationResultV5,
        oauthResult: oauthResult ?? this.oauthResult,
        createReadWriteSessionResult:
            createReadWriteSessionResult ?? this.createReadWriteSessionResult,
        createSubOrganizationResultV6:
            createSubOrganizationResultV6 ?? this.createSubOrganizationResultV6,
        deletePrivateKeysResult:
            deletePrivateKeysResult ?? this.deletePrivateKeysResult,
        deleteWalletsResult: deleteWalletsResult ?? this.deleteWalletsResult,
        createReadWriteSessionResultV2: createReadWriteSessionResultV2 ??
            this.createReadWriteSessionResultV2,
        deleteSubOrganizationResult:
            deleteSubOrganizationResult ?? this.deleteSubOrganizationResult,
        initOtpAuthResult: initOtpAuthResult ?? this.initOtpAuthResult,
        otpAuthResult: otpAuthResult ?? this.otpAuthResult,
        createSubOrganizationResultV7: createSubOrganizationResultV7 ??
            this.createSubOrganizationResultV7);
  }

  V1Result copyWithWrapped(
      {Wrapped<V1CreateOrganizationResult?>? createOrganizationResult,
      Wrapped<V1CreateAuthenticatorsResult?>? createAuthenticatorsResult,
      Wrapped<V1CreateUsersResult?>? createUsersResult,
      Wrapped<V1CreatePrivateKeysResult?>? createPrivateKeysResult,
      Wrapped<V1CreateInvitationsResult?>? createInvitationsResult,
      Wrapped<V1AcceptInvitationResult?>? acceptInvitationResult,
      Wrapped<V1SignRawPayloadResult?>? signRawPayloadResult,
      Wrapped<V1CreatePolicyResult?>? createPolicyResult,
      Wrapped<V1DisablePrivateKeyResult?>? disablePrivateKeyResult,
      Wrapped<V1DeleteUsersResult?>? deleteUsersResult,
      Wrapped<V1DeleteAuthenticatorsResult?>? deleteAuthenticatorsResult,
      Wrapped<V1DeleteInvitationResult?>? deleteInvitationResult,
      Wrapped<V1DeleteOrganizationResult?>? deleteOrganizationResult,
      Wrapped<V1DeletePolicyResult?>? deletePolicyResult,
      Wrapped<V1CreateUserTagResult?>? createUserTagResult,
      Wrapped<V1DeleteUserTagsResult?>? deleteUserTagsResult,
      Wrapped<V1SignTransactionResult?>? signTransactionResult,
      Wrapped<V1DeleteApiKeysResult?>? deleteApiKeysResult,
      Wrapped<V1CreateApiKeysResult?>? createApiKeysResult,
      Wrapped<V1CreatePrivateKeyTagResult?>? createPrivateKeyTagResult,
      Wrapped<V1DeletePrivateKeyTagsResult?>? deletePrivateKeyTagsResult,
      Wrapped<BillingSetPaymentMethodResult?>? setPaymentMethodResult,
      Wrapped<BillingActivateBillingTierResult?>? activateBillingTierResult,
      Wrapped<BillingDeletePaymentMethodResult?>? deletePaymentMethodResult,
      Wrapped<V1CreateApiOnlyUsersResult?>? createApiOnlyUsersResult,
      Wrapped<V1UpdateRootQuorumResult?>? updateRootQuorumResult,
      Wrapped<V1UpdateUserTagResult?>? updateUserTagResult,
      Wrapped<V1UpdatePrivateKeyTagResult?>? updatePrivateKeyTagResult,
      Wrapped<V1CreateSubOrganizationResult?>? createSubOrganizationResult,
      Wrapped<V1UpdateAllowedOriginsResult?>? updateAllowedOriginsResult,
      Wrapped<V1CreatePrivateKeysResultV2?>? createPrivateKeysResultV2,
      Wrapped<V1UpdateUserResult?>? updateUserResult,
      Wrapped<V1UpdatePolicyResult?>? updatePolicyResult,
      Wrapped<V1CreateSubOrganizationResultV3?>? createSubOrganizationResultV3,
      Wrapped<V1CreateWalletResult?>? createWalletResult,
      Wrapped<V1CreateWalletAccountsResult?>? createWalletAccountsResult,
      Wrapped<V1InitUserEmailRecoveryResult?>? initUserEmailRecoveryResult,
      Wrapped<V1RecoverUserResult?>? recoverUserResult,
      Wrapped<V1SetOrganizationFeatureResult?>? setOrganizationFeatureResult,
      Wrapped<V1RemoveOrganizationFeatureResult?>?
          removeOrganizationFeatureResult,
      Wrapped<V1ExportPrivateKeyResult?>? exportPrivateKeyResult,
      Wrapped<V1ExportWalletResult?>? exportWalletResult,
      Wrapped<V1CreateSubOrganizationResultV4?>? createSubOrganizationResultV4,
      Wrapped<V1EmailAuthResult?>? emailAuthResult,
      Wrapped<V1ExportWalletAccountResult?>? exportWalletAccountResult,
      Wrapped<V1InitImportWalletResult?>? initImportWalletResult,
      Wrapped<V1ImportWalletResult?>? importWalletResult,
      Wrapped<V1InitImportPrivateKeyResult?>? initImportPrivateKeyResult,
      Wrapped<V1ImportPrivateKeyResult?>? importPrivateKeyResult,
      Wrapped<V1CreatePoliciesResult?>? createPoliciesResult,
      Wrapped<V1SignRawPayloadsResult?>? signRawPayloadsResult,
      Wrapped<V1CreateReadOnlySessionResult?>? createReadOnlySessionResult,
      Wrapped<V1CreateOauthProvidersResult?>? createOauthProvidersResult,
      Wrapped<V1DeleteOauthProvidersResult?>? deleteOauthProvidersResult,
      Wrapped<V1CreateSubOrganizationResultV5?>? createSubOrganizationResultV5,
      Wrapped<V1OauthResult?>? oauthResult,
      Wrapped<V1CreateReadWriteSessionResult?>? createReadWriteSessionResult,
      Wrapped<V1CreateSubOrganizationResultV6?>? createSubOrganizationResultV6,
      Wrapped<V1DeletePrivateKeysResult?>? deletePrivateKeysResult,
      Wrapped<V1DeleteWalletsResult?>? deleteWalletsResult,
      Wrapped<V1CreateReadWriteSessionResultV2?>?
          createReadWriteSessionResultV2,
      Wrapped<V1DeleteSubOrganizationResult?>? deleteSubOrganizationResult,
      Wrapped<V1InitOtpAuthResult?>? initOtpAuthResult,
      Wrapped<V1OtpAuthResult?>? otpAuthResult,
      Wrapped<V1CreateSubOrganizationResultV7?>?
          createSubOrganizationResultV7}) {
    return V1Result(
        createOrganizationResult: (createOrganizationResult != null
            ? createOrganizationResult.value
            : this.createOrganizationResult),
        createAuthenticatorsResult: (createAuthenticatorsResult != null
            ? createAuthenticatorsResult.value
            : this.createAuthenticatorsResult),
        createUsersResult: (createUsersResult != null
            ? createUsersResult.value
            : this.createUsersResult),
        createPrivateKeysResult: (createPrivateKeysResult != null
            ? createPrivateKeysResult.value
            : this.createPrivateKeysResult),
        createInvitationsResult: (createInvitationsResult != null
            ? createInvitationsResult.value
            : this.createInvitationsResult),
        acceptInvitationResult: (acceptInvitationResult != null
            ? acceptInvitationResult.value
            : this.acceptInvitationResult),
        signRawPayloadResult: (signRawPayloadResult != null
            ? signRawPayloadResult.value
            : this.signRawPayloadResult),
        createPolicyResult: (createPolicyResult != null
            ? createPolicyResult.value
            : this.createPolicyResult),
        disablePrivateKeyResult: (disablePrivateKeyResult != null
            ? disablePrivateKeyResult.value
            : this.disablePrivateKeyResult),
        deleteUsersResult: (deleteUsersResult != null
            ? deleteUsersResult.value
            : this.deleteUsersResult),
        deleteAuthenticatorsResult: (deleteAuthenticatorsResult != null
            ? deleteAuthenticatorsResult.value
            : this.deleteAuthenticatorsResult),
        deleteInvitationResult: (deleteInvitationResult != null
            ? deleteInvitationResult.value
            : this.deleteInvitationResult),
        deleteOrganizationResult: (deleteOrganizationResult != null
            ? deleteOrganizationResult.value
            : this.deleteOrganizationResult),
        deletePolicyResult: (deletePolicyResult != null
            ? deletePolicyResult.value
            : this.deletePolicyResult),
        createUserTagResult: (createUserTagResult != null
            ? createUserTagResult.value
            : this.createUserTagResult),
        deleteUserTagsResult: (deleteUserTagsResult != null
            ? deleteUserTagsResult.value
            : this.deleteUserTagsResult),
        signTransactionResult: (signTransactionResult != null
            ? signTransactionResult.value
            : this.signTransactionResult),
        deleteApiKeysResult: (deleteApiKeysResult != null
            ? deleteApiKeysResult.value
            : this.deleteApiKeysResult),
        createApiKeysResult: (createApiKeysResult != null
            ? createApiKeysResult.value
            : this.createApiKeysResult),
        createPrivateKeyTagResult: (createPrivateKeyTagResult != null
            ? createPrivateKeyTagResult.value
            : this.createPrivateKeyTagResult),
        deletePrivateKeyTagsResult: (deletePrivateKeyTagsResult != null
            ? deletePrivateKeyTagsResult.value
            : this.deletePrivateKeyTagsResult),
        setPaymentMethodResult: (setPaymentMethodResult != null
            ? setPaymentMethodResult.value
            : this.setPaymentMethodResult),
        activateBillingTierResult: (activateBillingTierResult != null
            ? activateBillingTierResult.value
            : this.activateBillingTierResult),
        deletePaymentMethodResult: (deletePaymentMethodResult != null
            ? deletePaymentMethodResult.value
            : this.deletePaymentMethodResult),
        createApiOnlyUsersResult: (createApiOnlyUsersResult != null
            ? createApiOnlyUsersResult.value
            : this.createApiOnlyUsersResult),
        updateRootQuorumResult: (updateRootQuorumResult != null
            ? updateRootQuorumResult.value
            : this.updateRootQuorumResult),
        updateUserTagResult: (updateUserTagResult != null
            ? updateUserTagResult.value
            : this.updateUserTagResult),
        updatePrivateKeyTagResult: (updatePrivateKeyTagResult != null
            ? updatePrivateKeyTagResult.value
            : this.updatePrivateKeyTagResult),
        createSubOrganizationResult: (createSubOrganizationResult != null
            ? createSubOrganizationResult.value
            : this.createSubOrganizationResult),
        updateAllowedOriginsResult: (updateAllowedOriginsResult != null
            ? updateAllowedOriginsResult.value
            : this.updateAllowedOriginsResult),
        createPrivateKeysResultV2: (createPrivateKeysResultV2 != null
            ? createPrivateKeysResultV2.value
            : this.createPrivateKeysResultV2),
        updateUserResult: (updateUserResult != null
            ? updateUserResult.value
            : this.updateUserResult),
        updatePolicyResult: (updatePolicyResult != null
            ? updatePolicyResult.value
            : this.updatePolicyResult),
        createSubOrganizationResultV3: (createSubOrganizationResultV3 != null
            ? createSubOrganizationResultV3.value
            : this.createSubOrganizationResultV3),
        createWalletResult: (createWalletResult != null
            ? createWalletResult.value
            : this.createWalletResult),
        createWalletAccountsResult: (createWalletAccountsResult != null
            ? createWalletAccountsResult.value
            : this.createWalletAccountsResult),
        initUserEmailRecoveryResult: (initUserEmailRecoveryResult != null
            ? initUserEmailRecoveryResult.value
            : this.initUserEmailRecoveryResult),
        recoverUserResult: (recoverUserResult != null
            ? recoverUserResult.value
            : this.recoverUserResult),
        setOrganizationFeatureResult: (setOrganizationFeatureResult != null
            ? setOrganizationFeatureResult.value
            : this.setOrganizationFeatureResult),
        removeOrganizationFeatureResult: (removeOrganizationFeatureResult != null
            ? removeOrganizationFeatureResult.value
            : this.removeOrganizationFeatureResult),
        exportPrivateKeyResult: (exportPrivateKeyResult != null
            ? exportPrivateKeyResult.value
            : this.exportPrivateKeyResult),
        exportWalletResult: (exportWalletResult != null
            ? exportWalletResult.value
            : this.exportWalletResult),
        createSubOrganizationResultV4: (createSubOrganizationResultV4 != null
            ? createSubOrganizationResultV4.value
            : this.createSubOrganizationResultV4),
        emailAuthResult: (emailAuthResult != null
            ? emailAuthResult.value
            : this.emailAuthResult),
        exportWalletAccountResult: (exportWalletAccountResult != null
            ? exportWalletAccountResult.value
            : this.exportWalletAccountResult),
        initImportWalletResult: (initImportWalletResult != null
            ? initImportWalletResult.value
            : this.initImportWalletResult),
        importWalletResult: (importWalletResult != null
            ? importWalletResult.value
            : this.importWalletResult),
        initImportPrivateKeyResult: (initImportPrivateKeyResult != null
            ? initImportPrivateKeyResult.value
            : this.initImportPrivateKeyResult),
        importPrivateKeyResult: (importPrivateKeyResult != null
            ? importPrivateKeyResult.value
            : this.importPrivateKeyResult),
        createPoliciesResult: (createPoliciesResult != null
            ? createPoliciesResult.value
            : this.createPoliciesResult),
        signRawPayloadsResult: (signRawPayloadsResult != null
            ? signRawPayloadsResult.value
            : this.signRawPayloadsResult),
        createReadOnlySessionResult: (createReadOnlySessionResult != null
            ? createReadOnlySessionResult.value
            : this.createReadOnlySessionResult),
        createOauthProvidersResult: (createOauthProvidersResult != null
            ? createOauthProvidersResult.value
            : this.createOauthProvidersResult),
        deleteOauthProvidersResult: (deleteOauthProvidersResult != null
            ? deleteOauthProvidersResult.value
            : this.deleteOauthProvidersResult),
        createSubOrganizationResultV5: (createSubOrganizationResultV5 != null ? createSubOrganizationResultV5.value : this.createSubOrganizationResultV5),
        oauthResult: (oauthResult != null ? oauthResult.value : this.oauthResult),
        createReadWriteSessionResult: (createReadWriteSessionResult != null ? createReadWriteSessionResult.value : this.createReadWriteSessionResult),
        createSubOrganizationResultV6: (createSubOrganizationResultV6 != null ? createSubOrganizationResultV6.value : this.createSubOrganizationResultV6),
        deletePrivateKeysResult: (deletePrivateKeysResult != null ? deletePrivateKeysResult.value : this.deletePrivateKeysResult),
        deleteWalletsResult: (deleteWalletsResult != null ? deleteWalletsResult.value : this.deleteWalletsResult),
        createReadWriteSessionResultV2: (createReadWriteSessionResultV2 != null ? createReadWriteSessionResultV2.value : this.createReadWriteSessionResultV2),
        deleteSubOrganizationResult: (deleteSubOrganizationResult != null ? deleteSubOrganizationResult.value : this.deleteSubOrganizationResult),
        initOtpAuthResult: (initOtpAuthResult != null ? initOtpAuthResult.value : this.initOtpAuthResult),
        otpAuthResult: (otpAuthResult != null ? otpAuthResult.value : this.otpAuthResult),
        createSubOrganizationResultV7: (createSubOrganizationResultV7 != null ? createSubOrganizationResultV7.value : this.createSubOrganizationResultV7));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RootUserParams {
  const V1RootUserParams({
    required this.userName,
    this.userEmail,
    required this.apiKeys,
    required this.authenticators,
  });

  factory V1RootUserParams.fromJson(Map<String, dynamic> json) =>
      _$V1RootUserParamsFromJson(json);

  static const toJsonFactory = _$V1RootUserParamsToJson;
  Map<String, dynamic> toJson() => _$V1RootUserParamsToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'apiKeys', defaultValue: <ApiApiKeyParams>[])
  final List<ApiApiKeyParams> apiKeys;
  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParamsV2>[])
  final List<V1AuthenticatorParamsV2> authenticators;
  static const fromJsonFactory = _$V1RootUserParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RootUserParams &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(authenticators) ^
      runtimeType.hashCode;
}

extension $V1RootUserParamsExtension on V1RootUserParams {
  V1RootUserParams copyWith(
      {String? userName,
      String? userEmail,
      List<ApiApiKeyParams>? apiKeys,
      List<V1AuthenticatorParamsV2>? authenticators}) {
    return V1RootUserParams(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        apiKeys: apiKeys ?? this.apiKeys,
        authenticators: authenticators ?? this.authenticators);
  }

  V1RootUserParams copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<List<ApiApiKeyParams>>? apiKeys,
      Wrapped<List<V1AuthenticatorParamsV2>>? authenticators}) {
    return V1RootUserParams(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RootUserParamsV2 {
  const V1RootUserParamsV2({
    required this.userName,
    this.userEmail,
    required this.apiKeys,
    required this.authenticators,
    required this.oauthProviders,
  });

  factory V1RootUserParamsV2.fromJson(Map<String, dynamic> json) =>
      _$V1RootUserParamsV2FromJson(json);

  static const toJsonFactory = _$V1RootUserParamsV2ToJson;
  Map<String, dynamic> toJson() => _$V1RootUserParamsV2ToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'apiKeys', defaultValue: <ApiApiKeyParams>[])
  final List<ApiApiKeyParams> apiKeys;
  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParamsV2>[])
  final List<V1AuthenticatorParamsV2> authenticators;
  @JsonKey(name: 'oauthProviders', defaultValue: <V1OauthProviderParams>[])
  final List<V1OauthProviderParams> oauthProviders;
  static const fromJsonFactory = _$V1RootUserParamsV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RootUserParamsV2 &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.oauthProviders, oauthProviders) ||
                const DeepCollectionEquality()
                    .equals(other.oauthProviders, oauthProviders)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(oauthProviders) ^
      runtimeType.hashCode;
}

extension $V1RootUserParamsV2Extension on V1RootUserParamsV2 {
  V1RootUserParamsV2 copyWith(
      {String? userName,
      String? userEmail,
      List<ApiApiKeyParams>? apiKeys,
      List<V1AuthenticatorParamsV2>? authenticators,
      List<V1OauthProviderParams>? oauthProviders}) {
    return V1RootUserParamsV2(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        apiKeys: apiKeys ?? this.apiKeys,
        authenticators: authenticators ?? this.authenticators,
        oauthProviders: oauthProviders ?? this.oauthProviders);
  }

  V1RootUserParamsV2 copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<List<ApiApiKeyParams>>? apiKeys,
      Wrapped<List<V1AuthenticatorParamsV2>>? authenticators,
      Wrapped<List<V1OauthProviderParams>>? oauthProviders}) {
    return V1RootUserParamsV2(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        oauthProviders: (oauthProviders != null
            ? oauthProviders.value
            : this.oauthProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RootUserParamsV3 {
  const V1RootUserParamsV3({
    required this.userName,
    this.userEmail,
    required this.apiKeys,
    required this.authenticators,
    required this.oauthProviders,
  });

  factory V1RootUserParamsV3.fromJson(Map<String, dynamic> json) =>
      _$V1RootUserParamsV3FromJson(json);

  static const toJsonFactory = _$V1RootUserParamsV3ToJson;
  Map<String, dynamic> toJson() => _$V1RootUserParamsV3ToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'apiKeys', defaultValue: <V1ApiKeyParamsV2>[])
  final List<V1ApiKeyParamsV2> apiKeys;
  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParamsV2>[])
  final List<V1AuthenticatorParamsV2> authenticators;
  @JsonKey(name: 'oauthProviders', defaultValue: <V1OauthProviderParams>[])
  final List<V1OauthProviderParams> oauthProviders;
  static const fromJsonFactory = _$V1RootUserParamsV3FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RootUserParamsV3 &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.oauthProviders, oauthProviders) ||
                const DeepCollectionEquality()
                    .equals(other.oauthProviders, oauthProviders)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(oauthProviders) ^
      runtimeType.hashCode;
}

extension $V1RootUserParamsV3Extension on V1RootUserParamsV3 {
  V1RootUserParamsV3 copyWith(
      {String? userName,
      String? userEmail,
      List<V1ApiKeyParamsV2>? apiKeys,
      List<V1AuthenticatorParamsV2>? authenticators,
      List<V1OauthProviderParams>? oauthProviders}) {
    return V1RootUserParamsV3(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        apiKeys: apiKeys ?? this.apiKeys,
        authenticators: authenticators ?? this.authenticators,
        oauthProviders: oauthProviders ?? this.oauthProviders);
  }

  V1RootUserParamsV3 copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<List<V1ApiKeyParamsV2>>? apiKeys,
      Wrapped<List<V1AuthenticatorParamsV2>>? authenticators,
      Wrapped<List<V1OauthProviderParams>>? oauthProviders}) {
    return V1RootUserParamsV3(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        oauthProviders: (oauthProviders != null
            ? oauthProviders.value
            : this.oauthProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class V1RootUserParamsV4 {
  const V1RootUserParamsV4({
    required this.userName,
    this.userEmail,
    this.userPhoneNumber,
    required this.apiKeys,
    required this.authenticators,
    required this.oauthProviders,
  });

  factory V1RootUserParamsV4.fromJson(Map<String, dynamic> json) =>
      _$V1RootUserParamsV4FromJson(json);

  static const toJsonFactory = _$V1RootUserParamsV4ToJson;
  Map<String, dynamic> toJson() => _$V1RootUserParamsV4ToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'userPhoneNumber')
  final String? userPhoneNumber;
  @JsonKey(name: 'apiKeys', defaultValue: <V1ApiKeyParamsV2>[])
  final List<V1ApiKeyParamsV2> apiKeys;
  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParamsV2>[])
  final List<V1AuthenticatorParamsV2> authenticators;
  @JsonKey(name: 'oauthProviders', defaultValue: <V1OauthProviderParams>[])
  final List<V1OauthProviderParams> oauthProviders;
  static const fromJsonFactory = _$V1RootUserParamsV4FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1RootUserParamsV4 &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.userPhoneNumber, userPhoneNumber) ||
                const DeepCollectionEquality()
                    .equals(other.userPhoneNumber, userPhoneNumber)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.oauthProviders, oauthProviders) ||
                const DeepCollectionEquality()
                    .equals(other.oauthProviders, oauthProviders)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(userPhoneNumber) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(oauthProviders) ^
      runtimeType.hashCode;
}

extension $V1RootUserParamsV4Extension on V1RootUserParamsV4 {
  V1RootUserParamsV4 copyWith(
      {String? userName,
      String? userEmail,
      String? userPhoneNumber,
      List<V1ApiKeyParamsV2>? apiKeys,
      List<V1AuthenticatorParamsV2>? authenticators,
      List<V1OauthProviderParams>? oauthProviders}) {
    return V1RootUserParamsV4(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        userPhoneNumber: userPhoneNumber ?? this.userPhoneNumber,
        apiKeys: apiKeys ?? this.apiKeys,
        authenticators: authenticators ?? this.authenticators,
        oauthProviders: oauthProviders ?? this.oauthProviders);
  }

  V1RootUserParamsV4 copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<String?>? userPhoneNumber,
      Wrapped<List<V1ApiKeyParamsV2>>? apiKeys,
      Wrapped<List<V1AuthenticatorParamsV2>>? authenticators,
      Wrapped<List<V1OauthProviderParams>>? oauthProviders}) {
    return V1RootUserParamsV4(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        userPhoneNumber: (userPhoneNumber != null
            ? userPhoneNumber.value
            : this.userPhoneNumber),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        oauthProviders: (oauthProviders != null
            ? oauthProviders.value
            : this.oauthProviders));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Selector {
  const V1Selector({
    this.subject,
    this.$operator,
    this.target,
  });

  factory V1Selector.fromJson(Map<String, dynamic> json) =>
      _$V1SelectorFromJson(json);

  static const toJsonFactory = _$V1SelectorToJson;
  Map<String, dynamic> toJson() => _$V1SelectorToJson(this);

  @JsonKey(name: 'subject')
  final String? subject;
  @JsonKey(
    name: 'operator',
    toJson: v1OperatorNullableToJson,
    fromJson: v1OperatorNullableFromJson,
  )
  final enums.V1Operator? $operator;
  @JsonKey(name: 'target')
  final String? target;
  static const fromJsonFactory = _$V1SelectorFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Selector &&
            (identical(other.subject, subject) ||
                const DeepCollectionEquality()
                    .equals(other.subject, subject)) &&
            (identical(other.$operator, $operator) ||
                const DeepCollectionEquality()
                    .equals(other.$operator, $operator)) &&
            (identical(other.target, target) ||
                const DeepCollectionEquality().equals(other.target, target)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subject) ^
      const DeepCollectionEquality().hash($operator) ^
      const DeepCollectionEquality().hash(target) ^
      runtimeType.hashCode;
}

extension $V1SelectorExtension on V1Selector {
  V1Selector copyWith(
      {String? subject, enums.V1Operator? $operator, String? target}) {
    return V1Selector(
        subject: subject ?? this.subject,
        $operator: $operator ?? this.$operator,
        target: target ?? this.target);
  }

  V1Selector copyWithWrapped(
      {Wrapped<String?>? subject,
      Wrapped<enums.V1Operator?>? $operator,
      Wrapped<String?>? target}) {
    return V1Selector(
        subject: (subject != null ? subject.value : this.subject),
        $operator: ($operator != null ? $operator.value : this.$operator),
        target: (target != null ? target.value : this.target));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SelectorV2 {
  const V1SelectorV2({
    this.subject,
    this.$operator,
    this.targets,
  });

  factory V1SelectorV2.fromJson(Map<String, dynamic> json) =>
      _$V1SelectorV2FromJson(json);

  static const toJsonFactory = _$V1SelectorV2ToJson;
  Map<String, dynamic> toJson() => _$V1SelectorV2ToJson(this);

  @JsonKey(name: 'subject')
  final String? subject;
  @JsonKey(
    name: 'operator',
    toJson: v1OperatorNullableToJson,
    fromJson: v1OperatorNullableFromJson,
  )
  final enums.V1Operator? $operator;
  @JsonKey(name: 'targets', defaultValue: <String>[])
  final List<String>? targets;
  static const fromJsonFactory = _$V1SelectorV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SelectorV2 &&
            (identical(other.subject, subject) ||
                const DeepCollectionEquality()
                    .equals(other.subject, subject)) &&
            (identical(other.$operator, $operator) ||
                const DeepCollectionEquality()
                    .equals(other.$operator, $operator)) &&
            (identical(other.targets, targets) ||
                const DeepCollectionEquality().equals(other.targets, targets)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(subject) ^
      const DeepCollectionEquality().hash($operator) ^
      const DeepCollectionEquality().hash(targets) ^
      runtimeType.hashCode;
}

extension $V1SelectorV2Extension on V1SelectorV2 {
  V1SelectorV2 copyWith(
      {String? subject, enums.V1Operator? $operator, List<String>? targets}) {
    return V1SelectorV2(
        subject: subject ?? this.subject,
        $operator: $operator ?? this.$operator,
        targets: targets ?? this.targets);
  }

  V1SelectorV2 copyWithWrapped(
      {Wrapped<String?>? subject,
      Wrapped<enums.V1Operator?>? $operator,
      Wrapped<List<String>?>? targets}) {
    return V1SelectorV2(
        subject: (subject != null ? subject.value : this.subject),
        $operator: ($operator != null ? $operator.value : this.$operator),
        targets: (targets != null ? targets.value : this.targets));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SetOrganizationFeatureIntent {
  const V1SetOrganizationFeatureIntent({
    required this.name,
    required this.$value,
  });

  factory V1SetOrganizationFeatureIntent.fromJson(Map<String, dynamic> json) =>
      _$V1SetOrganizationFeatureIntentFromJson(json);

  static const toJsonFactory = _$V1SetOrganizationFeatureIntentToJson;
  Map<String, dynamic> toJson() => _$V1SetOrganizationFeatureIntentToJson(this);

  @JsonKey(
    name: 'name',
    toJson: v1FeatureNameToJson,
    fromJson: v1FeatureNameFromJson,
  )
  final enums.V1FeatureName name;
  @JsonKey(name: 'value')
  final String $value;
  static const fromJsonFactory = _$V1SetOrganizationFeatureIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SetOrganizationFeatureIntent &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.$value, $value) ||
                const DeepCollectionEquality().equals(other.$value, $value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash($value) ^
      runtimeType.hashCode;
}

extension $V1SetOrganizationFeatureIntentExtension
    on V1SetOrganizationFeatureIntent {
  V1SetOrganizationFeatureIntent copyWith(
      {enums.V1FeatureName? name, String? $value}) {
    return V1SetOrganizationFeatureIntent(
        name: name ?? this.name, $value: $value ?? this.$value);
  }

  V1SetOrganizationFeatureIntent copyWithWrapped(
      {Wrapped<enums.V1FeatureName>? name, Wrapped<String>? $value}) {
    return V1SetOrganizationFeatureIntent(
        name: (name != null ? name.value : this.name),
        $value: ($value != null ? $value.value : this.$value));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SetOrganizationFeatureRequest {
  const V1SetOrganizationFeatureRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1SetOrganizationFeatureRequest.fromJson(Map<String, dynamic> json) =>
      _$V1SetOrganizationFeatureRequestFromJson(json);

  static const toJsonFactory = _$V1SetOrganizationFeatureRequestToJson;
  Map<String, dynamic> toJson() =>
      _$V1SetOrganizationFeatureRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1SetOrganizationFeatureRequestTypeToJson,
    fromJson: v1SetOrganizationFeatureRequestTypeFromJson,
  )
  final enums.V1SetOrganizationFeatureRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1SetOrganizationFeatureIntent parameters;
  static const fromJsonFactory = _$V1SetOrganizationFeatureRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SetOrganizationFeatureRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1SetOrganizationFeatureRequestExtension
    on V1SetOrganizationFeatureRequest {
  V1SetOrganizationFeatureRequest copyWith(
      {enums.V1SetOrganizationFeatureRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1SetOrganizationFeatureIntent? parameters}) {
    return V1SetOrganizationFeatureRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1SetOrganizationFeatureRequest copyWithWrapped(
      {Wrapped<enums.V1SetOrganizationFeatureRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1SetOrganizationFeatureIntent>? parameters}) {
    return V1SetOrganizationFeatureRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SetOrganizationFeatureResult {
  const V1SetOrganizationFeatureResult({
    required this.features,
  });

  factory V1SetOrganizationFeatureResult.fromJson(Map<String, dynamic> json) =>
      _$V1SetOrganizationFeatureResultFromJson(json);

  static const toJsonFactory = _$V1SetOrganizationFeatureResultToJson;
  Map<String, dynamic> toJson() => _$V1SetOrganizationFeatureResultToJson(this);

  @JsonKey(name: 'features', defaultValue: <V1Feature>[])
  final List<V1Feature> features;
  static const fromJsonFactory = _$V1SetOrganizationFeatureResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SetOrganizationFeatureResult &&
            (identical(other.features, features) ||
                const DeepCollectionEquality()
                    .equals(other.features, features)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(features) ^ runtimeType.hashCode;
}

extension $V1SetOrganizationFeatureResultExtension
    on V1SetOrganizationFeatureResult {
  V1SetOrganizationFeatureResult copyWith({List<V1Feature>? features}) {
    return V1SetOrganizationFeatureResult(features: features ?? this.features);
  }

  V1SetOrganizationFeatureResult copyWithWrapped(
      {Wrapped<List<V1Feature>>? features}) {
    return V1SetOrganizationFeatureResult(
        features: (features != null ? features.value : this.features));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadIntent {
  const V1SignRawPayloadIntent({
    required this.privateKeyId,
    required this.payload,
    required this.encoding,
    required this.hashFunction,
  });

  factory V1SignRawPayloadIntent.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadIntentFromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadIntentToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadIntentToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  @JsonKey(name: 'payload')
  final String payload;
  @JsonKey(
    name: 'encoding',
    toJson: v1PayloadEncodingToJson,
    fromJson: v1PayloadEncodingFromJson,
  )
  final enums.V1PayloadEncoding encoding;
  @JsonKey(
    name: 'hashFunction',
    toJson: v1HashFunctionToJson,
    fromJson: v1HashFunctionFromJson,
  )
  final enums.V1HashFunction hashFunction;
  static const fromJsonFactory = _$V1SignRawPayloadIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadIntent &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.payload, payload) ||
                const DeepCollectionEquality()
                    .equals(other.payload, payload)) &&
            (identical(other.encoding, encoding) ||
                const DeepCollectionEquality()
                    .equals(other.encoding, encoding)) &&
            (identical(other.hashFunction, hashFunction) ||
                const DeepCollectionEquality()
                    .equals(other.hashFunction, hashFunction)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(payload) ^
      const DeepCollectionEquality().hash(encoding) ^
      const DeepCollectionEquality().hash(hashFunction) ^
      runtimeType.hashCode;
}

extension $V1SignRawPayloadIntentExtension on V1SignRawPayloadIntent {
  V1SignRawPayloadIntent copyWith(
      {String? privateKeyId,
      String? payload,
      enums.V1PayloadEncoding? encoding,
      enums.V1HashFunction? hashFunction}) {
    return V1SignRawPayloadIntent(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        payload: payload ?? this.payload,
        encoding: encoding ?? this.encoding,
        hashFunction: hashFunction ?? this.hashFunction);
  }

  V1SignRawPayloadIntent copyWithWrapped(
      {Wrapped<String>? privateKeyId,
      Wrapped<String>? payload,
      Wrapped<enums.V1PayloadEncoding>? encoding,
      Wrapped<enums.V1HashFunction>? hashFunction}) {
    return V1SignRawPayloadIntent(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        payload: (payload != null ? payload.value : this.payload),
        encoding: (encoding != null ? encoding.value : this.encoding),
        hashFunction:
            (hashFunction != null ? hashFunction.value : this.hashFunction));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadIntentV2 {
  const V1SignRawPayloadIntentV2({
    required this.signWith,
    required this.payload,
    required this.encoding,
    required this.hashFunction,
  });

  factory V1SignRawPayloadIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadIntentV2FromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadIntentV2ToJson(this);

  @JsonKey(name: 'signWith')
  final String signWith;
  @JsonKey(name: 'payload')
  final String payload;
  @JsonKey(
    name: 'encoding',
    toJson: v1PayloadEncodingToJson,
    fromJson: v1PayloadEncodingFromJson,
  )
  final enums.V1PayloadEncoding encoding;
  @JsonKey(
    name: 'hashFunction',
    toJson: v1HashFunctionToJson,
    fromJson: v1HashFunctionFromJson,
  )
  final enums.V1HashFunction hashFunction;
  static const fromJsonFactory = _$V1SignRawPayloadIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadIntentV2 &&
            (identical(other.signWith, signWith) ||
                const DeepCollectionEquality()
                    .equals(other.signWith, signWith)) &&
            (identical(other.payload, payload) ||
                const DeepCollectionEquality()
                    .equals(other.payload, payload)) &&
            (identical(other.encoding, encoding) ||
                const DeepCollectionEquality()
                    .equals(other.encoding, encoding)) &&
            (identical(other.hashFunction, hashFunction) ||
                const DeepCollectionEquality()
                    .equals(other.hashFunction, hashFunction)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(signWith) ^
      const DeepCollectionEquality().hash(payload) ^
      const DeepCollectionEquality().hash(encoding) ^
      const DeepCollectionEquality().hash(hashFunction) ^
      runtimeType.hashCode;
}

extension $V1SignRawPayloadIntentV2Extension on V1SignRawPayloadIntentV2 {
  V1SignRawPayloadIntentV2 copyWith(
      {String? signWith,
      String? payload,
      enums.V1PayloadEncoding? encoding,
      enums.V1HashFunction? hashFunction}) {
    return V1SignRawPayloadIntentV2(
        signWith: signWith ?? this.signWith,
        payload: payload ?? this.payload,
        encoding: encoding ?? this.encoding,
        hashFunction: hashFunction ?? this.hashFunction);
  }

  V1SignRawPayloadIntentV2 copyWithWrapped(
      {Wrapped<String>? signWith,
      Wrapped<String>? payload,
      Wrapped<enums.V1PayloadEncoding>? encoding,
      Wrapped<enums.V1HashFunction>? hashFunction}) {
    return V1SignRawPayloadIntentV2(
        signWith: (signWith != null ? signWith.value : this.signWith),
        payload: (payload != null ? payload.value : this.payload),
        encoding: (encoding != null ? encoding.value : this.encoding),
        hashFunction:
            (hashFunction != null ? hashFunction.value : this.hashFunction));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadRequest {
  const V1SignRawPayloadRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1SignRawPayloadRequest.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadRequestFromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadRequestToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1SignRawPayloadRequestTypeToJson,
    fromJson: v1SignRawPayloadRequestTypeFromJson,
  )
  final enums.V1SignRawPayloadRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1SignRawPayloadIntentV2 parameters;
  static const fromJsonFactory = _$V1SignRawPayloadRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1SignRawPayloadRequestExtension on V1SignRawPayloadRequest {
  V1SignRawPayloadRequest copyWith(
      {enums.V1SignRawPayloadRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1SignRawPayloadIntentV2? parameters}) {
    return V1SignRawPayloadRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1SignRawPayloadRequest copyWithWrapped(
      {Wrapped<enums.V1SignRawPayloadRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1SignRawPayloadIntentV2>? parameters}) {
    return V1SignRawPayloadRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadResult {
  const V1SignRawPayloadResult({
    required this.r,
    required this.s,
    required this.v,
  });

  factory V1SignRawPayloadResult.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadResultFromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadResultToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadResultToJson(this);

  @JsonKey(name: 'r')
  final String r;
  @JsonKey(name: 's')
  final String s;
  @JsonKey(name: 'v')
  final String v;
  static const fromJsonFactory = _$V1SignRawPayloadResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadResult &&
            (identical(other.r, r) ||
                const DeepCollectionEquality().equals(other.r, r)) &&
            (identical(other.s, s) ||
                const DeepCollectionEquality().equals(other.s, s)) &&
            (identical(other.v, v) ||
                const DeepCollectionEquality().equals(other.v, v)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(r) ^
      const DeepCollectionEquality().hash(s) ^
      const DeepCollectionEquality().hash(v) ^
      runtimeType.hashCode;
}

extension $V1SignRawPayloadResultExtension on V1SignRawPayloadResult {
  V1SignRawPayloadResult copyWith({String? r, String? s, String? v}) {
    return V1SignRawPayloadResult(
        r: r ?? this.r, s: s ?? this.s, v: v ?? this.v);
  }

  V1SignRawPayloadResult copyWithWrapped(
      {Wrapped<String>? r, Wrapped<String>? s, Wrapped<String>? v}) {
    return V1SignRawPayloadResult(
        r: (r != null ? r.value : this.r),
        s: (s != null ? s.value : this.s),
        v: (v != null ? v.value : this.v));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadsIntent {
  const V1SignRawPayloadsIntent({
    required this.signWith,
    required this.payloads,
    required this.encoding,
    required this.hashFunction,
  });

  factory V1SignRawPayloadsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadsIntentFromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadsIntentToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadsIntentToJson(this);

  @JsonKey(name: 'signWith')
  final String signWith;
  @JsonKey(name: 'payloads', defaultValue: <String>[])
  final List<String> payloads;
  @JsonKey(
    name: 'encoding',
    toJson: v1PayloadEncodingToJson,
    fromJson: v1PayloadEncodingFromJson,
  )
  final enums.V1PayloadEncoding encoding;
  @JsonKey(
    name: 'hashFunction',
    toJson: v1HashFunctionToJson,
    fromJson: v1HashFunctionFromJson,
  )
  final enums.V1HashFunction hashFunction;
  static const fromJsonFactory = _$V1SignRawPayloadsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadsIntent &&
            (identical(other.signWith, signWith) ||
                const DeepCollectionEquality()
                    .equals(other.signWith, signWith)) &&
            (identical(other.payloads, payloads) ||
                const DeepCollectionEquality()
                    .equals(other.payloads, payloads)) &&
            (identical(other.encoding, encoding) ||
                const DeepCollectionEquality()
                    .equals(other.encoding, encoding)) &&
            (identical(other.hashFunction, hashFunction) ||
                const DeepCollectionEquality()
                    .equals(other.hashFunction, hashFunction)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(signWith) ^
      const DeepCollectionEquality().hash(payloads) ^
      const DeepCollectionEquality().hash(encoding) ^
      const DeepCollectionEquality().hash(hashFunction) ^
      runtimeType.hashCode;
}

extension $V1SignRawPayloadsIntentExtension on V1SignRawPayloadsIntent {
  V1SignRawPayloadsIntent copyWith(
      {String? signWith,
      List<String>? payloads,
      enums.V1PayloadEncoding? encoding,
      enums.V1HashFunction? hashFunction}) {
    return V1SignRawPayloadsIntent(
        signWith: signWith ?? this.signWith,
        payloads: payloads ?? this.payloads,
        encoding: encoding ?? this.encoding,
        hashFunction: hashFunction ?? this.hashFunction);
  }

  V1SignRawPayloadsIntent copyWithWrapped(
      {Wrapped<String>? signWith,
      Wrapped<List<String>>? payloads,
      Wrapped<enums.V1PayloadEncoding>? encoding,
      Wrapped<enums.V1HashFunction>? hashFunction}) {
    return V1SignRawPayloadsIntent(
        signWith: (signWith != null ? signWith.value : this.signWith),
        payloads: (payloads != null ? payloads.value : this.payloads),
        encoding: (encoding != null ? encoding.value : this.encoding),
        hashFunction:
            (hashFunction != null ? hashFunction.value : this.hashFunction));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadsRequest {
  const V1SignRawPayloadsRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1SignRawPayloadsRequest.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadsRequestFromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadsRequestToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadsRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1SignRawPayloadsRequestTypeToJson,
    fromJson: v1SignRawPayloadsRequestTypeFromJson,
  )
  final enums.V1SignRawPayloadsRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1SignRawPayloadsIntent parameters;
  static const fromJsonFactory = _$V1SignRawPayloadsRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadsRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1SignRawPayloadsRequestExtension on V1SignRawPayloadsRequest {
  V1SignRawPayloadsRequest copyWith(
      {enums.V1SignRawPayloadsRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1SignRawPayloadsIntent? parameters}) {
    return V1SignRawPayloadsRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1SignRawPayloadsRequest copyWithWrapped(
      {Wrapped<enums.V1SignRawPayloadsRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1SignRawPayloadsIntent>? parameters}) {
    return V1SignRawPayloadsRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignRawPayloadsResult {
  const V1SignRawPayloadsResult({
    this.signatures,
  });

  factory V1SignRawPayloadsResult.fromJson(Map<String, dynamic> json) =>
      _$V1SignRawPayloadsResultFromJson(json);

  static const toJsonFactory = _$V1SignRawPayloadsResultToJson;
  Map<String, dynamic> toJson() => _$V1SignRawPayloadsResultToJson(this);

  @JsonKey(name: 'signatures', defaultValue: <V1SignRawPayloadResult>[])
  final List<V1SignRawPayloadResult>? signatures;
  static const fromJsonFactory = _$V1SignRawPayloadsResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignRawPayloadsResult &&
            (identical(other.signatures, signatures) ||
                const DeepCollectionEquality()
                    .equals(other.signatures, signatures)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(signatures) ^ runtimeType.hashCode;
}

extension $V1SignRawPayloadsResultExtension on V1SignRawPayloadsResult {
  V1SignRawPayloadsResult copyWith({List<V1SignRawPayloadResult>? signatures}) {
    return V1SignRawPayloadsResult(signatures: signatures ?? this.signatures);
  }

  V1SignRawPayloadsResult copyWithWrapped(
      {Wrapped<List<V1SignRawPayloadResult>?>? signatures}) {
    return V1SignRawPayloadsResult(
        signatures: (signatures != null ? signatures.value : this.signatures));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignTransactionIntent {
  const V1SignTransactionIntent({
    required this.privateKeyId,
    required this.unsignedTransaction,
    required this.type,
  });

  factory V1SignTransactionIntent.fromJson(Map<String, dynamic> json) =>
      _$V1SignTransactionIntentFromJson(json);

  static const toJsonFactory = _$V1SignTransactionIntentToJson;
  Map<String, dynamic> toJson() => _$V1SignTransactionIntentToJson(this);

  @JsonKey(name: 'privateKeyId')
  final String privateKeyId;
  @JsonKey(name: 'unsignedTransaction')
  final String unsignedTransaction;
  @JsonKey(
    name: 'type',
    toJson: v1TransactionTypeToJson,
    fromJson: v1TransactionTypeFromJson,
  )
  final enums.V1TransactionType type;
  static const fromJsonFactory = _$V1SignTransactionIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignTransactionIntent &&
            (identical(other.privateKeyId, privateKeyId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyId, privateKeyId)) &&
            (identical(other.unsignedTransaction, unsignedTransaction) ||
                const DeepCollectionEquality()
                    .equals(other.unsignedTransaction, unsignedTransaction)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyId) ^
      const DeepCollectionEquality().hash(unsignedTransaction) ^
      const DeepCollectionEquality().hash(type) ^
      runtimeType.hashCode;
}

extension $V1SignTransactionIntentExtension on V1SignTransactionIntent {
  V1SignTransactionIntent copyWith(
      {String? privateKeyId,
      String? unsignedTransaction,
      enums.V1TransactionType? type}) {
    return V1SignTransactionIntent(
        privateKeyId: privateKeyId ?? this.privateKeyId,
        unsignedTransaction: unsignedTransaction ?? this.unsignedTransaction,
        type: type ?? this.type);
  }

  V1SignTransactionIntent copyWithWrapped(
      {Wrapped<String>? privateKeyId,
      Wrapped<String>? unsignedTransaction,
      Wrapped<enums.V1TransactionType>? type}) {
    return V1SignTransactionIntent(
        privateKeyId:
            (privateKeyId != null ? privateKeyId.value : this.privateKeyId),
        unsignedTransaction: (unsignedTransaction != null
            ? unsignedTransaction.value
            : this.unsignedTransaction),
        type: (type != null ? type.value : this.type));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignTransactionIntentV2 {
  const V1SignTransactionIntentV2({
    required this.signWith,
    required this.unsignedTransaction,
    required this.type,
  });

  factory V1SignTransactionIntentV2.fromJson(Map<String, dynamic> json) =>
      _$V1SignTransactionIntentV2FromJson(json);

  static const toJsonFactory = _$V1SignTransactionIntentV2ToJson;
  Map<String, dynamic> toJson() => _$V1SignTransactionIntentV2ToJson(this);

  @JsonKey(name: 'signWith')
  final String signWith;
  @JsonKey(name: 'unsignedTransaction')
  final String unsignedTransaction;
  @JsonKey(
    name: 'type',
    toJson: v1TransactionTypeToJson,
    fromJson: v1TransactionTypeFromJson,
  )
  final enums.V1TransactionType type;
  static const fromJsonFactory = _$V1SignTransactionIntentV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignTransactionIntentV2 &&
            (identical(other.signWith, signWith) ||
                const DeepCollectionEquality()
                    .equals(other.signWith, signWith)) &&
            (identical(other.unsignedTransaction, unsignedTransaction) ||
                const DeepCollectionEquality()
                    .equals(other.unsignedTransaction, unsignedTransaction)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(signWith) ^
      const DeepCollectionEquality().hash(unsignedTransaction) ^
      const DeepCollectionEquality().hash(type) ^
      runtimeType.hashCode;
}

extension $V1SignTransactionIntentV2Extension on V1SignTransactionIntentV2 {
  V1SignTransactionIntentV2 copyWith(
      {String? signWith,
      String? unsignedTransaction,
      enums.V1TransactionType? type}) {
    return V1SignTransactionIntentV2(
        signWith: signWith ?? this.signWith,
        unsignedTransaction: unsignedTransaction ?? this.unsignedTransaction,
        type: type ?? this.type);
  }

  V1SignTransactionIntentV2 copyWithWrapped(
      {Wrapped<String>? signWith,
      Wrapped<String>? unsignedTransaction,
      Wrapped<enums.V1TransactionType>? type}) {
    return V1SignTransactionIntentV2(
        signWith: (signWith != null ? signWith.value : this.signWith),
        unsignedTransaction: (unsignedTransaction != null
            ? unsignedTransaction.value
            : this.unsignedTransaction),
        type: (type != null ? type.value : this.type));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignTransactionRequest {
  const V1SignTransactionRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1SignTransactionRequest.fromJson(Map<String, dynamic> json) =>
      _$V1SignTransactionRequestFromJson(json);

  static const toJsonFactory = _$V1SignTransactionRequestToJson;
  Map<String, dynamic> toJson() => _$V1SignTransactionRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1SignTransactionRequestTypeToJson,
    fromJson: v1SignTransactionRequestTypeFromJson,
  )
  final enums.V1SignTransactionRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1SignTransactionIntentV2 parameters;
  static const fromJsonFactory = _$V1SignTransactionRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignTransactionRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1SignTransactionRequestExtension on V1SignTransactionRequest {
  V1SignTransactionRequest copyWith(
      {enums.V1SignTransactionRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1SignTransactionIntentV2? parameters}) {
    return V1SignTransactionRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1SignTransactionRequest copyWithWrapped(
      {Wrapped<enums.V1SignTransactionRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1SignTransactionIntentV2>? parameters}) {
    return V1SignTransactionRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SignTransactionResult {
  const V1SignTransactionResult({
    required this.signedTransaction,
  });

  factory V1SignTransactionResult.fromJson(Map<String, dynamic> json) =>
      _$V1SignTransactionResultFromJson(json);

  static const toJsonFactory = _$V1SignTransactionResultToJson;
  Map<String, dynamic> toJson() => _$V1SignTransactionResultToJson(this);

  @JsonKey(name: 'signedTransaction')
  final String signedTransaction;
  static const fromJsonFactory = _$V1SignTransactionResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SignTransactionResult &&
            (identical(other.signedTransaction, signedTransaction) ||
                const DeepCollectionEquality()
                    .equals(other.signedTransaction, signedTransaction)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(signedTransaction) ^
      runtimeType.hashCode;
}

extension $V1SignTransactionResultExtension on V1SignTransactionResult {
  V1SignTransactionResult copyWith({String? signedTransaction}) {
    return V1SignTransactionResult(
        signedTransaction: signedTransaction ?? this.signedTransaction);
  }

  V1SignTransactionResult copyWithWrapped(
      {Wrapped<String>? signedTransaction}) {
    return V1SignTransactionResult(
        signedTransaction: (signedTransaction != null
            ? signedTransaction.value
            : this.signedTransaction));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SimpleClientExtensionResults {
  const V1SimpleClientExtensionResults({
    this.appid,
    this.appidExclude,
    this.credProps,
  });

  factory V1SimpleClientExtensionResults.fromJson(Map<String, dynamic> json) =>
      _$V1SimpleClientExtensionResultsFromJson(json);

  static const toJsonFactory = _$V1SimpleClientExtensionResultsToJson;
  Map<String, dynamic> toJson() => _$V1SimpleClientExtensionResultsToJson(this);

  @JsonKey(name: 'appid')
  final bool? appid;
  @JsonKey(name: 'appidExclude')
  final bool? appidExclude;
  @JsonKey(name: 'credProps')
  final V1CredPropsAuthenticationExtensionsClientOutputs? credProps;
  static const fromJsonFactory = _$V1SimpleClientExtensionResultsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SimpleClientExtensionResults &&
            (identical(other.appid, appid) ||
                const DeepCollectionEquality().equals(other.appid, appid)) &&
            (identical(other.appidExclude, appidExclude) ||
                const DeepCollectionEquality()
                    .equals(other.appidExclude, appidExclude)) &&
            (identical(other.credProps, credProps) ||
                const DeepCollectionEquality()
                    .equals(other.credProps, credProps)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(appid) ^
      const DeepCollectionEquality().hash(appidExclude) ^
      const DeepCollectionEquality().hash(credProps) ^
      runtimeType.hashCode;
}

extension $V1SimpleClientExtensionResultsExtension
    on V1SimpleClientExtensionResults {
  V1SimpleClientExtensionResults copyWith(
      {bool? appid,
      bool? appidExclude,
      V1CredPropsAuthenticationExtensionsClientOutputs? credProps}) {
    return V1SimpleClientExtensionResults(
        appid: appid ?? this.appid,
        appidExclude: appidExclude ?? this.appidExclude,
        credProps: credProps ?? this.credProps);
  }

  V1SimpleClientExtensionResults copyWithWrapped(
      {Wrapped<bool?>? appid,
      Wrapped<bool?>? appidExclude,
      Wrapped<V1CredPropsAuthenticationExtensionsClientOutputs?>? credProps}) {
    return V1SimpleClientExtensionResults(
        appid: (appid != null ? appid.value : this.appid),
        appidExclude:
            (appidExclude != null ? appidExclude.value : this.appidExclude),
        credProps: (credProps != null ? credProps.value : this.credProps));
  }
}

@JsonSerializable(explicitToJson: true)
class V1SmsCustomizationParams {
  const V1SmsCustomizationParams({
    this.template,
  });

  factory V1SmsCustomizationParams.fromJson(Map<String, dynamic> json) =>
      _$V1SmsCustomizationParamsFromJson(json);

  static const toJsonFactory = _$V1SmsCustomizationParamsToJson;
  Map<String, dynamic> toJson() => _$V1SmsCustomizationParamsToJson(this);

  @JsonKey(name: 'template')
  final String? template;
  static const fromJsonFactory = _$V1SmsCustomizationParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1SmsCustomizationParams &&
            (identical(other.template, template) ||
                const DeepCollectionEquality()
                    .equals(other.template, template)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(template) ^ runtimeType.hashCode;
}

extension $V1SmsCustomizationParamsExtension on V1SmsCustomizationParams {
  V1SmsCustomizationParams copyWith({String? template}) {
    return V1SmsCustomizationParams(template: template ?? this.template);
  }

  V1SmsCustomizationParams copyWithWrapped({Wrapped<String?>? template}) {
    return V1SmsCustomizationParams(
        template: (template != null ? template.value : this.template));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateAllowedOriginsIntent {
  const V1UpdateAllowedOriginsIntent({
    required this.allowedOrigins,
  });

  factory V1UpdateAllowedOriginsIntent.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateAllowedOriginsIntentFromJson(json);

  static const toJsonFactory = _$V1UpdateAllowedOriginsIntentToJson;
  Map<String, dynamic> toJson() => _$V1UpdateAllowedOriginsIntentToJson(this);

  @JsonKey(name: 'allowedOrigins', defaultValue: <String>[])
  final List<String> allowedOrigins;
  static const fromJsonFactory = _$V1UpdateAllowedOriginsIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateAllowedOriginsIntent &&
            (identical(other.allowedOrigins, allowedOrigins) ||
                const DeepCollectionEquality()
                    .equals(other.allowedOrigins, allowedOrigins)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(allowedOrigins) ^
      runtimeType.hashCode;
}

extension $V1UpdateAllowedOriginsIntentExtension
    on V1UpdateAllowedOriginsIntent {
  V1UpdateAllowedOriginsIntent copyWith({List<String>? allowedOrigins}) {
    return V1UpdateAllowedOriginsIntent(
        allowedOrigins: allowedOrigins ?? this.allowedOrigins);
  }

  V1UpdateAllowedOriginsIntent copyWithWrapped(
      {Wrapped<List<String>>? allowedOrigins}) {
    return V1UpdateAllowedOriginsIntent(
        allowedOrigins: (allowedOrigins != null
            ? allowedOrigins.value
            : this.allowedOrigins));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateAllowedOriginsResult {
  const V1UpdateAllowedOriginsResult();

  factory V1UpdateAllowedOriginsResult.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateAllowedOriginsResultFromJson(json);

  static const toJsonFactory = _$V1UpdateAllowedOriginsResultToJson;
  Map<String, dynamic> toJson() => _$V1UpdateAllowedOriginsResultToJson(this);

  static const fromJsonFactory = _$V1UpdateAllowedOriginsResultFromJson;

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class V1UpdatePolicyIntent {
  const V1UpdatePolicyIntent({
    required this.policyId,
    this.policyName,
    this.policyEffect,
    this.policyCondition,
    this.policyConsensus,
    this.policyNotes,
  });

  factory V1UpdatePolicyIntent.fromJson(Map<String, dynamic> json) =>
      _$V1UpdatePolicyIntentFromJson(json);

  static const toJsonFactory = _$V1UpdatePolicyIntentToJson;
  Map<String, dynamic> toJson() => _$V1UpdatePolicyIntentToJson(this);

  @JsonKey(name: 'policyId')
  final String policyId;
  @JsonKey(name: 'policyName')
  final String? policyName;
  @JsonKey(
    name: 'policyEffect',
    toJson: v1EffectNullableToJson,
    fromJson: v1EffectNullableFromJson,
  )
  final enums.V1Effect? policyEffect;
  @JsonKey(name: 'policyCondition')
  final String? policyCondition;
  @JsonKey(name: 'policyConsensus')
  final String? policyConsensus;
  @JsonKey(name: 'policyNotes')
  final String? policyNotes;
  static const fromJsonFactory = _$V1UpdatePolicyIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdatePolicyIntent &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)) &&
            (identical(other.policyName, policyName) ||
                const DeepCollectionEquality()
                    .equals(other.policyName, policyName)) &&
            (identical(other.policyEffect, policyEffect) ||
                const DeepCollectionEquality()
                    .equals(other.policyEffect, policyEffect)) &&
            (identical(other.policyCondition, policyCondition) ||
                const DeepCollectionEquality()
                    .equals(other.policyCondition, policyCondition)) &&
            (identical(other.policyConsensus, policyConsensus) ||
                const DeepCollectionEquality()
                    .equals(other.policyConsensus, policyConsensus)) &&
            (identical(other.policyNotes, policyNotes) ||
                const DeepCollectionEquality()
                    .equals(other.policyNotes, policyNotes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyId) ^
      const DeepCollectionEquality().hash(policyName) ^
      const DeepCollectionEquality().hash(policyEffect) ^
      const DeepCollectionEquality().hash(policyCondition) ^
      const DeepCollectionEquality().hash(policyConsensus) ^
      const DeepCollectionEquality().hash(policyNotes) ^
      runtimeType.hashCode;
}

extension $V1UpdatePolicyIntentExtension on V1UpdatePolicyIntent {
  V1UpdatePolicyIntent copyWith(
      {String? policyId,
      String? policyName,
      enums.V1Effect? policyEffect,
      String? policyCondition,
      String? policyConsensus,
      String? policyNotes}) {
    return V1UpdatePolicyIntent(
        policyId: policyId ?? this.policyId,
        policyName: policyName ?? this.policyName,
        policyEffect: policyEffect ?? this.policyEffect,
        policyCondition: policyCondition ?? this.policyCondition,
        policyConsensus: policyConsensus ?? this.policyConsensus,
        policyNotes: policyNotes ?? this.policyNotes);
  }

  V1UpdatePolicyIntent copyWithWrapped(
      {Wrapped<String>? policyId,
      Wrapped<String?>? policyName,
      Wrapped<enums.V1Effect?>? policyEffect,
      Wrapped<String?>? policyCondition,
      Wrapped<String?>? policyConsensus,
      Wrapped<String?>? policyNotes}) {
    return V1UpdatePolicyIntent(
        policyId: (policyId != null ? policyId.value : this.policyId),
        policyName: (policyName != null ? policyName.value : this.policyName),
        policyEffect:
            (policyEffect != null ? policyEffect.value : this.policyEffect),
        policyCondition: (policyCondition != null
            ? policyCondition.value
            : this.policyCondition),
        policyConsensus: (policyConsensus != null
            ? policyConsensus.value
            : this.policyConsensus),
        policyNotes:
            (policyNotes != null ? policyNotes.value : this.policyNotes));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdatePolicyRequest {
  const V1UpdatePolicyRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1UpdatePolicyRequest.fromJson(Map<String, dynamic> json) =>
      _$V1UpdatePolicyRequestFromJson(json);

  static const toJsonFactory = _$V1UpdatePolicyRequestToJson;
  Map<String, dynamic> toJson() => _$V1UpdatePolicyRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1UpdatePolicyRequestTypeToJson,
    fromJson: v1UpdatePolicyRequestTypeFromJson,
  )
  final enums.V1UpdatePolicyRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1UpdatePolicyIntent parameters;
  static const fromJsonFactory = _$V1UpdatePolicyRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdatePolicyRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1UpdatePolicyRequestExtension on V1UpdatePolicyRequest {
  V1UpdatePolicyRequest copyWith(
      {enums.V1UpdatePolicyRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1UpdatePolicyIntent? parameters}) {
    return V1UpdatePolicyRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1UpdatePolicyRequest copyWithWrapped(
      {Wrapped<enums.V1UpdatePolicyRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1UpdatePolicyIntent>? parameters}) {
    return V1UpdatePolicyRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdatePolicyResult {
  const V1UpdatePolicyResult({
    required this.policyId,
  });

  factory V1UpdatePolicyResult.fromJson(Map<String, dynamic> json) =>
      _$V1UpdatePolicyResultFromJson(json);

  static const toJsonFactory = _$V1UpdatePolicyResultToJson;
  Map<String, dynamic> toJson() => _$V1UpdatePolicyResultToJson(this);

  @JsonKey(name: 'policyId')
  final String policyId;
  static const fromJsonFactory = _$V1UpdatePolicyResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdatePolicyResult &&
            (identical(other.policyId, policyId) ||
                const DeepCollectionEquality()
                    .equals(other.policyId, policyId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(policyId) ^ runtimeType.hashCode;
}

extension $V1UpdatePolicyResultExtension on V1UpdatePolicyResult {
  V1UpdatePolicyResult copyWith({String? policyId}) {
    return V1UpdatePolicyResult(policyId: policyId ?? this.policyId);
  }

  V1UpdatePolicyResult copyWithWrapped({Wrapped<String>? policyId}) {
    return V1UpdatePolicyResult(
        policyId: (policyId != null ? policyId.value : this.policyId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdatePrivateKeyTagIntent {
  const V1UpdatePrivateKeyTagIntent({
    required this.privateKeyTagId,
    this.newPrivateKeyTagName,
    required this.addPrivateKeyIds,
    required this.removePrivateKeyIds,
  });

  factory V1UpdatePrivateKeyTagIntent.fromJson(Map<String, dynamic> json) =>
      _$V1UpdatePrivateKeyTagIntentFromJson(json);

  static const toJsonFactory = _$V1UpdatePrivateKeyTagIntentToJson;
  Map<String, dynamic> toJson() => _$V1UpdatePrivateKeyTagIntentToJson(this);

  @JsonKey(name: 'privateKeyTagId')
  final String privateKeyTagId;
  @JsonKey(name: 'newPrivateKeyTagName')
  final String? newPrivateKeyTagName;
  @JsonKey(name: 'addPrivateKeyIds', defaultValue: <String>[])
  final List<String> addPrivateKeyIds;
  @JsonKey(name: 'removePrivateKeyIds', defaultValue: <String>[])
  final List<String> removePrivateKeyIds;
  static const fromJsonFactory = _$V1UpdatePrivateKeyTagIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdatePrivateKeyTagIntent &&
            (identical(other.privateKeyTagId, privateKeyTagId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTagId, privateKeyTagId)) &&
            (identical(other.newPrivateKeyTagName, newPrivateKeyTagName) ||
                const DeepCollectionEquality().equals(
                    other.newPrivateKeyTagName, newPrivateKeyTagName)) &&
            (identical(other.addPrivateKeyIds, addPrivateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.addPrivateKeyIds, addPrivateKeyIds)) &&
            (identical(other.removePrivateKeyIds, removePrivateKeyIds) ||
                const DeepCollectionEquality()
                    .equals(other.removePrivateKeyIds, removePrivateKeyIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTagId) ^
      const DeepCollectionEquality().hash(newPrivateKeyTagName) ^
      const DeepCollectionEquality().hash(addPrivateKeyIds) ^
      const DeepCollectionEquality().hash(removePrivateKeyIds) ^
      runtimeType.hashCode;
}

extension $V1UpdatePrivateKeyTagIntentExtension on V1UpdatePrivateKeyTagIntent {
  V1UpdatePrivateKeyTagIntent copyWith(
      {String? privateKeyTagId,
      String? newPrivateKeyTagName,
      List<String>? addPrivateKeyIds,
      List<String>? removePrivateKeyIds}) {
    return V1UpdatePrivateKeyTagIntent(
        privateKeyTagId: privateKeyTagId ?? this.privateKeyTagId,
        newPrivateKeyTagName: newPrivateKeyTagName ?? this.newPrivateKeyTagName,
        addPrivateKeyIds: addPrivateKeyIds ?? this.addPrivateKeyIds,
        removePrivateKeyIds: removePrivateKeyIds ?? this.removePrivateKeyIds);
  }

  V1UpdatePrivateKeyTagIntent copyWithWrapped(
      {Wrapped<String>? privateKeyTagId,
      Wrapped<String?>? newPrivateKeyTagName,
      Wrapped<List<String>>? addPrivateKeyIds,
      Wrapped<List<String>>? removePrivateKeyIds}) {
    return V1UpdatePrivateKeyTagIntent(
        privateKeyTagId: (privateKeyTagId != null
            ? privateKeyTagId.value
            : this.privateKeyTagId),
        newPrivateKeyTagName: (newPrivateKeyTagName != null
            ? newPrivateKeyTagName.value
            : this.newPrivateKeyTagName),
        addPrivateKeyIds: (addPrivateKeyIds != null
            ? addPrivateKeyIds.value
            : this.addPrivateKeyIds),
        removePrivateKeyIds: (removePrivateKeyIds != null
            ? removePrivateKeyIds.value
            : this.removePrivateKeyIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdatePrivateKeyTagRequest {
  const V1UpdatePrivateKeyTagRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1UpdatePrivateKeyTagRequest.fromJson(Map<String, dynamic> json) =>
      _$V1UpdatePrivateKeyTagRequestFromJson(json);

  static const toJsonFactory = _$V1UpdatePrivateKeyTagRequestToJson;
  Map<String, dynamic> toJson() => _$V1UpdatePrivateKeyTagRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1UpdatePrivateKeyTagRequestTypeToJson,
    fromJson: v1UpdatePrivateKeyTagRequestTypeFromJson,
  )
  final enums.V1UpdatePrivateKeyTagRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1UpdatePrivateKeyTagIntent parameters;
  static const fromJsonFactory = _$V1UpdatePrivateKeyTagRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdatePrivateKeyTagRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1UpdatePrivateKeyTagRequestExtension
    on V1UpdatePrivateKeyTagRequest {
  V1UpdatePrivateKeyTagRequest copyWith(
      {enums.V1UpdatePrivateKeyTagRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1UpdatePrivateKeyTagIntent? parameters}) {
    return V1UpdatePrivateKeyTagRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1UpdatePrivateKeyTagRequest copyWithWrapped(
      {Wrapped<enums.V1UpdatePrivateKeyTagRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1UpdatePrivateKeyTagIntent>? parameters}) {
    return V1UpdatePrivateKeyTagRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdatePrivateKeyTagResult {
  const V1UpdatePrivateKeyTagResult({
    required this.privateKeyTagId,
  });

  factory V1UpdatePrivateKeyTagResult.fromJson(Map<String, dynamic> json) =>
      _$V1UpdatePrivateKeyTagResultFromJson(json);

  static const toJsonFactory = _$V1UpdatePrivateKeyTagResultToJson;
  Map<String, dynamic> toJson() => _$V1UpdatePrivateKeyTagResultToJson(this);

  @JsonKey(name: 'privateKeyTagId')
  final String privateKeyTagId;
  static const fromJsonFactory = _$V1UpdatePrivateKeyTagResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdatePrivateKeyTagResult &&
            (identical(other.privateKeyTagId, privateKeyTagId) ||
                const DeepCollectionEquality()
                    .equals(other.privateKeyTagId, privateKeyTagId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(privateKeyTagId) ^
      runtimeType.hashCode;
}

extension $V1UpdatePrivateKeyTagResultExtension on V1UpdatePrivateKeyTagResult {
  V1UpdatePrivateKeyTagResult copyWith({String? privateKeyTagId}) {
    return V1UpdatePrivateKeyTagResult(
        privateKeyTagId: privateKeyTagId ?? this.privateKeyTagId);
  }

  V1UpdatePrivateKeyTagResult copyWithWrapped(
      {Wrapped<String>? privateKeyTagId}) {
    return V1UpdatePrivateKeyTagResult(
        privateKeyTagId: (privateKeyTagId != null
            ? privateKeyTagId.value
            : this.privateKeyTagId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateRootQuorumIntent {
  const V1UpdateRootQuorumIntent({
    required this.threshold,
    required this.userIds,
  });

  factory V1UpdateRootQuorumIntent.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateRootQuorumIntentFromJson(json);

  static const toJsonFactory = _$V1UpdateRootQuorumIntentToJson;
  Map<String, dynamic> toJson() => _$V1UpdateRootQuorumIntentToJson(this);

  @JsonKey(name: 'threshold')
  final int threshold;
  @JsonKey(name: 'userIds', defaultValue: <String>[])
  final List<String> userIds;
  static const fromJsonFactory = _$V1UpdateRootQuorumIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateRootQuorumIntent &&
            (identical(other.threshold, threshold) ||
                const DeepCollectionEquality()
                    .equals(other.threshold, threshold)) &&
            (identical(other.userIds, userIds) ||
                const DeepCollectionEquality().equals(other.userIds, userIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(threshold) ^
      const DeepCollectionEquality().hash(userIds) ^
      runtimeType.hashCode;
}

extension $V1UpdateRootQuorumIntentExtension on V1UpdateRootQuorumIntent {
  V1UpdateRootQuorumIntent copyWith({int? threshold, List<String>? userIds}) {
    return V1UpdateRootQuorumIntent(
        threshold: threshold ?? this.threshold,
        userIds: userIds ?? this.userIds);
  }

  V1UpdateRootQuorumIntent copyWithWrapped(
      {Wrapped<int>? threshold, Wrapped<List<String>>? userIds}) {
    return V1UpdateRootQuorumIntent(
        threshold: (threshold != null ? threshold.value : this.threshold),
        userIds: (userIds != null ? userIds.value : this.userIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateRootQuorumRequest {
  const V1UpdateRootQuorumRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1UpdateRootQuorumRequest.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateRootQuorumRequestFromJson(json);

  static const toJsonFactory = _$V1UpdateRootQuorumRequestToJson;
  Map<String, dynamic> toJson() => _$V1UpdateRootQuorumRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1UpdateRootQuorumRequestTypeToJson,
    fromJson: v1UpdateRootQuorumRequestTypeFromJson,
  )
  final enums.V1UpdateRootQuorumRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1UpdateRootQuorumIntent parameters;
  static const fromJsonFactory = _$V1UpdateRootQuorumRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateRootQuorumRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1UpdateRootQuorumRequestExtension on V1UpdateRootQuorumRequest {
  V1UpdateRootQuorumRequest copyWith(
      {enums.V1UpdateRootQuorumRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1UpdateRootQuorumIntent? parameters}) {
    return V1UpdateRootQuorumRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1UpdateRootQuorumRequest copyWithWrapped(
      {Wrapped<enums.V1UpdateRootQuorumRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1UpdateRootQuorumIntent>? parameters}) {
    return V1UpdateRootQuorumRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateRootQuorumResult {
  const V1UpdateRootQuorumResult();

  factory V1UpdateRootQuorumResult.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateRootQuorumResultFromJson(json);

  static const toJsonFactory = _$V1UpdateRootQuorumResultToJson;
  Map<String, dynamic> toJson() => _$V1UpdateRootQuorumResultToJson(this);

  static const fromJsonFactory = _$V1UpdateRootQuorumResultFromJson;

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class V1UpdateUserIntent {
  const V1UpdateUserIntent({
    required this.userId,
    this.userName,
    this.userEmail,
    this.userTagIds,
    this.userPhoneNumber,
  });

  factory V1UpdateUserIntent.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateUserIntentFromJson(json);

  static const toJsonFactory = _$V1UpdateUserIntentToJson;
  Map<String, dynamic> toJson() => _$V1UpdateUserIntentToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'userName')
  final String? userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'userTagIds', defaultValue: <String>[])
  final List<String>? userTagIds;
  @JsonKey(name: 'userPhoneNumber')
  final String? userPhoneNumber;
  static const fromJsonFactory = _$V1UpdateUserIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateUserIntent &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.userTagIds, userTagIds) ||
                const DeepCollectionEquality()
                    .equals(other.userTagIds, userTagIds)) &&
            (identical(other.userPhoneNumber, userPhoneNumber) ||
                const DeepCollectionEquality()
                    .equals(other.userPhoneNumber, userPhoneNumber)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(userTagIds) ^
      const DeepCollectionEquality().hash(userPhoneNumber) ^
      runtimeType.hashCode;
}

extension $V1UpdateUserIntentExtension on V1UpdateUserIntent {
  V1UpdateUserIntent copyWith(
      {String? userId,
      String? userName,
      String? userEmail,
      List<String>? userTagIds,
      String? userPhoneNumber}) {
    return V1UpdateUserIntent(
        userId: userId ?? this.userId,
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        userTagIds: userTagIds ?? this.userTagIds,
        userPhoneNumber: userPhoneNumber ?? this.userPhoneNumber);
  }

  V1UpdateUserIntent copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<String?>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<List<String>?>? userTagIds,
      Wrapped<String?>? userPhoneNumber}) {
    return V1UpdateUserIntent(
        userId: (userId != null ? userId.value : this.userId),
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        userTagIds: (userTagIds != null ? userTagIds.value : this.userTagIds),
        userPhoneNumber: (userPhoneNumber != null
            ? userPhoneNumber.value
            : this.userPhoneNumber));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateUserRequest {
  const V1UpdateUserRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1UpdateUserRequest.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateUserRequestFromJson(json);

  static const toJsonFactory = _$V1UpdateUserRequestToJson;
  Map<String, dynamic> toJson() => _$V1UpdateUserRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1UpdateUserRequestTypeToJson,
    fromJson: v1UpdateUserRequestTypeFromJson,
  )
  final enums.V1UpdateUserRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1UpdateUserIntent parameters;
  static const fromJsonFactory = _$V1UpdateUserRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateUserRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1UpdateUserRequestExtension on V1UpdateUserRequest {
  V1UpdateUserRequest copyWith(
      {enums.V1UpdateUserRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1UpdateUserIntent? parameters}) {
    return V1UpdateUserRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1UpdateUserRequest copyWithWrapped(
      {Wrapped<enums.V1UpdateUserRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1UpdateUserIntent>? parameters}) {
    return V1UpdateUserRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateUserResult {
  const V1UpdateUserResult({
    required this.userId,
  });

  factory V1UpdateUserResult.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateUserResultFromJson(json);

  static const toJsonFactory = _$V1UpdateUserResultToJson;
  Map<String, dynamic> toJson() => _$V1UpdateUserResultToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  static const fromJsonFactory = _$V1UpdateUserResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateUserResult &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^ runtimeType.hashCode;
}

extension $V1UpdateUserResultExtension on V1UpdateUserResult {
  V1UpdateUserResult copyWith({String? userId}) {
    return V1UpdateUserResult(userId: userId ?? this.userId);
  }

  V1UpdateUserResult copyWithWrapped({Wrapped<String>? userId}) {
    return V1UpdateUserResult(
        userId: (userId != null ? userId.value : this.userId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateUserTagIntent {
  const V1UpdateUserTagIntent({
    required this.userTagId,
    this.newUserTagName,
    required this.addUserIds,
    required this.removeUserIds,
  });

  factory V1UpdateUserTagIntent.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateUserTagIntentFromJson(json);

  static const toJsonFactory = _$V1UpdateUserTagIntentToJson;
  Map<String, dynamic> toJson() => _$V1UpdateUserTagIntentToJson(this);

  @JsonKey(name: 'userTagId')
  final String userTagId;
  @JsonKey(name: 'newUserTagName')
  final String? newUserTagName;
  @JsonKey(name: 'addUserIds', defaultValue: <String>[])
  final List<String> addUserIds;
  @JsonKey(name: 'removeUserIds', defaultValue: <String>[])
  final List<String> removeUserIds;
  static const fromJsonFactory = _$V1UpdateUserTagIntentFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateUserTagIntent &&
            (identical(other.userTagId, userTagId) ||
                const DeepCollectionEquality()
                    .equals(other.userTagId, userTagId)) &&
            (identical(other.newUserTagName, newUserTagName) ||
                const DeepCollectionEquality()
                    .equals(other.newUserTagName, newUserTagName)) &&
            (identical(other.addUserIds, addUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.addUserIds, addUserIds)) &&
            (identical(other.removeUserIds, removeUserIds) ||
                const DeepCollectionEquality()
                    .equals(other.removeUserIds, removeUserIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTagId) ^
      const DeepCollectionEquality().hash(newUserTagName) ^
      const DeepCollectionEquality().hash(addUserIds) ^
      const DeepCollectionEquality().hash(removeUserIds) ^
      runtimeType.hashCode;
}

extension $V1UpdateUserTagIntentExtension on V1UpdateUserTagIntent {
  V1UpdateUserTagIntent copyWith(
      {String? userTagId,
      String? newUserTagName,
      List<String>? addUserIds,
      List<String>? removeUserIds}) {
    return V1UpdateUserTagIntent(
        userTagId: userTagId ?? this.userTagId,
        newUserTagName: newUserTagName ?? this.newUserTagName,
        addUserIds: addUserIds ?? this.addUserIds,
        removeUserIds: removeUserIds ?? this.removeUserIds);
  }

  V1UpdateUserTagIntent copyWithWrapped(
      {Wrapped<String>? userTagId,
      Wrapped<String?>? newUserTagName,
      Wrapped<List<String>>? addUserIds,
      Wrapped<List<String>>? removeUserIds}) {
    return V1UpdateUserTagIntent(
        userTagId: (userTagId != null ? userTagId.value : this.userTagId),
        newUserTagName: (newUserTagName != null
            ? newUserTagName.value
            : this.newUserTagName),
        addUserIds: (addUserIds != null ? addUserIds.value : this.addUserIds),
        removeUserIds:
            (removeUserIds != null ? removeUserIds.value : this.removeUserIds));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateUserTagRequest {
  const V1UpdateUserTagRequest({
    required this.type,
    required this.timestampMs,
    required this.organizationId,
    required this.parameters,
  });

  factory V1UpdateUserTagRequest.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateUserTagRequestFromJson(json);

  static const toJsonFactory = _$V1UpdateUserTagRequestToJson;
  Map<String, dynamic> toJson() => _$V1UpdateUserTagRequestToJson(this);

  @JsonKey(
    name: 'type',
    toJson: v1UpdateUserTagRequestTypeToJson,
    fromJson: v1UpdateUserTagRequestTypeFromJson,
  )
  final enums.V1UpdateUserTagRequestType type;
  @JsonKey(name: 'timestampMs')
  final String timestampMs;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'parameters')
  final V1UpdateUserTagIntent parameters;
  static const fromJsonFactory = _$V1UpdateUserTagRequestFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateUserTagRequest &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.timestampMs, timestampMs) ||
                const DeepCollectionEquality()
                    .equals(other.timestampMs, timestampMs)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(timestampMs) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(parameters) ^
      runtimeType.hashCode;
}

extension $V1UpdateUserTagRequestExtension on V1UpdateUserTagRequest {
  V1UpdateUserTagRequest copyWith(
      {enums.V1UpdateUserTagRequestType? type,
      String? timestampMs,
      String? organizationId,
      V1UpdateUserTagIntent? parameters}) {
    return V1UpdateUserTagRequest(
        type: type ?? this.type,
        timestampMs: timestampMs ?? this.timestampMs,
        organizationId: organizationId ?? this.organizationId,
        parameters: parameters ?? this.parameters);
  }

  V1UpdateUserTagRequest copyWithWrapped(
      {Wrapped<enums.V1UpdateUserTagRequestType>? type,
      Wrapped<String>? timestampMs,
      Wrapped<String>? organizationId,
      Wrapped<V1UpdateUserTagIntent>? parameters}) {
    return V1UpdateUserTagRequest(
        type: (type != null ? type.value : this.type),
        timestampMs:
            (timestampMs != null ? timestampMs.value : this.timestampMs),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        parameters: (parameters != null ? parameters.value : this.parameters));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UpdateUserTagResult {
  const V1UpdateUserTagResult({
    required this.userTagId,
  });

  factory V1UpdateUserTagResult.fromJson(Map<String, dynamic> json) =>
      _$V1UpdateUserTagResultFromJson(json);

  static const toJsonFactory = _$V1UpdateUserTagResultToJson;
  Map<String, dynamic> toJson() => _$V1UpdateUserTagResultToJson(this);

  @JsonKey(name: 'userTagId')
  final String userTagId;
  static const fromJsonFactory = _$V1UpdateUserTagResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UpdateUserTagResult &&
            (identical(other.userTagId, userTagId) ||
                const DeepCollectionEquality()
                    .equals(other.userTagId, userTagId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userTagId) ^ runtimeType.hashCode;
}

extension $V1UpdateUserTagResultExtension on V1UpdateUserTagResult {
  V1UpdateUserTagResult copyWith({String? userTagId}) {
    return V1UpdateUserTagResult(userTagId: userTagId ?? this.userTagId);
  }

  V1UpdateUserTagResult copyWithWrapped({Wrapped<String>? userTagId}) {
    return V1UpdateUserTagResult(
        userTagId: (userTagId != null ? userTagId.value : this.userTagId));
  }
}

@JsonSerializable(explicitToJson: true)
class V1User {
  const V1User({
    required this.userId,
    required this.userName,
    this.userEmail,
    this.userPhoneNumber,
    required this.authenticators,
    required this.apiKeys,
    required this.userTags,
    required this.oauthProviders,
    required this.createdAt,
    required this.updatedAt,
  });

  factory V1User.fromJson(Map<String, dynamic> json) => _$V1UserFromJson(json);

  static const toJsonFactory = _$V1UserToJson;
  Map<String, dynamic> toJson() => _$V1UserToJson(this);

  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'userPhoneNumber')
  final String? userPhoneNumber;
  @JsonKey(name: 'authenticators', defaultValue: <V1Authenticator>[])
  final List<V1Authenticator> authenticators;
  @JsonKey(name: 'apiKeys', defaultValue: <V1ApiKey>[])
  final List<V1ApiKey> apiKeys;
  @JsonKey(name: 'userTags', defaultValue: <String>[])
  final List<String> userTags;
  @JsonKey(name: 'oauthProviders', defaultValue: <V1OauthProvider>[])
  final List<V1OauthProvider> oauthProviders;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  static const fromJsonFactory = _$V1UserFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1User &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.userPhoneNumber, userPhoneNumber) ||
                const DeepCollectionEquality()
                    .equals(other.userPhoneNumber, userPhoneNumber)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.userTags, userTags) ||
                const DeepCollectionEquality()
                    .equals(other.userTags, userTags)) &&
            (identical(other.oauthProviders, oauthProviders) ||
                const DeepCollectionEquality()
                    .equals(other.oauthProviders, oauthProviders)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(userPhoneNumber) ^
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(userTags) ^
      const DeepCollectionEquality().hash(oauthProviders) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      runtimeType.hashCode;
}

extension $V1UserExtension on V1User {
  V1User copyWith(
      {String? userId,
      String? userName,
      String? userEmail,
      String? userPhoneNumber,
      List<V1Authenticator>? authenticators,
      List<V1ApiKey>? apiKeys,
      List<String>? userTags,
      List<V1OauthProvider>? oauthProviders,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt}) {
    return V1User(
        userId: userId ?? this.userId,
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        userPhoneNumber: userPhoneNumber ?? this.userPhoneNumber,
        authenticators: authenticators ?? this.authenticators,
        apiKeys: apiKeys ?? this.apiKeys,
        userTags: userTags ?? this.userTags,
        oauthProviders: oauthProviders ?? this.oauthProviders,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  V1User copyWithWrapped(
      {Wrapped<String>? userId,
      Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<String?>? userPhoneNumber,
      Wrapped<List<V1Authenticator>>? authenticators,
      Wrapped<List<V1ApiKey>>? apiKeys,
      Wrapped<List<String>>? userTags,
      Wrapped<List<V1OauthProvider>>? oauthProviders,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt}) {
    return V1User(
        userId: (userId != null ? userId.value : this.userId),
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        userPhoneNumber: (userPhoneNumber != null
            ? userPhoneNumber.value
            : this.userPhoneNumber),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        userTags: (userTags != null ? userTags.value : this.userTags),
        oauthProviders: (oauthProviders != null
            ? oauthProviders.value
            : this.oauthProviders),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UserParams {
  const V1UserParams({
    required this.userName,
    this.userEmail,
    required this.accessType,
    required this.apiKeys,
    required this.authenticators,
    required this.userTags,
  });

  factory V1UserParams.fromJson(Map<String, dynamic> json) =>
      _$V1UserParamsFromJson(json);

  static const toJsonFactory = _$V1UserParamsToJson;
  Map<String, dynamic> toJson() => _$V1UserParamsToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(
    name: 'accessType',
    toJson: v1AccessTypeToJson,
    fromJson: v1AccessTypeFromJson,
  )
  final enums.V1AccessType accessType;
  @JsonKey(name: 'apiKeys', defaultValue: <ApiApiKeyParams>[])
  final List<ApiApiKeyParams> apiKeys;
  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParams>[])
  final List<V1AuthenticatorParams> authenticators;
  @JsonKey(name: 'userTags', defaultValue: <String>[])
  final List<String> userTags;
  static const fromJsonFactory = _$V1UserParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UserParams &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.accessType, accessType) ||
                const DeepCollectionEquality()
                    .equals(other.accessType, accessType)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.userTags, userTags) ||
                const DeepCollectionEquality()
                    .equals(other.userTags, userTags)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(accessType) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(userTags) ^
      runtimeType.hashCode;
}

extension $V1UserParamsExtension on V1UserParams {
  V1UserParams copyWith(
      {String? userName,
      String? userEmail,
      enums.V1AccessType? accessType,
      List<ApiApiKeyParams>? apiKeys,
      List<V1AuthenticatorParams>? authenticators,
      List<String>? userTags}) {
    return V1UserParams(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        accessType: accessType ?? this.accessType,
        apiKeys: apiKeys ?? this.apiKeys,
        authenticators: authenticators ?? this.authenticators,
        userTags: userTags ?? this.userTags);
  }

  V1UserParams copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<enums.V1AccessType>? accessType,
      Wrapped<List<ApiApiKeyParams>>? apiKeys,
      Wrapped<List<V1AuthenticatorParams>>? authenticators,
      Wrapped<List<String>>? userTags}) {
    return V1UserParams(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        accessType: (accessType != null ? accessType.value : this.accessType),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        userTags: (userTags != null ? userTags.value : this.userTags));
  }
}

@JsonSerializable(explicitToJson: true)
class V1UserParamsV2 {
  const V1UserParamsV2({
    required this.userName,
    this.userEmail,
    required this.apiKeys,
    required this.authenticators,
    required this.userTags,
  });

  factory V1UserParamsV2.fromJson(Map<String, dynamic> json) =>
      _$V1UserParamsV2FromJson(json);

  static const toJsonFactory = _$V1UserParamsV2ToJson;
  Map<String, dynamic> toJson() => _$V1UserParamsV2ToJson(this);

  @JsonKey(name: 'userName')
  final String userName;
  @JsonKey(name: 'userEmail')
  final String? userEmail;
  @JsonKey(name: 'apiKeys', defaultValue: <ApiApiKeyParams>[])
  final List<ApiApiKeyParams> apiKeys;
  @JsonKey(name: 'authenticators', defaultValue: <V1AuthenticatorParamsV2>[])
  final List<V1AuthenticatorParamsV2> authenticators;
  @JsonKey(name: 'userTags', defaultValue: <String>[])
  final List<String> userTags;
  static const fromJsonFactory = _$V1UserParamsV2FromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1UserParamsV2 &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userEmail, userEmail) ||
                const DeepCollectionEquality()
                    .equals(other.userEmail, userEmail)) &&
            (identical(other.apiKeys, apiKeys) ||
                const DeepCollectionEquality()
                    .equals(other.apiKeys, apiKeys)) &&
            (identical(other.authenticators, authenticators) ||
                const DeepCollectionEquality()
                    .equals(other.authenticators, authenticators)) &&
            (identical(other.userTags, userTags) ||
                const DeepCollectionEquality()
                    .equals(other.userTags, userTags)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userEmail) ^
      const DeepCollectionEquality().hash(apiKeys) ^
      const DeepCollectionEquality().hash(authenticators) ^
      const DeepCollectionEquality().hash(userTags) ^
      runtimeType.hashCode;
}

extension $V1UserParamsV2Extension on V1UserParamsV2 {
  V1UserParamsV2 copyWith(
      {String? userName,
      String? userEmail,
      List<ApiApiKeyParams>? apiKeys,
      List<V1AuthenticatorParamsV2>? authenticators,
      List<String>? userTags}) {
    return V1UserParamsV2(
        userName: userName ?? this.userName,
        userEmail: userEmail ?? this.userEmail,
        apiKeys: apiKeys ?? this.apiKeys,
        authenticators: authenticators ?? this.authenticators,
        userTags: userTags ?? this.userTags);
  }

  V1UserParamsV2 copyWithWrapped(
      {Wrapped<String>? userName,
      Wrapped<String?>? userEmail,
      Wrapped<List<ApiApiKeyParams>>? apiKeys,
      Wrapped<List<V1AuthenticatorParamsV2>>? authenticators,
      Wrapped<List<String>>? userTags}) {
    return V1UserParamsV2(
        userName: (userName != null ? userName.value : this.userName),
        userEmail: (userEmail != null ? userEmail.value : this.userEmail),
        apiKeys: (apiKeys != null ? apiKeys.value : this.apiKeys),
        authenticators: (authenticators != null
            ? authenticators.value
            : this.authenticators),
        userTags: (userTags != null ? userTags.value : this.userTags));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Vote {
  const V1Vote({
    required this.id,
    required this.userId,
    required this.user,
    required this.activityId,
    required this.selection,
    required this.message,
    required this.publicKey,
    required this.signature,
    required this.scheme,
    required this.createdAt,
  });

  factory V1Vote.fromJson(Map<String, dynamic> json) => _$V1VoteFromJson(json);

  static const toJsonFactory = _$V1VoteToJson;
  Map<String, dynamic> toJson() => _$V1VoteToJson(this);

  @JsonKey(name: 'id')
  final String id;
  @JsonKey(name: 'userId')
  final String userId;
  @JsonKey(name: 'user')
  final V1User user;
  @JsonKey(name: 'activityId')
  final String activityId;
  @JsonKey(
    name: 'selection',
    toJson: v1VoteSelectionToJson,
    fromJson: v1VoteSelectionFromJson,
  )
  final enums.V1VoteSelection selection;
  @JsonKey(name: 'message')
  final String message;
  @JsonKey(name: 'publicKey')
  final String publicKey;
  @JsonKey(name: 'signature')
  final String signature;
  @JsonKey(name: 'scheme')
  final String scheme;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  static const fromJsonFactory = _$V1VoteFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Vote &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.user, user) ||
                const DeepCollectionEquality().equals(other.user, user)) &&
            (identical(other.activityId, activityId) ||
                const DeepCollectionEquality()
                    .equals(other.activityId, activityId)) &&
            (identical(other.selection, selection) ||
                const DeepCollectionEquality()
                    .equals(other.selection, selection)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality()
                    .equals(other.message, message)) &&
            (identical(other.publicKey, publicKey) ||
                const DeepCollectionEquality()
                    .equals(other.publicKey, publicKey)) &&
            (identical(other.signature, signature) ||
                const DeepCollectionEquality()
                    .equals(other.signature, signature)) &&
            (identical(other.scheme, scheme) ||
                const DeepCollectionEquality().equals(other.scheme, scheme)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(user) ^
      const DeepCollectionEquality().hash(activityId) ^
      const DeepCollectionEquality().hash(selection) ^
      const DeepCollectionEquality().hash(message) ^
      const DeepCollectionEquality().hash(publicKey) ^
      const DeepCollectionEquality().hash(signature) ^
      const DeepCollectionEquality().hash(scheme) ^
      const DeepCollectionEquality().hash(createdAt) ^
      runtimeType.hashCode;
}

extension $V1VoteExtension on V1Vote {
  V1Vote copyWith(
      {String? id,
      String? userId,
      V1User? user,
      String? activityId,
      enums.V1VoteSelection? selection,
      String? message,
      String? publicKey,
      String? signature,
      String? scheme,
      Externaldatav1Timestamp? createdAt}) {
    return V1Vote(
        id: id ?? this.id,
        userId: userId ?? this.userId,
        user: user ?? this.user,
        activityId: activityId ?? this.activityId,
        selection: selection ?? this.selection,
        message: message ?? this.message,
        publicKey: publicKey ?? this.publicKey,
        signature: signature ?? this.signature,
        scheme: scheme ?? this.scheme,
        createdAt: createdAt ?? this.createdAt);
  }

  V1Vote copyWithWrapped(
      {Wrapped<String>? id,
      Wrapped<String>? userId,
      Wrapped<V1User>? user,
      Wrapped<String>? activityId,
      Wrapped<enums.V1VoteSelection>? selection,
      Wrapped<String>? message,
      Wrapped<String>? publicKey,
      Wrapped<String>? signature,
      Wrapped<String>? scheme,
      Wrapped<Externaldatav1Timestamp>? createdAt}) {
    return V1Vote(
        id: (id != null ? id.value : this.id),
        userId: (userId != null ? userId.value : this.userId),
        user: (user != null ? user.value : this.user),
        activityId: (activityId != null ? activityId.value : this.activityId),
        selection: (selection != null ? selection.value : this.selection),
        message: (message != null ? message.value : this.message),
        publicKey: (publicKey != null ? publicKey.value : this.publicKey),
        signature: (signature != null ? signature.value : this.signature),
        scheme: (scheme != null ? scheme.value : this.scheme),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt));
  }
}

@JsonSerializable(explicitToJson: true)
class V1Wallet {
  const V1Wallet({
    required this.walletId,
    required this.walletName,
    required this.createdAt,
    required this.updatedAt,
    required this.exported,
    required this.imported,
  });

  factory V1Wallet.fromJson(Map<String, dynamic> json) =>
      _$V1WalletFromJson(json);

  static const toJsonFactory = _$V1WalletToJson;
  Map<String, dynamic> toJson() => _$V1WalletToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'walletName')
  final String walletName;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  @JsonKey(name: 'exported')
  final bool exported;
  @JsonKey(name: 'imported')
  final bool imported;
  static const fromJsonFactory = _$V1WalletFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1Wallet &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.walletName, walletName) ||
                const DeepCollectionEquality()
                    .equals(other.walletName, walletName)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)) &&
            (identical(other.exported, exported) ||
                const DeepCollectionEquality()
                    .equals(other.exported, exported)) &&
            (identical(other.imported, imported) ||
                const DeepCollectionEquality()
                    .equals(other.imported, imported)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(walletName) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      const DeepCollectionEquality().hash(exported) ^
      const DeepCollectionEquality().hash(imported) ^
      runtimeType.hashCode;
}

extension $V1WalletExtension on V1Wallet {
  V1Wallet copyWith(
      {String? walletId,
      String? walletName,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt,
      bool? exported,
      bool? imported}) {
    return V1Wallet(
        walletId: walletId ?? this.walletId,
        walletName: walletName ?? this.walletName,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt,
        exported: exported ?? this.exported,
        imported: imported ?? this.imported);
  }

  V1Wallet copyWithWrapped(
      {Wrapped<String>? walletId,
      Wrapped<String>? walletName,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt,
      Wrapped<bool>? exported,
      Wrapped<bool>? imported}) {
    return V1Wallet(
        walletId: (walletId != null ? walletId.value : this.walletId),
        walletName: (walletName != null ? walletName.value : this.walletName),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt),
        exported: (exported != null ? exported.value : this.exported),
        imported: (imported != null ? imported.value : this.imported));
  }
}

@JsonSerializable(explicitToJson: true)
class V1WalletAccount {
  const V1WalletAccount({
    required this.walletAccountId,
    required this.organizationId,
    required this.walletId,
    required this.curve,
    required this.pathFormat,
    required this.path,
    required this.addressFormat,
    required this.address,
    required this.createdAt,
    required this.updatedAt,
  });

  factory V1WalletAccount.fromJson(Map<String, dynamic> json) =>
      _$V1WalletAccountFromJson(json);

  static const toJsonFactory = _$V1WalletAccountToJson;
  Map<String, dynamic> toJson() => _$V1WalletAccountToJson(this);

  @JsonKey(name: 'walletAccountId')
  final String walletAccountId;
  @JsonKey(name: 'organizationId')
  final String organizationId;
  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(
    name: 'curve',
    toJson: v1CurveToJson,
    fromJson: v1CurveFromJson,
  )
  final enums.V1Curve curve;
  @JsonKey(
    name: 'pathFormat',
    toJson: v1PathFormatToJson,
    fromJson: v1PathFormatFromJson,
  )
  final enums.V1PathFormat pathFormat;
  @JsonKey(name: 'path')
  final String path;
  @JsonKey(
    name: 'addressFormat',
    toJson: v1AddressFormatToJson,
    fromJson: v1AddressFormatFromJson,
  )
  final enums.V1AddressFormat addressFormat;
  @JsonKey(name: 'address')
  final String address;
  @JsonKey(name: 'createdAt')
  final Externaldatav1Timestamp createdAt;
  @JsonKey(name: 'updatedAt')
  final Externaldatav1Timestamp updatedAt;
  static const fromJsonFactory = _$V1WalletAccountFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1WalletAccount &&
            (identical(other.walletAccountId, walletAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.walletAccountId, walletAccountId)) &&
            (identical(other.organizationId, organizationId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationId, organizationId)) &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.curve, curve) ||
                const DeepCollectionEquality().equals(other.curve, curve)) &&
            (identical(other.pathFormat, pathFormat) ||
                const DeepCollectionEquality()
                    .equals(other.pathFormat, pathFormat)) &&
            (identical(other.path, path) ||
                const DeepCollectionEquality().equals(other.path, path)) &&
            (identical(other.addressFormat, addressFormat) ||
                const DeepCollectionEquality()
                    .equals(other.addressFormat, addressFormat)) &&
            (identical(other.address, address) ||
                const DeepCollectionEquality()
                    .equals(other.address, address)) &&
            (identical(other.createdAt, createdAt) ||
                const DeepCollectionEquality()
                    .equals(other.createdAt, createdAt)) &&
            (identical(other.updatedAt, updatedAt) ||
                const DeepCollectionEquality()
                    .equals(other.updatedAt, updatedAt)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletAccountId) ^
      const DeepCollectionEquality().hash(organizationId) ^
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(curve) ^
      const DeepCollectionEquality().hash(pathFormat) ^
      const DeepCollectionEquality().hash(path) ^
      const DeepCollectionEquality().hash(addressFormat) ^
      const DeepCollectionEquality().hash(address) ^
      const DeepCollectionEquality().hash(createdAt) ^
      const DeepCollectionEquality().hash(updatedAt) ^
      runtimeType.hashCode;
}

extension $V1WalletAccountExtension on V1WalletAccount {
  V1WalletAccount copyWith(
      {String? walletAccountId,
      String? organizationId,
      String? walletId,
      enums.V1Curve? curve,
      enums.V1PathFormat? pathFormat,
      String? path,
      enums.V1AddressFormat? addressFormat,
      String? address,
      Externaldatav1Timestamp? createdAt,
      Externaldatav1Timestamp? updatedAt}) {
    return V1WalletAccount(
        walletAccountId: walletAccountId ?? this.walletAccountId,
        organizationId: organizationId ?? this.organizationId,
        walletId: walletId ?? this.walletId,
        curve: curve ?? this.curve,
        pathFormat: pathFormat ?? this.pathFormat,
        path: path ?? this.path,
        addressFormat: addressFormat ?? this.addressFormat,
        address: address ?? this.address,
        createdAt: createdAt ?? this.createdAt,
        updatedAt: updatedAt ?? this.updatedAt);
  }

  V1WalletAccount copyWithWrapped(
      {Wrapped<String>? walletAccountId,
      Wrapped<String>? organizationId,
      Wrapped<String>? walletId,
      Wrapped<enums.V1Curve>? curve,
      Wrapped<enums.V1PathFormat>? pathFormat,
      Wrapped<String>? path,
      Wrapped<enums.V1AddressFormat>? addressFormat,
      Wrapped<String>? address,
      Wrapped<Externaldatav1Timestamp>? createdAt,
      Wrapped<Externaldatav1Timestamp>? updatedAt}) {
    return V1WalletAccount(
        walletAccountId: (walletAccountId != null
            ? walletAccountId.value
            : this.walletAccountId),
        organizationId: (organizationId != null
            ? organizationId.value
            : this.organizationId),
        walletId: (walletId != null ? walletId.value : this.walletId),
        curve: (curve != null ? curve.value : this.curve),
        pathFormat: (pathFormat != null ? pathFormat.value : this.pathFormat),
        path: (path != null ? path.value : this.path),
        addressFormat:
            (addressFormat != null ? addressFormat.value : this.addressFormat),
        address: (address != null ? address.value : this.address),
        createdAt: (createdAt != null ? createdAt.value : this.createdAt),
        updatedAt: (updatedAt != null ? updatedAt.value : this.updatedAt));
  }
}

@JsonSerializable(explicitToJson: true)
class V1WalletAccountParams {
  const V1WalletAccountParams({
    required this.curve,
    required this.pathFormat,
    required this.path,
    required this.addressFormat,
  });

  factory V1WalletAccountParams.fromJson(Map<String, dynamic> json) =>
      _$V1WalletAccountParamsFromJson(json);

  static const toJsonFactory = _$V1WalletAccountParamsToJson;
  Map<String, dynamic> toJson() => _$V1WalletAccountParamsToJson(this);

  @JsonKey(
    name: 'curve',
    toJson: v1CurveToJson,
    fromJson: v1CurveFromJson,
  )
  final enums.V1Curve curve;
  @JsonKey(
    name: 'pathFormat',
    toJson: v1PathFormatToJson,
    fromJson: v1PathFormatFromJson,
  )
  final enums.V1PathFormat pathFormat;
  @JsonKey(name: 'path')
  final String path;
  @JsonKey(
    name: 'addressFormat',
    toJson: v1AddressFormatToJson,
    fromJson: v1AddressFormatFromJson,
  )
  final enums.V1AddressFormat addressFormat;
  static const fromJsonFactory = _$V1WalletAccountParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1WalletAccountParams &&
            (identical(other.curve, curve) ||
                const DeepCollectionEquality().equals(other.curve, curve)) &&
            (identical(other.pathFormat, pathFormat) ||
                const DeepCollectionEquality()
                    .equals(other.pathFormat, pathFormat)) &&
            (identical(other.path, path) ||
                const DeepCollectionEquality().equals(other.path, path)) &&
            (identical(other.addressFormat, addressFormat) ||
                const DeepCollectionEquality()
                    .equals(other.addressFormat, addressFormat)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(curve) ^
      const DeepCollectionEquality().hash(pathFormat) ^
      const DeepCollectionEquality().hash(path) ^
      const DeepCollectionEquality().hash(addressFormat) ^
      runtimeType.hashCode;
}

extension $V1WalletAccountParamsExtension on V1WalletAccountParams {
  V1WalletAccountParams copyWith(
      {enums.V1Curve? curve,
      enums.V1PathFormat? pathFormat,
      String? path,
      enums.V1AddressFormat? addressFormat}) {
    return V1WalletAccountParams(
        curve: curve ?? this.curve,
        pathFormat: pathFormat ?? this.pathFormat,
        path: path ?? this.path,
        addressFormat: addressFormat ?? this.addressFormat);
  }

  V1WalletAccountParams copyWithWrapped(
      {Wrapped<enums.V1Curve>? curve,
      Wrapped<enums.V1PathFormat>? pathFormat,
      Wrapped<String>? path,
      Wrapped<enums.V1AddressFormat>? addressFormat}) {
    return V1WalletAccountParams(
        curve: (curve != null ? curve.value : this.curve),
        pathFormat: (pathFormat != null ? pathFormat.value : this.pathFormat),
        path: (path != null ? path.value : this.path),
        addressFormat:
            (addressFormat != null ? addressFormat.value : this.addressFormat));
  }
}

@JsonSerializable(explicitToJson: true)
class V1WalletParams {
  const V1WalletParams({
    required this.walletName,
    required this.accounts,
    this.mnemonicLength,
  });

  factory V1WalletParams.fromJson(Map<String, dynamic> json) =>
      _$V1WalletParamsFromJson(json);

  static const toJsonFactory = _$V1WalletParamsToJson;
  Map<String, dynamic> toJson() => _$V1WalletParamsToJson(this);

  @JsonKey(name: 'walletName')
  final String walletName;
  @JsonKey(name: 'accounts', defaultValue: <V1WalletAccountParams>[])
  final List<V1WalletAccountParams> accounts;
  @JsonKey(name: 'mnemonicLength')
  final int? mnemonicLength;
  static const fromJsonFactory = _$V1WalletParamsFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1WalletParams &&
            (identical(other.walletName, walletName) ||
                const DeepCollectionEquality()
                    .equals(other.walletName, walletName)) &&
            (identical(other.accounts, accounts) ||
                const DeepCollectionEquality()
                    .equals(other.accounts, accounts)) &&
            (identical(other.mnemonicLength, mnemonicLength) ||
                const DeepCollectionEquality()
                    .equals(other.mnemonicLength, mnemonicLength)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletName) ^
      const DeepCollectionEquality().hash(accounts) ^
      const DeepCollectionEquality().hash(mnemonicLength) ^
      runtimeType.hashCode;
}

extension $V1WalletParamsExtension on V1WalletParams {
  V1WalletParams copyWith(
      {String? walletName,
      List<V1WalletAccountParams>? accounts,
      int? mnemonicLength}) {
    return V1WalletParams(
        walletName: walletName ?? this.walletName,
        accounts: accounts ?? this.accounts,
        mnemonicLength: mnemonicLength ?? this.mnemonicLength);
  }

  V1WalletParams copyWithWrapped(
      {Wrapped<String>? walletName,
      Wrapped<List<V1WalletAccountParams>>? accounts,
      Wrapped<int?>? mnemonicLength}) {
    return V1WalletParams(
        walletName: (walletName != null ? walletName.value : this.walletName),
        accounts: (accounts != null ? accounts.value : this.accounts),
        mnemonicLength: (mnemonicLength != null
            ? mnemonicLength.value
            : this.mnemonicLength));
  }
}

@JsonSerializable(explicitToJson: true)
class V1WalletResult {
  const V1WalletResult({
    required this.walletId,
    required this.addresses,
  });

  factory V1WalletResult.fromJson(Map<String, dynamic> json) =>
      _$V1WalletResultFromJson(json);

  static const toJsonFactory = _$V1WalletResultToJson;
  Map<String, dynamic> toJson() => _$V1WalletResultToJson(this);

  @JsonKey(name: 'walletId')
  final String walletId;
  @JsonKey(name: 'addresses', defaultValue: <String>[])
  final List<String> addresses;
  static const fromJsonFactory = _$V1WalletResultFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1WalletResult &&
            (identical(other.walletId, walletId) ||
                const DeepCollectionEquality()
                    .equals(other.walletId, walletId)) &&
            (identical(other.addresses, addresses) ||
                const DeepCollectionEquality()
                    .equals(other.addresses, addresses)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(walletId) ^
      const DeepCollectionEquality().hash(addresses) ^
      runtimeType.hashCode;
}

extension $V1WalletResultExtension on V1WalletResult {
  V1WalletResult copyWith({String? walletId, List<String>? addresses}) {
    return V1WalletResult(
        walletId: walletId ?? this.walletId,
        addresses: addresses ?? this.addresses);
  }

  V1WalletResult copyWithWrapped(
      {Wrapped<String>? walletId, Wrapped<List<String>>? addresses}) {
    return V1WalletResult(
        walletId: (walletId != null ? walletId.value : this.walletId),
        addresses: (addresses != null ? addresses.value : this.addresses));
  }
}

@JsonSerializable(explicitToJson: true)
class V1WebAuthnStamp {
  const V1WebAuthnStamp({
    required this.credentialId,
    required this.clientDataJson,
    required this.authenticatorData,
    required this.signature,
  });

  factory V1WebAuthnStamp.fromJson(Map<String, dynamic> json) =>
      _$V1WebAuthnStampFromJson(json);

  static const toJsonFactory = _$V1WebAuthnStampToJson;
  Map<String, dynamic> toJson() => _$V1WebAuthnStampToJson(this);

  @JsonKey(name: 'credentialId')
  final String credentialId;
  @JsonKey(name: 'clientDataJson')
  final String clientDataJson;
  @JsonKey(name: 'authenticatorData')
  final String authenticatorData;
  @JsonKey(name: 'signature')
  final String signature;
  static const fromJsonFactory = _$V1WebAuthnStampFromJson;

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other is V1WebAuthnStamp &&
            (identical(other.credentialId, credentialId) ||
                const DeepCollectionEquality()
                    .equals(other.credentialId, credentialId)) &&
            (identical(other.clientDataJson, clientDataJson) ||
                const DeepCollectionEquality()
                    .equals(other.clientDataJson, clientDataJson)) &&
            (identical(other.authenticatorData, authenticatorData) ||
                const DeepCollectionEquality()
                    .equals(other.authenticatorData, authenticatorData)) &&
            (identical(other.signature, signature) ||
                const DeepCollectionEquality()
                    .equals(other.signature, signature)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(credentialId) ^
      const DeepCollectionEquality().hash(clientDataJson) ^
      const DeepCollectionEquality().hash(authenticatorData) ^
      const DeepCollectionEquality().hash(signature) ^
      runtimeType.hashCode;
}

extension $V1WebAuthnStampExtension on V1WebAuthnStamp {
  V1WebAuthnStamp copyWith(
      {String? credentialId,
      String? clientDataJson,
      String? authenticatorData,
      String? signature}) {
    return V1WebAuthnStamp(
        credentialId: credentialId ?? this.credentialId,
        clientDataJson: clientDataJson ?? this.clientDataJson,
        authenticatorData: authenticatorData ?? this.authenticatorData,
        signature: signature ?? this.signature);
  }

  V1WebAuthnStamp copyWithWrapped(
      {Wrapped<String>? credentialId,
      Wrapped<String>? clientDataJson,
      Wrapped<String>? authenticatorData,
      Wrapped<String>? signature}) {
    return V1WebAuthnStamp(
        credentialId:
            (credentialId != null ? credentialId.value : this.credentialId),
        clientDataJson: (clientDataJson != null
            ? clientDataJson.value
            : this.clientDataJson),
        authenticatorData: (authenticatorData != null
            ? authenticatorData.value
            : this.authenticatorData),
        signature: (signature != null ? signature.value : this.signature));
  }
}

String? v1AccessTypeNullableToJson(enums.V1AccessType? v1AccessType) {
  return v1AccessType?.value;
}

String? v1AccessTypeToJson(enums.V1AccessType v1AccessType) {
  return v1AccessType.value;
}

enums.V1AccessType v1AccessTypeFromJson(
  Object? v1AccessType, [
  enums.V1AccessType? defaultValue,
]) {
  return enums.V1AccessType.values
          .firstWhereOrNull((e) => e.value == v1AccessType) ??
      defaultValue ??
      enums.V1AccessType.swaggerGeneratedUnknown;
}

enums.V1AccessType? v1AccessTypeNullableFromJson(
  Object? v1AccessType, [
  enums.V1AccessType? defaultValue,
]) {
  if (v1AccessType == null) {
    return null;
  }
  return enums.V1AccessType.values
          .firstWhereOrNull((e) => e.value == v1AccessType) ??
      defaultValue;
}

String v1AccessTypeExplodedListToJson(List<enums.V1AccessType>? v1AccessType) {
  return v1AccessType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1AccessTypeListToJson(List<enums.V1AccessType>? v1AccessType) {
  if (v1AccessType == null) {
    return [];
  }

  return v1AccessType.map((e) => e.value!).toList();
}

List<enums.V1AccessType> v1AccessTypeListFromJson(
  List? v1AccessType, [
  List<enums.V1AccessType>? defaultValue,
]) {
  if (v1AccessType == null) {
    return defaultValue ?? [];
  }

  return v1AccessType.map((e) => v1AccessTypeFromJson(e.toString())).toList();
}

List<enums.V1AccessType>? v1AccessTypeNullableListFromJson(
  List? v1AccessType, [
  List<enums.V1AccessType>? defaultValue,
]) {
  if (v1AccessType == null) {
    return defaultValue;
  }

  return v1AccessType.map((e) => v1AccessTypeFromJson(e.toString())).toList();
}

String? v1ActivityStatusNullableToJson(
    enums.V1ActivityStatus? v1ActivityStatus) {
  return v1ActivityStatus?.value;
}

String? v1ActivityStatusToJson(enums.V1ActivityStatus v1ActivityStatus) {
  return v1ActivityStatus.value;
}

enums.V1ActivityStatus v1ActivityStatusFromJson(
  Object? v1ActivityStatus, [
  enums.V1ActivityStatus? defaultValue,
]) {
  return enums.V1ActivityStatus.values
          .firstWhereOrNull((e) => e.value == v1ActivityStatus) ??
      defaultValue ??
      enums.V1ActivityStatus.swaggerGeneratedUnknown;
}

enums.V1ActivityStatus? v1ActivityStatusNullableFromJson(
  Object? v1ActivityStatus, [
  enums.V1ActivityStatus? defaultValue,
]) {
  if (v1ActivityStatus == null) {
    return null;
  }
  return enums.V1ActivityStatus.values
          .firstWhereOrNull((e) => e.value == v1ActivityStatus) ??
      defaultValue;
}

String v1ActivityStatusExplodedListToJson(
    List<enums.V1ActivityStatus>? v1ActivityStatus) {
  return v1ActivityStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ActivityStatusListToJson(
    List<enums.V1ActivityStatus>? v1ActivityStatus) {
  if (v1ActivityStatus == null) {
    return [];
  }

  return v1ActivityStatus.map((e) => e.value!).toList();
}

List<enums.V1ActivityStatus> v1ActivityStatusListFromJson(
  List? v1ActivityStatus, [
  List<enums.V1ActivityStatus>? defaultValue,
]) {
  if (v1ActivityStatus == null) {
    return defaultValue ?? [];
  }

  return v1ActivityStatus
      .map((e) => v1ActivityStatusFromJson(e.toString()))
      .toList();
}

List<enums.V1ActivityStatus>? v1ActivityStatusNullableListFromJson(
  List? v1ActivityStatus, [
  List<enums.V1ActivityStatus>? defaultValue,
]) {
  if (v1ActivityStatus == null) {
    return defaultValue;
  }

  return v1ActivityStatus
      .map((e) => v1ActivityStatusFromJson(e.toString()))
      .toList();
}

String? v1ActivityTypeNullableToJson(enums.V1ActivityType? v1ActivityType) {
  return v1ActivityType?.value;
}

String? v1ActivityTypeToJson(enums.V1ActivityType v1ActivityType) {
  return v1ActivityType.value;
}

enums.V1ActivityType v1ActivityTypeFromJson(
  Object? v1ActivityType, [
  enums.V1ActivityType? defaultValue,
]) {
  return enums.V1ActivityType.values
          .firstWhereOrNull((e) => e.value == v1ActivityType) ??
      defaultValue ??
      enums.V1ActivityType.swaggerGeneratedUnknown;
}

enums.V1ActivityType? v1ActivityTypeNullableFromJson(
  Object? v1ActivityType, [
  enums.V1ActivityType? defaultValue,
]) {
  if (v1ActivityType == null) {
    return null;
  }
  return enums.V1ActivityType.values
          .firstWhereOrNull((e) => e.value == v1ActivityType) ??
      defaultValue;
}

String v1ActivityTypeExplodedListToJson(
    List<enums.V1ActivityType>? v1ActivityType) {
  return v1ActivityType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ActivityTypeListToJson(
    List<enums.V1ActivityType>? v1ActivityType) {
  if (v1ActivityType == null) {
    return [];
  }

  return v1ActivityType.map((e) => e.value!).toList();
}

List<enums.V1ActivityType> v1ActivityTypeListFromJson(
  List? v1ActivityType, [
  List<enums.V1ActivityType>? defaultValue,
]) {
  if (v1ActivityType == null) {
    return defaultValue ?? [];
  }

  return v1ActivityType
      .map((e) => v1ActivityTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ActivityType>? v1ActivityTypeNullableListFromJson(
  List? v1ActivityType, [
  List<enums.V1ActivityType>? defaultValue,
]) {
  if (v1ActivityType == null) {
    return defaultValue;
  }

  return v1ActivityType
      .map((e) => v1ActivityTypeFromJson(e.toString()))
      .toList();
}

String? v1AddressFormatNullableToJson(enums.V1AddressFormat? v1AddressFormat) {
  return v1AddressFormat?.value;
}

String? v1AddressFormatToJson(enums.V1AddressFormat v1AddressFormat) {
  return v1AddressFormat.value;
}

enums.V1AddressFormat v1AddressFormatFromJson(
  Object? v1AddressFormat, [
  enums.V1AddressFormat? defaultValue,
]) {
  return enums.V1AddressFormat.values
          .firstWhereOrNull((e) => e.value == v1AddressFormat) ??
      defaultValue ??
      enums.V1AddressFormat.swaggerGeneratedUnknown;
}

enums.V1AddressFormat? v1AddressFormatNullableFromJson(
  Object? v1AddressFormat, [
  enums.V1AddressFormat? defaultValue,
]) {
  if (v1AddressFormat == null) {
    return null;
  }
  return enums.V1AddressFormat.values
          .firstWhereOrNull((e) => e.value == v1AddressFormat) ??
      defaultValue;
}

String v1AddressFormatExplodedListToJson(
    List<enums.V1AddressFormat>? v1AddressFormat) {
  return v1AddressFormat?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1AddressFormatListToJson(
    List<enums.V1AddressFormat>? v1AddressFormat) {
  if (v1AddressFormat == null) {
    return [];
  }

  return v1AddressFormat.map((e) => e.value!).toList();
}

List<enums.V1AddressFormat> v1AddressFormatListFromJson(
  List? v1AddressFormat, [
  List<enums.V1AddressFormat>? defaultValue,
]) {
  if (v1AddressFormat == null) {
    return defaultValue ?? [];
  }

  return v1AddressFormat
      .map((e) => v1AddressFormatFromJson(e.toString()))
      .toList();
}

List<enums.V1AddressFormat>? v1AddressFormatNullableListFromJson(
  List? v1AddressFormat, [
  List<enums.V1AddressFormat>? defaultValue,
]) {
  if (v1AddressFormat == null) {
    return defaultValue;
  }

  return v1AddressFormat
      .map((e) => v1AddressFormatFromJson(e.toString()))
      .toList();
}

String? v1ApiKeyCurveNullableToJson(enums.V1ApiKeyCurve? v1ApiKeyCurve) {
  return v1ApiKeyCurve?.value;
}

String? v1ApiKeyCurveToJson(enums.V1ApiKeyCurve v1ApiKeyCurve) {
  return v1ApiKeyCurve.value;
}

enums.V1ApiKeyCurve v1ApiKeyCurveFromJson(
  Object? v1ApiKeyCurve, [
  enums.V1ApiKeyCurve? defaultValue,
]) {
  return enums.V1ApiKeyCurve.values
          .firstWhereOrNull((e) => e.value == v1ApiKeyCurve) ??
      defaultValue ??
      enums.V1ApiKeyCurve.swaggerGeneratedUnknown;
}

enums.V1ApiKeyCurve? v1ApiKeyCurveNullableFromJson(
  Object? v1ApiKeyCurve, [
  enums.V1ApiKeyCurve? defaultValue,
]) {
  if (v1ApiKeyCurve == null) {
    return null;
  }
  return enums.V1ApiKeyCurve.values
          .firstWhereOrNull((e) => e.value == v1ApiKeyCurve) ??
      defaultValue;
}

String v1ApiKeyCurveExplodedListToJson(
    List<enums.V1ApiKeyCurve>? v1ApiKeyCurve) {
  return v1ApiKeyCurve?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ApiKeyCurveListToJson(List<enums.V1ApiKeyCurve>? v1ApiKeyCurve) {
  if (v1ApiKeyCurve == null) {
    return [];
  }

  return v1ApiKeyCurve.map((e) => e.value!).toList();
}

List<enums.V1ApiKeyCurve> v1ApiKeyCurveListFromJson(
  List? v1ApiKeyCurve, [
  List<enums.V1ApiKeyCurve>? defaultValue,
]) {
  if (v1ApiKeyCurve == null) {
    return defaultValue ?? [];
  }

  return v1ApiKeyCurve.map((e) => v1ApiKeyCurveFromJson(e.toString())).toList();
}

List<enums.V1ApiKeyCurve>? v1ApiKeyCurveNullableListFromJson(
  List? v1ApiKeyCurve, [
  List<enums.V1ApiKeyCurve>? defaultValue,
]) {
  if (v1ApiKeyCurve == null) {
    return defaultValue;
  }

  return v1ApiKeyCurve.map((e) => v1ApiKeyCurveFromJson(e.toString())).toList();
}

String? v1ApproveActivityRequestTypeNullableToJson(
    enums.V1ApproveActivityRequestType? v1ApproveActivityRequestType) {
  return v1ApproveActivityRequestType?.value;
}

String? v1ApproveActivityRequestTypeToJson(
    enums.V1ApproveActivityRequestType v1ApproveActivityRequestType) {
  return v1ApproveActivityRequestType.value;
}

enums.V1ApproveActivityRequestType v1ApproveActivityRequestTypeFromJson(
  Object? v1ApproveActivityRequestType, [
  enums.V1ApproveActivityRequestType? defaultValue,
]) {
  return enums.V1ApproveActivityRequestType.values
          .firstWhereOrNull((e) => e.value == v1ApproveActivityRequestType) ??
      defaultValue ??
      enums.V1ApproveActivityRequestType.swaggerGeneratedUnknown;
}

enums.V1ApproveActivityRequestType?
    v1ApproveActivityRequestTypeNullableFromJson(
  Object? v1ApproveActivityRequestType, [
  enums.V1ApproveActivityRequestType? defaultValue,
]) {
  if (v1ApproveActivityRequestType == null) {
    return null;
  }
  return enums.V1ApproveActivityRequestType.values
          .firstWhereOrNull((e) => e.value == v1ApproveActivityRequestType) ??
      defaultValue;
}

String v1ApproveActivityRequestTypeExplodedListToJson(
    List<enums.V1ApproveActivityRequestType>? v1ApproveActivityRequestType) {
  return v1ApproveActivityRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ApproveActivityRequestTypeListToJson(
    List<enums.V1ApproveActivityRequestType>? v1ApproveActivityRequestType) {
  if (v1ApproveActivityRequestType == null) {
    return [];
  }

  return v1ApproveActivityRequestType.map((e) => e.value!).toList();
}

List<enums.V1ApproveActivityRequestType>
    v1ApproveActivityRequestTypeListFromJson(
  List? v1ApproveActivityRequestType, [
  List<enums.V1ApproveActivityRequestType>? defaultValue,
]) {
  if (v1ApproveActivityRequestType == null) {
    return defaultValue ?? [];
  }

  return v1ApproveActivityRequestType
      .map((e) => v1ApproveActivityRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ApproveActivityRequestType>?
    v1ApproveActivityRequestTypeNullableListFromJson(
  List? v1ApproveActivityRequestType, [
  List<enums.V1ApproveActivityRequestType>? defaultValue,
]) {
  if (v1ApproveActivityRequestType == null) {
    return defaultValue;
  }

  return v1ApproveActivityRequestType
      .map((e) => v1ApproveActivityRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1AuthenticatorAttestationResponseAuthenticatorAttachmentNullableToJson(
    enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment?
        v1AuthenticatorAttestationResponseAuthenticatorAttachment) {
  return v1AuthenticatorAttestationResponseAuthenticatorAttachment?.value;
}

String? v1AuthenticatorAttestationResponseAuthenticatorAttachmentToJson(
    enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment
        v1AuthenticatorAttestationResponseAuthenticatorAttachment) {
  return v1AuthenticatorAttestationResponseAuthenticatorAttachment.value;
}

enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment
    v1AuthenticatorAttestationResponseAuthenticatorAttachmentFromJson(
  Object? v1AuthenticatorAttestationResponseAuthenticatorAttachment, [
  enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment? defaultValue,
]) {
  return enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment.values
          .firstWhereOrNull((e) =>
              e.value ==
              v1AuthenticatorAttestationResponseAuthenticatorAttachment) ??
      defaultValue ??
      enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment
          .swaggerGeneratedUnknown;
}

enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment?
    v1AuthenticatorAttestationResponseAuthenticatorAttachmentNullableFromJson(
  Object? v1AuthenticatorAttestationResponseAuthenticatorAttachment, [
  enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment? defaultValue,
]) {
  if (v1AuthenticatorAttestationResponseAuthenticatorAttachment == null) {
    return null;
  }
  return enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment.values
          .firstWhereOrNull((e) =>
              e.value ==
              v1AuthenticatorAttestationResponseAuthenticatorAttachment) ??
      defaultValue;
}

String
    v1AuthenticatorAttestationResponseAuthenticatorAttachmentExplodedListToJson(
        List<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment>?
            v1AuthenticatorAttestationResponseAuthenticatorAttachment) {
  return v1AuthenticatorAttestationResponseAuthenticatorAttachment
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String>
    v1AuthenticatorAttestationResponseAuthenticatorAttachmentListToJson(
        List<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment>?
            v1AuthenticatorAttestationResponseAuthenticatorAttachment) {
  if (v1AuthenticatorAttestationResponseAuthenticatorAttachment == null) {
    return [];
  }

  return v1AuthenticatorAttestationResponseAuthenticatorAttachment
      .map((e) => e.value!)
      .toList();
}

List<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment>
    v1AuthenticatorAttestationResponseAuthenticatorAttachmentListFromJson(
  List? v1AuthenticatorAttestationResponseAuthenticatorAttachment, [
  List<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment>?
      defaultValue,
]) {
  if (v1AuthenticatorAttestationResponseAuthenticatorAttachment == null) {
    return defaultValue ?? [];
  }

  return v1AuthenticatorAttestationResponseAuthenticatorAttachment
      .map((e) =>
          v1AuthenticatorAttestationResponseAuthenticatorAttachmentFromJson(
              e.toString()))
      .toList();
}

List<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment>?
    v1AuthenticatorAttestationResponseAuthenticatorAttachmentNullableListFromJson(
  List? v1AuthenticatorAttestationResponseAuthenticatorAttachment, [
  List<enums.V1AuthenticatorAttestationResponseAuthenticatorAttachment>?
      defaultValue,
]) {
  if (v1AuthenticatorAttestationResponseAuthenticatorAttachment == null) {
    return defaultValue;
  }

  return v1AuthenticatorAttestationResponseAuthenticatorAttachment
      .map((e) =>
          v1AuthenticatorAttestationResponseAuthenticatorAttachmentFromJson(
              e.toString()))
      .toList();
}

String? v1AuthenticatorTransportNullableToJson(
    enums.V1AuthenticatorTransport? v1AuthenticatorTransport) {
  return v1AuthenticatorTransport?.value;
}

String? v1AuthenticatorTransportToJson(
    enums.V1AuthenticatorTransport v1AuthenticatorTransport) {
  return v1AuthenticatorTransport.value;
}

enums.V1AuthenticatorTransport v1AuthenticatorTransportFromJson(
  Object? v1AuthenticatorTransport, [
  enums.V1AuthenticatorTransport? defaultValue,
]) {
  return enums.V1AuthenticatorTransport.values
          .firstWhereOrNull((e) => e.value == v1AuthenticatorTransport) ??
      defaultValue ??
      enums.V1AuthenticatorTransport.swaggerGeneratedUnknown;
}

enums.V1AuthenticatorTransport? v1AuthenticatorTransportNullableFromJson(
  Object? v1AuthenticatorTransport, [
  enums.V1AuthenticatorTransport? defaultValue,
]) {
  if (v1AuthenticatorTransport == null) {
    return null;
  }
  return enums.V1AuthenticatorTransport.values
          .firstWhereOrNull((e) => e.value == v1AuthenticatorTransport) ??
      defaultValue;
}

String v1AuthenticatorTransportExplodedListToJson(
    List<enums.V1AuthenticatorTransport>? v1AuthenticatorTransport) {
  return v1AuthenticatorTransport?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1AuthenticatorTransportListToJson(
    List<enums.V1AuthenticatorTransport>? v1AuthenticatorTransport) {
  if (v1AuthenticatorTransport == null) {
    return [];
  }

  return v1AuthenticatorTransport.map((e) => e.value!).toList();
}

List<enums.V1AuthenticatorTransport> v1AuthenticatorTransportListFromJson(
  List? v1AuthenticatorTransport, [
  List<enums.V1AuthenticatorTransport>? defaultValue,
]) {
  if (v1AuthenticatorTransport == null) {
    return defaultValue ?? [];
  }

  return v1AuthenticatorTransport
      .map((e) => v1AuthenticatorTransportFromJson(e.toString()))
      .toList();
}

List<enums.V1AuthenticatorTransport>?
    v1AuthenticatorTransportNullableListFromJson(
  List? v1AuthenticatorTransport, [
  List<enums.V1AuthenticatorTransport>? defaultValue,
]) {
  if (v1AuthenticatorTransport == null) {
    return defaultValue;
  }

  return v1AuthenticatorTransport
      .map((e) => v1AuthenticatorTransportFromJson(e.toString()))
      .toList();
}

String? v1CreateApiKeysRequestTypeNullableToJson(
    enums.V1CreateApiKeysRequestType? v1CreateApiKeysRequestType) {
  return v1CreateApiKeysRequestType?.value;
}

String? v1CreateApiKeysRequestTypeToJson(
    enums.V1CreateApiKeysRequestType v1CreateApiKeysRequestType) {
  return v1CreateApiKeysRequestType.value;
}

enums.V1CreateApiKeysRequestType v1CreateApiKeysRequestTypeFromJson(
  Object? v1CreateApiKeysRequestType, [
  enums.V1CreateApiKeysRequestType? defaultValue,
]) {
  return enums.V1CreateApiKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateApiKeysRequestType) ??
      defaultValue ??
      enums.V1CreateApiKeysRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateApiKeysRequestType? v1CreateApiKeysRequestTypeNullableFromJson(
  Object? v1CreateApiKeysRequestType, [
  enums.V1CreateApiKeysRequestType? defaultValue,
]) {
  if (v1CreateApiKeysRequestType == null) {
    return null;
  }
  return enums.V1CreateApiKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateApiKeysRequestType) ??
      defaultValue;
}

String v1CreateApiKeysRequestTypeExplodedListToJson(
    List<enums.V1CreateApiKeysRequestType>? v1CreateApiKeysRequestType) {
  return v1CreateApiKeysRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreateApiKeysRequestTypeListToJson(
    List<enums.V1CreateApiKeysRequestType>? v1CreateApiKeysRequestType) {
  if (v1CreateApiKeysRequestType == null) {
    return [];
  }

  return v1CreateApiKeysRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateApiKeysRequestType> v1CreateApiKeysRequestTypeListFromJson(
  List? v1CreateApiKeysRequestType, [
  List<enums.V1CreateApiKeysRequestType>? defaultValue,
]) {
  if (v1CreateApiKeysRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateApiKeysRequestType
      .map((e) => v1CreateApiKeysRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateApiKeysRequestType>?
    v1CreateApiKeysRequestTypeNullableListFromJson(
  List? v1CreateApiKeysRequestType, [
  List<enums.V1CreateApiKeysRequestType>? defaultValue,
]) {
  if (v1CreateApiKeysRequestType == null) {
    return defaultValue;
  }

  return v1CreateApiKeysRequestType
      .map((e) => v1CreateApiKeysRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateApiOnlyUsersRequestTypeNullableToJson(
    enums.V1CreateApiOnlyUsersRequestType? v1CreateApiOnlyUsersRequestType) {
  return v1CreateApiOnlyUsersRequestType?.value;
}

String? v1CreateApiOnlyUsersRequestTypeToJson(
    enums.V1CreateApiOnlyUsersRequestType v1CreateApiOnlyUsersRequestType) {
  return v1CreateApiOnlyUsersRequestType.value;
}

enums.V1CreateApiOnlyUsersRequestType v1CreateApiOnlyUsersRequestTypeFromJson(
  Object? v1CreateApiOnlyUsersRequestType, [
  enums.V1CreateApiOnlyUsersRequestType? defaultValue,
]) {
  return enums.V1CreateApiOnlyUsersRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateApiOnlyUsersRequestType) ??
      defaultValue ??
      enums.V1CreateApiOnlyUsersRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateApiOnlyUsersRequestType?
    v1CreateApiOnlyUsersRequestTypeNullableFromJson(
  Object? v1CreateApiOnlyUsersRequestType, [
  enums.V1CreateApiOnlyUsersRequestType? defaultValue,
]) {
  if (v1CreateApiOnlyUsersRequestType == null) {
    return null;
  }
  return enums.V1CreateApiOnlyUsersRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateApiOnlyUsersRequestType) ??
      defaultValue;
}

String v1CreateApiOnlyUsersRequestTypeExplodedListToJson(
    List<enums.V1CreateApiOnlyUsersRequestType>?
        v1CreateApiOnlyUsersRequestType) {
  return v1CreateApiOnlyUsersRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreateApiOnlyUsersRequestTypeListToJson(
    List<enums.V1CreateApiOnlyUsersRequestType>?
        v1CreateApiOnlyUsersRequestType) {
  if (v1CreateApiOnlyUsersRequestType == null) {
    return [];
  }

  return v1CreateApiOnlyUsersRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateApiOnlyUsersRequestType>
    v1CreateApiOnlyUsersRequestTypeListFromJson(
  List? v1CreateApiOnlyUsersRequestType, [
  List<enums.V1CreateApiOnlyUsersRequestType>? defaultValue,
]) {
  if (v1CreateApiOnlyUsersRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateApiOnlyUsersRequestType
      .map((e) => v1CreateApiOnlyUsersRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateApiOnlyUsersRequestType>?
    v1CreateApiOnlyUsersRequestTypeNullableListFromJson(
  List? v1CreateApiOnlyUsersRequestType, [
  List<enums.V1CreateApiOnlyUsersRequestType>? defaultValue,
]) {
  if (v1CreateApiOnlyUsersRequestType == null) {
    return defaultValue;
  }

  return v1CreateApiOnlyUsersRequestType
      .map((e) => v1CreateApiOnlyUsersRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateAuthenticatorsRequestTypeNullableToJson(
    enums.V1CreateAuthenticatorsRequestType?
        v1CreateAuthenticatorsRequestType) {
  return v1CreateAuthenticatorsRequestType?.value;
}

String? v1CreateAuthenticatorsRequestTypeToJson(
    enums.V1CreateAuthenticatorsRequestType v1CreateAuthenticatorsRequestType) {
  return v1CreateAuthenticatorsRequestType.value;
}

enums.V1CreateAuthenticatorsRequestType
    v1CreateAuthenticatorsRequestTypeFromJson(
  Object? v1CreateAuthenticatorsRequestType, [
  enums.V1CreateAuthenticatorsRequestType? defaultValue,
]) {
  return enums.V1CreateAuthenticatorsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateAuthenticatorsRequestType) ??
      defaultValue ??
      enums.V1CreateAuthenticatorsRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateAuthenticatorsRequestType?
    v1CreateAuthenticatorsRequestTypeNullableFromJson(
  Object? v1CreateAuthenticatorsRequestType, [
  enums.V1CreateAuthenticatorsRequestType? defaultValue,
]) {
  if (v1CreateAuthenticatorsRequestType == null) {
    return null;
  }
  return enums.V1CreateAuthenticatorsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateAuthenticatorsRequestType) ??
      defaultValue;
}

String v1CreateAuthenticatorsRequestTypeExplodedListToJson(
    List<enums.V1CreateAuthenticatorsRequestType>?
        v1CreateAuthenticatorsRequestType) {
  return v1CreateAuthenticatorsRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1CreateAuthenticatorsRequestTypeListToJson(
    List<enums.V1CreateAuthenticatorsRequestType>?
        v1CreateAuthenticatorsRequestType) {
  if (v1CreateAuthenticatorsRequestType == null) {
    return [];
  }

  return v1CreateAuthenticatorsRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateAuthenticatorsRequestType>
    v1CreateAuthenticatorsRequestTypeListFromJson(
  List? v1CreateAuthenticatorsRequestType, [
  List<enums.V1CreateAuthenticatorsRequestType>? defaultValue,
]) {
  if (v1CreateAuthenticatorsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateAuthenticatorsRequestType
      .map((e) => v1CreateAuthenticatorsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateAuthenticatorsRequestType>?
    v1CreateAuthenticatorsRequestTypeNullableListFromJson(
  List? v1CreateAuthenticatorsRequestType, [
  List<enums.V1CreateAuthenticatorsRequestType>? defaultValue,
]) {
  if (v1CreateAuthenticatorsRequestType == null) {
    return defaultValue;
  }

  return v1CreateAuthenticatorsRequestType
      .map((e) => v1CreateAuthenticatorsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateInvitationsRequestTypeNullableToJson(
    enums.V1CreateInvitationsRequestType? v1CreateInvitationsRequestType) {
  return v1CreateInvitationsRequestType?.value;
}

String? v1CreateInvitationsRequestTypeToJson(
    enums.V1CreateInvitationsRequestType v1CreateInvitationsRequestType) {
  return v1CreateInvitationsRequestType.value;
}

enums.V1CreateInvitationsRequestType v1CreateInvitationsRequestTypeFromJson(
  Object? v1CreateInvitationsRequestType, [
  enums.V1CreateInvitationsRequestType? defaultValue,
]) {
  return enums.V1CreateInvitationsRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateInvitationsRequestType) ??
      defaultValue ??
      enums.V1CreateInvitationsRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateInvitationsRequestType?
    v1CreateInvitationsRequestTypeNullableFromJson(
  Object? v1CreateInvitationsRequestType, [
  enums.V1CreateInvitationsRequestType? defaultValue,
]) {
  if (v1CreateInvitationsRequestType == null) {
    return null;
  }
  return enums.V1CreateInvitationsRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateInvitationsRequestType) ??
      defaultValue;
}

String v1CreateInvitationsRequestTypeExplodedListToJson(
    List<enums.V1CreateInvitationsRequestType>?
        v1CreateInvitationsRequestType) {
  return v1CreateInvitationsRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreateInvitationsRequestTypeListToJson(
    List<enums.V1CreateInvitationsRequestType>?
        v1CreateInvitationsRequestType) {
  if (v1CreateInvitationsRequestType == null) {
    return [];
  }

  return v1CreateInvitationsRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateInvitationsRequestType>
    v1CreateInvitationsRequestTypeListFromJson(
  List? v1CreateInvitationsRequestType, [
  List<enums.V1CreateInvitationsRequestType>? defaultValue,
]) {
  if (v1CreateInvitationsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateInvitationsRequestType
      .map((e) => v1CreateInvitationsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateInvitationsRequestType>?
    v1CreateInvitationsRequestTypeNullableListFromJson(
  List? v1CreateInvitationsRequestType, [
  List<enums.V1CreateInvitationsRequestType>? defaultValue,
]) {
  if (v1CreateInvitationsRequestType == null) {
    return defaultValue;
  }

  return v1CreateInvitationsRequestType
      .map((e) => v1CreateInvitationsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateOauthProvidersRequestTypeNullableToJson(
    enums.V1CreateOauthProvidersRequestType?
        v1CreateOauthProvidersRequestType) {
  return v1CreateOauthProvidersRequestType?.value;
}

String? v1CreateOauthProvidersRequestTypeToJson(
    enums.V1CreateOauthProvidersRequestType v1CreateOauthProvidersRequestType) {
  return v1CreateOauthProvidersRequestType.value;
}

enums.V1CreateOauthProvidersRequestType
    v1CreateOauthProvidersRequestTypeFromJson(
  Object? v1CreateOauthProvidersRequestType, [
  enums.V1CreateOauthProvidersRequestType? defaultValue,
]) {
  return enums.V1CreateOauthProvidersRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateOauthProvidersRequestType) ??
      defaultValue ??
      enums.V1CreateOauthProvidersRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateOauthProvidersRequestType?
    v1CreateOauthProvidersRequestTypeNullableFromJson(
  Object? v1CreateOauthProvidersRequestType, [
  enums.V1CreateOauthProvidersRequestType? defaultValue,
]) {
  if (v1CreateOauthProvidersRequestType == null) {
    return null;
  }
  return enums.V1CreateOauthProvidersRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateOauthProvidersRequestType) ??
      defaultValue;
}

String v1CreateOauthProvidersRequestTypeExplodedListToJson(
    List<enums.V1CreateOauthProvidersRequestType>?
        v1CreateOauthProvidersRequestType) {
  return v1CreateOauthProvidersRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1CreateOauthProvidersRequestTypeListToJson(
    List<enums.V1CreateOauthProvidersRequestType>?
        v1CreateOauthProvidersRequestType) {
  if (v1CreateOauthProvidersRequestType == null) {
    return [];
  }

  return v1CreateOauthProvidersRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateOauthProvidersRequestType>
    v1CreateOauthProvidersRequestTypeListFromJson(
  List? v1CreateOauthProvidersRequestType, [
  List<enums.V1CreateOauthProvidersRequestType>? defaultValue,
]) {
  if (v1CreateOauthProvidersRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateOauthProvidersRequestType
      .map((e) => v1CreateOauthProvidersRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateOauthProvidersRequestType>?
    v1CreateOauthProvidersRequestTypeNullableListFromJson(
  List? v1CreateOauthProvidersRequestType, [
  List<enums.V1CreateOauthProvidersRequestType>? defaultValue,
]) {
  if (v1CreateOauthProvidersRequestType == null) {
    return defaultValue;
  }

  return v1CreateOauthProvidersRequestType
      .map((e) => v1CreateOauthProvidersRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreatePoliciesRequestTypeNullableToJson(
    enums.V1CreatePoliciesRequestType? v1CreatePoliciesRequestType) {
  return v1CreatePoliciesRequestType?.value;
}

String? v1CreatePoliciesRequestTypeToJson(
    enums.V1CreatePoliciesRequestType v1CreatePoliciesRequestType) {
  return v1CreatePoliciesRequestType.value;
}

enums.V1CreatePoliciesRequestType v1CreatePoliciesRequestTypeFromJson(
  Object? v1CreatePoliciesRequestType, [
  enums.V1CreatePoliciesRequestType? defaultValue,
]) {
  return enums.V1CreatePoliciesRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreatePoliciesRequestType) ??
      defaultValue ??
      enums.V1CreatePoliciesRequestType.swaggerGeneratedUnknown;
}

enums.V1CreatePoliciesRequestType? v1CreatePoliciesRequestTypeNullableFromJson(
  Object? v1CreatePoliciesRequestType, [
  enums.V1CreatePoliciesRequestType? defaultValue,
]) {
  if (v1CreatePoliciesRequestType == null) {
    return null;
  }
  return enums.V1CreatePoliciesRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreatePoliciesRequestType) ??
      defaultValue;
}

String v1CreatePoliciesRequestTypeExplodedListToJson(
    List<enums.V1CreatePoliciesRequestType>? v1CreatePoliciesRequestType) {
  return v1CreatePoliciesRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreatePoliciesRequestTypeListToJson(
    List<enums.V1CreatePoliciesRequestType>? v1CreatePoliciesRequestType) {
  if (v1CreatePoliciesRequestType == null) {
    return [];
  }

  return v1CreatePoliciesRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreatePoliciesRequestType> v1CreatePoliciesRequestTypeListFromJson(
  List? v1CreatePoliciesRequestType, [
  List<enums.V1CreatePoliciesRequestType>? defaultValue,
]) {
  if (v1CreatePoliciesRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreatePoliciesRequestType
      .map((e) => v1CreatePoliciesRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreatePoliciesRequestType>?
    v1CreatePoliciesRequestTypeNullableListFromJson(
  List? v1CreatePoliciesRequestType, [
  List<enums.V1CreatePoliciesRequestType>? defaultValue,
]) {
  if (v1CreatePoliciesRequestType == null) {
    return defaultValue;
  }

  return v1CreatePoliciesRequestType
      .map((e) => v1CreatePoliciesRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreatePolicyRequestTypeNullableToJson(
    enums.V1CreatePolicyRequestType? v1CreatePolicyRequestType) {
  return v1CreatePolicyRequestType?.value;
}

String? v1CreatePolicyRequestTypeToJson(
    enums.V1CreatePolicyRequestType v1CreatePolicyRequestType) {
  return v1CreatePolicyRequestType.value;
}

enums.V1CreatePolicyRequestType v1CreatePolicyRequestTypeFromJson(
  Object? v1CreatePolicyRequestType, [
  enums.V1CreatePolicyRequestType? defaultValue,
]) {
  return enums.V1CreatePolicyRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreatePolicyRequestType) ??
      defaultValue ??
      enums.V1CreatePolicyRequestType.swaggerGeneratedUnknown;
}

enums.V1CreatePolicyRequestType? v1CreatePolicyRequestTypeNullableFromJson(
  Object? v1CreatePolicyRequestType, [
  enums.V1CreatePolicyRequestType? defaultValue,
]) {
  if (v1CreatePolicyRequestType == null) {
    return null;
  }
  return enums.V1CreatePolicyRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreatePolicyRequestType) ??
      defaultValue;
}

String v1CreatePolicyRequestTypeExplodedListToJson(
    List<enums.V1CreatePolicyRequestType>? v1CreatePolicyRequestType) {
  return v1CreatePolicyRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreatePolicyRequestTypeListToJson(
    List<enums.V1CreatePolicyRequestType>? v1CreatePolicyRequestType) {
  if (v1CreatePolicyRequestType == null) {
    return [];
  }

  return v1CreatePolicyRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreatePolicyRequestType> v1CreatePolicyRequestTypeListFromJson(
  List? v1CreatePolicyRequestType, [
  List<enums.V1CreatePolicyRequestType>? defaultValue,
]) {
  if (v1CreatePolicyRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreatePolicyRequestType
      .map((e) => v1CreatePolicyRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreatePolicyRequestType>?
    v1CreatePolicyRequestTypeNullableListFromJson(
  List? v1CreatePolicyRequestType, [
  List<enums.V1CreatePolicyRequestType>? defaultValue,
]) {
  if (v1CreatePolicyRequestType == null) {
    return defaultValue;
  }

  return v1CreatePolicyRequestType
      .map((e) => v1CreatePolicyRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreatePrivateKeyTagRequestTypeNullableToJson(
    enums.V1CreatePrivateKeyTagRequestType? v1CreatePrivateKeyTagRequestType) {
  return v1CreatePrivateKeyTagRequestType?.value;
}

String? v1CreatePrivateKeyTagRequestTypeToJson(
    enums.V1CreatePrivateKeyTagRequestType v1CreatePrivateKeyTagRequestType) {
  return v1CreatePrivateKeyTagRequestType.value;
}

enums.V1CreatePrivateKeyTagRequestType v1CreatePrivateKeyTagRequestTypeFromJson(
  Object? v1CreatePrivateKeyTagRequestType, [
  enums.V1CreatePrivateKeyTagRequestType? defaultValue,
]) {
  return enums.V1CreatePrivateKeyTagRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreatePrivateKeyTagRequestType) ??
      defaultValue ??
      enums.V1CreatePrivateKeyTagRequestType.swaggerGeneratedUnknown;
}

enums.V1CreatePrivateKeyTagRequestType?
    v1CreatePrivateKeyTagRequestTypeNullableFromJson(
  Object? v1CreatePrivateKeyTagRequestType, [
  enums.V1CreatePrivateKeyTagRequestType? defaultValue,
]) {
  if (v1CreatePrivateKeyTagRequestType == null) {
    return null;
  }
  return enums.V1CreatePrivateKeyTagRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreatePrivateKeyTagRequestType) ??
      defaultValue;
}

String v1CreatePrivateKeyTagRequestTypeExplodedListToJson(
    List<enums.V1CreatePrivateKeyTagRequestType>?
        v1CreatePrivateKeyTagRequestType) {
  return v1CreatePrivateKeyTagRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreatePrivateKeyTagRequestTypeListToJson(
    List<enums.V1CreatePrivateKeyTagRequestType>?
        v1CreatePrivateKeyTagRequestType) {
  if (v1CreatePrivateKeyTagRequestType == null) {
    return [];
  }

  return v1CreatePrivateKeyTagRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreatePrivateKeyTagRequestType>
    v1CreatePrivateKeyTagRequestTypeListFromJson(
  List? v1CreatePrivateKeyTagRequestType, [
  List<enums.V1CreatePrivateKeyTagRequestType>? defaultValue,
]) {
  if (v1CreatePrivateKeyTagRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreatePrivateKeyTagRequestType
      .map((e) => v1CreatePrivateKeyTagRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreatePrivateKeyTagRequestType>?
    v1CreatePrivateKeyTagRequestTypeNullableListFromJson(
  List? v1CreatePrivateKeyTagRequestType, [
  List<enums.V1CreatePrivateKeyTagRequestType>? defaultValue,
]) {
  if (v1CreatePrivateKeyTagRequestType == null) {
    return defaultValue;
  }

  return v1CreatePrivateKeyTagRequestType
      .map((e) => v1CreatePrivateKeyTagRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreatePrivateKeysRequestTypeNullableToJson(
    enums.V1CreatePrivateKeysRequestType? v1CreatePrivateKeysRequestType) {
  return v1CreatePrivateKeysRequestType?.value;
}

String? v1CreatePrivateKeysRequestTypeToJson(
    enums.V1CreatePrivateKeysRequestType v1CreatePrivateKeysRequestType) {
  return v1CreatePrivateKeysRequestType.value;
}

enums.V1CreatePrivateKeysRequestType v1CreatePrivateKeysRequestTypeFromJson(
  Object? v1CreatePrivateKeysRequestType, [
  enums.V1CreatePrivateKeysRequestType? defaultValue,
]) {
  return enums.V1CreatePrivateKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreatePrivateKeysRequestType) ??
      defaultValue ??
      enums.V1CreatePrivateKeysRequestType.swaggerGeneratedUnknown;
}

enums.V1CreatePrivateKeysRequestType?
    v1CreatePrivateKeysRequestTypeNullableFromJson(
  Object? v1CreatePrivateKeysRequestType, [
  enums.V1CreatePrivateKeysRequestType? defaultValue,
]) {
  if (v1CreatePrivateKeysRequestType == null) {
    return null;
  }
  return enums.V1CreatePrivateKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreatePrivateKeysRequestType) ??
      defaultValue;
}

String v1CreatePrivateKeysRequestTypeExplodedListToJson(
    List<enums.V1CreatePrivateKeysRequestType>?
        v1CreatePrivateKeysRequestType) {
  return v1CreatePrivateKeysRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreatePrivateKeysRequestTypeListToJson(
    List<enums.V1CreatePrivateKeysRequestType>?
        v1CreatePrivateKeysRequestType) {
  if (v1CreatePrivateKeysRequestType == null) {
    return [];
  }

  return v1CreatePrivateKeysRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreatePrivateKeysRequestType>
    v1CreatePrivateKeysRequestTypeListFromJson(
  List? v1CreatePrivateKeysRequestType, [
  List<enums.V1CreatePrivateKeysRequestType>? defaultValue,
]) {
  if (v1CreatePrivateKeysRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreatePrivateKeysRequestType
      .map((e) => v1CreatePrivateKeysRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreatePrivateKeysRequestType>?
    v1CreatePrivateKeysRequestTypeNullableListFromJson(
  List? v1CreatePrivateKeysRequestType, [
  List<enums.V1CreatePrivateKeysRequestType>? defaultValue,
]) {
  if (v1CreatePrivateKeysRequestType == null) {
    return defaultValue;
  }

  return v1CreatePrivateKeysRequestType
      .map((e) => v1CreatePrivateKeysRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateReadOnlySessionRequestTypeNullableToJson(
    enums.V1CreateReadOnlySessionRequestType?
        v1CreateReadOnlySessionRequestType) {
  return v1CreateReadOnlySessionRequestType?.value;
}

String? v1CreateReadOnlySessionRequestTypeToJson(
    enums.V1CreateReadOnlySessionRequestType
        v1CreateReadOnlySessionRequestType) {
  return v1CreateReadOnlySessionRequestType.value;
}

enums.V1CreateReadOnlySessionRequestType
    v1CreateReadOnlySessionRequestTypeFromJson(
  Object? v1CreateReadOnlySessionRequestType, [
  enums.V1CreateReadOnlySessionRequestType? defaultValue,
]) {
  return enums.V1CreateReadOnlySessionRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateReadOnlySessionRequestType) ??
      defaultValue ??
      enums.V1CreateReadOnlySessionRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateReadOnlySessionRequestType?
    v1CreateReadOnlySessionRequestTypeNullableFromJson(
  Object? v1CreateReadOnlySessionRequestType, [
  enums.V1CreateReadOnlySessionRequestType? defaultValue,
]) {
  if (v1CreateReadOnlySessionRequestType == null) {
    return null;
  }
  return enums.V1CreateReadOnlySessionRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateReadOnlySessionRequestType) ??
      defaultValue;
}

String v1CreateReadOnlySessionRequestTypeExplodedListToJson(
    List<enums.V1CreateReadOnlySessionRequestType>?
        v1CreateReadOnlySessionRequestType) {
  return v1CreateReadOnlySessionRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1CreateReadOnlySessionRequestTypeListToJson(
    List<enums.V1CreateReadOnlySessionRequestType>?
        v1CreateReadOnlySessionRequestType) {
  if (v1CreateReadOnlySessionRequestType == null) {
    return [];
  }

  return v1CreateReadOnlySessionRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateReadOnlySessionRequestType>
    v1CreateReadOnlySessionRequestTypeListFromJson(
  List? v1CreateReadOnlySessionRequestType, [
  List<enums.V1CreateReadOnlySessionRequestType>? defaultValue,
]) {
  if (v1CreateReadOnlySessionRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateReadOnlySessionRequestType
      .map((e) => v1CreateReadOnlySessionRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateReadOnlySessionRequestType>?
    v1CreateReadOnlySessionRequestTypeNullableListFromJson(
  List? v1CreateReadOnlySessionRequestType, [
  List<enums.V1CreateReadOnlySessionRequestType>? defaultValue,
]) {
  if (v1CreateReadOnlySessionRequestType == null) {
    return defaultValue;
  }

  return v1CreateReadOnlySessionRequestType
      .map((e) => v1CreateReadOnlySessionRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateReadWriteSessionRequestTypeNullableToJson(
    enums.V1CreateReadWriteSessionRequestType?
        v1CreateReadWriteSessionRequestType) {
  return v1CreateReadWriteSessionRequestType?.value;
}

String? v1CreateReadWriteSessionRequestTypeToJson(
    enums.V1CreateReadWriteSessionRequestType
        v1CreateReadWriteSessionRequestType) {
  return v1CreateReadWriteSessionRequestType.value;
}

enums.V1CreateReadWriteSessionRequestType
    v1CreateReadWriteSessionRequestTypeFromJson(
  Object? v1CreateReadWriteSessionRequestType, [
  enums.V1CreateReadWriteSessionRequestType? defaultValue,
]) {
  return enums.V1CreateReadWriteSessionRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateReadWriteSessionRequestType) ??
      defaultValue ??
      enums.V1CreateReadWriteSessionRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateReadWriteSessionRequestType?
    v1CreateReadWriteSessionRequestTypeNullableFromJson(
  Object? v1CreateReadWriteSessionRequestType, [
  enums.V1CreateReadWriteSessionRequestType? defaultValue,
]) {
  if (v1CreateReadWriteSessionRequestType == null) {
    return null;
  }
  return enums.V1CreateReadWriteSessionRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateReadWriteSessionRequestType) ??
      defaultValue;
}

String v1CreateReadWriteSessionRequestTypeExplodedListToJson(
    List<enums.V1CreateReadWriteSessionRequestType>?
        v1CreateReadWriteSessionRequestType) {
  return v1CreateReadWriteSessionRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1CreateReadWriteSessionRequestTypeListToJson(
    List<enums.V1CreateReadWriteSessionRequestType>?
        v1CreateReadWriteSessionRequestType) {
  if (v1CreateReadWriteSessionRequestType == null) {
    return [];
  }

  return v1CreateReadWriteSessionRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateReadWriteSessionRequestType>
    v1CreateReadWriteSessionRequestTypeListFromJson(
  List? v1CreateReadWriteSessionRequestType, [
  List<enums.V1CreateReadWriteSessionRequestType>? defaultValue,
]) {
  if (v1CreateReadWriteSessionRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateReadWriteSessionRequestType
      .map((e) => v1CreateReadWriteSessionRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateReadWriteSessionRequestType>?
    v1CreateReadWriteSessionRequestTypeNullableListFromJson(
  List? v1CreateReadWriteSessionRequestType, [
  List<enums.V1CreateReadWriteSessionRequestType>? defaultValue,
]) {
  if (v1CreateReadWriteSessionRequestType == null) {
    return defaultValue;
  }

  return v1CreateReadWriteSessionRequestType
      .map((e) => v1CreateReadWriteSessionRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateSubOrganizationRequestTypeNullableToJson(
    enums.V1CreateSubOrganizationRequestType?
        v1CreateSubOrganizationRequestType) {
  return v1CreateSubOrganizationRequestType?.value;
}

String? v1CreateSubOrganizationRequestTypeToJson(
    enums.V1CreateSubOrganizationRequestType
        v1CreateSubOrganizationRequestType) {
  return v1CreateSubOrganizationRequestType.value;
}

enums.V1CreateSubOrganizationRequestType
    v1CreateSubOrganizationRequestTypeFromJson(
  Object? v1CreateSubOrganizationRequestType, [
  enums.V1CreateSubOrganizationRequestType? defaultValue,
]) {
  return enums.V1CreateSubOrganizationRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateSubOrganizationRequestType) ??
      defaultValue ??
      enums.V1CreateSubOrganizationRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateSubOrganizationRequestType?
    v1CreateSubOrganizationRequestTypeNullableFromJson(
  Object? v1CreateSubOrganizationRequestType, [
  enums.V1CreateSubOrganizationRequestType? defaultValue,
]) {
  if (v1CreateSubOrganizationRequestType == null) {
    return null;
  }
  return enums.V1CreateSubOrganizationRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateSubOrganizationRequestType) ??
      defaultValue;
}

String v1CreateSubOrganizationRequestTypeExplodedListToJson(
    List<enums.V1CreateSubOrganizationRequestType>?
        v1CreateSubOrganizationRequestType) {
  return v1CreateSubOrganizationRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1CreateSubOrganizationRequestTypeListToJson(
    List<enums.V1CreateSubOrganizationRequestType>?
        v1CreateSubOrganizationRequestType) {
  if (v1CreateSubOrganizationRequestType == null) {
    return [];
  }

  return v1CreateSubOrganizationRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateSubOrganizationRequestType>
    v1CreateSubOrganizationRequestTypeListFromJson(
  List? v1CreateSubOrganizationRequestType, [
  List<enums.V1CreateSubOrganizationRequestType>? defaultValue,
]) {
  if (v1CreateSubOrganizationRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateSubOrganizationRequestType
      .map((e) => v1CreateSubOrganizationRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateSubOrganizationRequestType>?
    v1CreateSubOrganizationRequestTypeNullableListFromJson(
  List? v1CreateSubOrganizationRequestType, [
  List<enums.V1CreateSubOrganizationRequestType>? defaultValue,
]) {
  if (v1CreateSubOrganizationRequestType == null) {
    return defaultValue;
  }

  return v1CreateSubOrganizationRequestType
      .map((e) => v1CreateSubOrganizationRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateUserTagRequestTypeNullableToJson(
    enums.V1CreateUserTagRequestType? v1CreateUserTagRequestType) {
  return v1CreateUserTagRequestType?.value;
}

String? v1CreateUserTagRequestTypeToJson(
    enums.V1CreateUserTagRequestType v1CreateUserTagRequestType) {
  return v1CreateUserTagRequestType.value;
}

enums.V1CreateUserTagRequestType v1CreateUserTagRequestTypeFromJson(
  Object? v1CreateUserTagRequestType, [
  enums.V1CreateUserTagRequestType? defaultValue,
]) {
  return enums.V1CreateUserTagRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateUserTagRequestType) ??
      defaultValue ??
      enums.V1CreateUserTagRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateUserTagRequestType? v1CreateUserTagRequestTypeNullableFromJson(
  Object? v1CreateUserTagRequestType, [
  enums.V1CreateUserTagRequestType? defaultValue,
]) {
  if (v1CreateUserTagRequestType == null) {
    return null;
  }
  return enums.V1CreateUserTagRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateUserTagRequestType) ??
      defaultValue;
}

String v1CreateUserTagRequestTypeExplodedListToJson(
    List<enums.V1CreateUserTagRequestType>? v1CreateUserTagRequestType) {
  return v1CreateUserTagRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreateUserTagRequestTypeListToJson(
    List<enums.V1CreateUserTagRequestType>? v1CreateUserTagRequestType) {
  if (v1CreateUserTagRequestType == null) {
    return [];
  }

  return v1CreateUserTagRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateUserTagRequestType> v1CreateUserTagRequestTypeListFromJson(
  List? v1CreateUserTagRequestType, [
  List<enums.V1CreateUserTagRequestType>? defaultValue,
]) {
  if (v1CreateUserTagRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateUserTagRequestType
      .map((e) => v1CreateUserTagRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateUserTagRequestType>?
    v1CreateUserTagRequestTypeNullableListFromJson(
  List? v1CreateUserTagRequestType, [
  List<enums.V1CreateUserTagRequestType>? defaultValue,
]) {
  if (v1CreateUserTagRequestType == null) {
    return defaultValue;
  }

  return v1CreateUserTagRequestType
      .map((e) => v1CreateUserTagRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateUsersRequestTypeNullableToJson(
    enums.V1CreateUsersRequestType? v1CreateUsersRequestType) {
  return v1CreateUsersRequestType?.value;
}

String? v1CreateUsersRequestTypeToJson(
    enums.V1CreateUsersRequestType v1CreateUsersRequestType) {
  return v1CreateUsersRequestType.value;
}

enums.V1CreateUsersRequestType v1CreateUsersRequestTypeFromJson(
  Object? v1CreateUsersRequestType, [
  enums.V1CreateUsersRequestType? defaultValue,
]) {
  return enums.V1CreateUsersRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateUsersRequestType) ??
      defaultValue ??
      enums.V1CreateUsersRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateUsersRequestType? v1CreateUsersRequestTypeNullableFromJson(
  Object? v1CreateUsersRequestType, [
  enums.V1CreateUsersRequestType? defaultValue,
]) {
  if (v1CreateUsersRequestType == null) {
    return null;
  }
  return enums.V1CreateUsersRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateUsersRequestType) ??
      defaultValue;
}

String v1CreateUsersRequestTypeExplodedListToJson(
    List<enums.V1CreateUsersRequestType>? v1CreateUsersRequestType) {
  return v1CreateUsersRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreateUsersRequestTypeListToJson(
    List<enums.V1CreateUsersRequestType>? v1CreateUsersRequestType) {
  if (v1CreateUsersRequestType == null) {
    return [];
  }

  return v1CreateUsersRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateUsersRequestType> v1CreateUsersRequestTypeListFromJson(
  List? v1CreateUsersRequestType, [
  List<enums.V1CreateUsersRequestType>? defaultValue,
]) {
  if (v1CreateUsersRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateUsersRequestType
      .map((e) => v1CreateUsersRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateUsersRequestType>?
    v1CreateUsersRequestTypeNullableListFromJson(
  List? v1CreateUsersRequestType, [
  List<enums.V1CreateUsersRequestType>? defaultValue,
]) {
  if (v1CreateUsersRequestType == null) {
    return defaultValue;
  }

  return v1CreateUsersRequestType
      .map((e) => v1CreateUsersRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateWalletAccountsRequestTypeNullableToJson(
    enums.V1CreateWalletAccountsRequestType?
        v1CreateWalletAccountsRequestType) {
  return v1CreateWalletAccountsRequestType?.value;
}

String? v1CreateWalletAccountsRequestTypeToJson(
    enums.V1CreateWalletAccountsRequestType v1CreateWalletAccountsRequestType) {
  return v1CreateWalletAccountsRequestType.value;
}

enums.V1CreateWalletAccountsRequestType
    v1CreateWalletAccountsRequestTypeFromJson(
  Object? v1CreateWalletAccountsRequestType, [
  enums.V1CreateWalletAccountsRequestType? defaultValue,
]) {
  return enums.V1CreateWalletAccountsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateWalletAccountsRequestType) ??
      defaultValue ??
      enums.V1CreateWalletAccountsRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateWalletAccountsRequestType?
    v1CreateWalletAccountsRequestTypeNullableFromJson(
  Object? v1CreateWalletAccountsRequestType, [
  enums.V1CreateWalletAccountsRequestType? defaultValue,
]) {
  if (v1CreateWalletAccountsRequestType == null) {
    return null;
  }
  return enums.V1CreateWalletAccountsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1CreateWalletAccountsRequestType) ??
      defaultValue;
}

String v1CreateWalletAccountsRequestTypeExplodedListToJson(
    List<enums.V1CreateWalletAccountsRequestType>?
        v1CreateWalletAccountsRequestType) {
  return v1CreateWalletAccountsRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1CreateWalletAccountsRequestTypeListToJson(
    List<enums.V1CreateWalletAccountsRequestType>?
        v1CreateWalletAccountsRequestType) {
  if (v1CreateWalletAccountsRequestType == null) {
    return [];
  }

  return v1CreateWalletAccountsRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateWalletAccountsRequestType>
    v1CreateWalletAccountsRequestTypeListFromJson(
  List? v1CreateWalletAccountsRequestType, [
  List<enums.V1CreateWalletAccountsRequestType>? defaultValue,
]) {
  if (v1CreateWalletAccountsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateWalletAccountsRequestType
      .map((e) => v1CreateWalletAccountsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateWalletAccountsRequestType>?
    v1CreateWalletAccountsRequestTypeNullableListFromJson(
  List? v1CreateWalletAccountsRequestType, [
  List<enums.V1CreateWalletAccountsRequestType>? defaultValue,
]) {
  if (v1CreateWalletAccountsRequestType == null) {
    return defaultValue;
  }

  return v1CreateWalletAccountsRequestType
      .map((e) => v1CreateWalletAccountsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CreateWalletRequestTypeNullableToJson(
    enums.V1CreateWalletRequestType? v1CreateWalletRequestType) {
  return v1CreateWalletRequestType?.value;
}

String? v1CreateWalletRequestTypeToJson(
    enums.V1CreateWalletRequestType v1CreateWalletRequestType) {
  return v1CreateWalletRequestType.value;
}

enums.V1CreateWalletRequestType v1CreateWalletRequestTypeFromJson(
  Object? v1CreateWalletRequestType, [
  enums.V1CreateWalletRequestType? defaultValue,
]) {
  return enums.V1CreateWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateWalletRequestType) ??
      defaultValue ??
      enums.V1CreateWalletRequestType.swaggerGeneratedUnknown;
}

enums.V1CreateWalletRequestType? v1CreateWalletRequestTypeNullableFromJson(
  Object? v1CreateWalletRequestType, [
  enums.V1CreateWalletRequestType? defaultValue,
]) {
  if (v1CreateWalletRequestType == null) {
    return null;
  }
  return enums.V1CreateWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1CreateWalletRequestType) ??
      defaultValue;
}

String v1CreateWalletRequestTypeExplodedListToJson(
    List<enums.V1CreateWalletRequestType>? v1CreateWalletRequestType) {
  return v1CreateWalletRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CreateWalletRequestTypeListToJson(
    List<enums.V1CreateWalletRequestType>? v1CreateWalletRequestType) {
  if (v1CreateWalletRequestType == null) {
    return [];
  }

  return v1CreateWalletRequestType.map((e) => e.value!).toList();
}

List<enums.V1CreateWalletRequestType> v1CreateWalletRequestTypeListFromJson(
  List? v1CreateWalletRequestType, [
  List<enums.V1CreateWalletRequestType>? defaultValue,
]) {
  if (v1CreateWalletRequestType == null) {
    return defaultValue ?? [];
  }

  return v1CreateWalletRequestType
      .map((e) => v1CreateWalletRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CreateWalletRequestType>?
    v1CreateWalletRequestTypeNullableListFromJson(
  List? v1CreateWalletRequestType, [
  List<enums.V1CreateWalletRequestType>? defaultValue,
]) {
  if (v1CreateWalletRequestType == null) {
    return defaultValue;
  }

  return v1CreateWalletRequestType
      .map((e) => v1CreateWalletRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1CredentialTypeNullableToJson(
    enums.V1CredentialType? v1CredentialType) {
  return v1CredentialType?.value;
}

String? v1CredentialTypeToJson(enums.V1CredentialType v1CredentialType) {
  return v1CredentialType.value;
}

enums.V1CredentialType v1CredentialTypeFromJson(
  Object? v1CredentialType, [
  enums.V1CredentialType? defaultValue,
]) {
  return enums.V1CredentialType.values
          .firstWhereOrNull((e) => e.value == v1CredentialType) ??
      defaultValue ??
      enums.V1CredentialType.swaggerGeneratedUnknown;
}

enums.V1CredentialType? v1CredentialTypeNullableFromJson(
  Object? v1CredentialType, [
  enums.V1CredentialType? defaultValue,
]) {
  if (v1CredentialType == null) {
    return null;
  }
  return enums.V1CredentialType.values
          .firstWhereOrNull((e) => e.value == v1CredentialType) ??
      defaultValue;
}

String v1CredentialTypeExplodedListToJson(
    List<enums.V1CredentialType>? v1CredentialType) {
  return v1CredentialType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CredentialTypeListToJson(
    List<enums.V1CredentialType>? v1CredentialType) {
  if (v1CredentialType == null) {
    return [];
  }

  return v1CredentialType.map((e) => e.value!).toList();
}

List<enums.V1CredentialType> v1CredentialTypeListFromJson(
  List? v1CredentialType, [
  List<enums.V1CredentialType>? defaultValue,
]) {
  if (v1CredentialType == null) {
    return defaultValue ?? [];
  }

  return v1CredentialType
      .map((e) => v1CredentialTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1CredentialType>? v1CredentialTypeNullableListFromJson(
  List? v1CredentialType, [
  List<enums.V1CredentialType>? defaultValue,
]) {
  if (v1CredentialType == null) {
    return defaultValue;
  }

  return v1CredentialType
      .map((e) => v1CredentialTypeFromJson(e.toString()))
      .toList();
}

String? v1CurveNullableToJson(enums.V1Curve? v1Curve) {
  return v1Curve?.value;
}

String? v1CurveToJson(enums.V1Curve v1Curve) {
  return v1Curve.value;
}

enums.V1Curve v1CurveFromJson(
  Object? v1Curve, [
  enums.V1Curve? defaultValue,
]) {
  return enums.V1Curve.values.firstWhereOrNull((e) => e.value == v1Curve) ??
      defaultValue ??
      enums.V1Curve.swaggerGeneratedUnknown;
}

enums.V1Curve? v1CurveNullableFromJson(
  Object? v1Curve, [
  enums.V1Curve? defaultValue,
]) {
  if (v1Curve == null) {
    return null;
  }
  return enums.V1Curve.values.firstWhereOrNull((e) => e.value == v1Curve) ??
      defaultValue;
}

String v1CurveExplodedListToJson(List<enums.V1Curve>? v1Curve) {
  return v1Curve?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1CurveListToJson(List<enums.V1Curve>? v1Curve) {
  if (v1Curve == null) {
    return [];
  }

  return v1Curve.map((e) => e.value!).toList();
}

List<enums.V1Curve> v1CurveListFromJson(
  List? v1Curve, [
  List<enums.V1Curve>? defaultValue,
]) {
  if (v1Curve == null) {
    return defaultValue ?? [];
  }

  return v1Curve.map((e) => v1CurveFromJson(e.toString())).toList();
}

List<enums.V1Curve>? v1CurveNullableListFromJson(
  List? v1Curve, [
  List<enums.V1Curve>? defaultValue,
]) {
  if (v1Curve == null) {
    return defaultValue;
  }

  return v1Curve.map((e) => v1CurveFromJson(e.toString())).toList();
}

String? v1DeleteApiKeysRequestTypeNullableToJson(
    enums.V1DeleteApiKeysRequestType? v1DeleteApiKeysRequestType) {
  return v1DeleteApiKeysRequestType?.value;
}

String? v1DeleteApiKeysRequestTypeToJson(
    enums.V1DeleteApiKeysRequestType v1DeleteApiKeysRequestType) {
  return v1DeleteApiKeysRequestType.value;
}

enums.V1DeleteApiKeysRequestType v1DeleteApiKeysRequestTypeFromJson(
  Object? v1DeleteApiKeysRequestType, [
  enums.V1DeleteApiKeysRequestType? defaultValue,
]) {
  return enums.V1DeleteApiKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteApiKeysRequestType) ??
      defaultValue ??
      enums.V1DeleteApiKeysRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteApiKeysRequestType? v1DeleteApiKeysRequestTypeNullableFromJson(
  Object? v1DeleteApiKeysRequestType, [
  enums.V1DeleteApiKeysRequestType? defaultValue,
]) {
  if (v1DeleteApiKeysRequestType == null) {
    return null;
  }
  return enums.V1DeleteApiKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteApiKeysRequestType) ??
      defaultValue;
}

String v1DeleteApiKeysRequestTypeExplodedListToJson(
    List<enums.V1DeleteApiKeysRequestType>? v1DeleteApiKeysRequestType) {
  return v1DeleteApiKeysRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeleteApiKeysRequestTypeListToJson(
    List<enums.V1DeleteApiKeysRequestType>? v1DeleteApiKeysRequestType) {
  if (v1DeleteApiKeysRequestType == null) {
    return [];
  }

  return v1DeleteApiKeysRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteApiKeysRequestType> v1DeleteApiKeysRequestTypeListFromJson(
  List? v1DeleteApiKeysRequestType, [
  List<enums.V1DeleteApiKeysRequestType>? defaultValue,
]) {
  if (v1DeleteApiKeysRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteApiKeysRequestType
      .map((e) => v1DeleteApiKeysRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteApiKeysRequestType>?
    v1DeleteApiKeysRequestTypeNullableListFromJson(
  List? v1DeleteApiKeysRequestType, [
  List<enums.V1DeleteApiKeysRequestType>? defaultValue,
]) {
  if (v1DeleteApiKeysRequestType == null) {
    return defaultValue;
  }

  return v1DeleteApiKeysRequestType
      .map((e) => v1DeleteApiKeysRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteAuthenticatorsRequestTypeNullableToJson(
    enums.V1DeleteAuthenticatorsRequestType?
        v1DeleteAuthenticatorsRequestType) {
  return v1DeleteAuthenticatorsRequestType?.value;
}

String? v1DeleteAuthenticatorsRequestTypeToJson(
    enums.V1DeleteAuthenticatorsRequestType v1DeleteAuthenticatorsRequestType) {
  return v1DeleteAuthenticatorsRequestType.value;
}

enums.V1DeleteAuthenticatorsRequestType
    v1DeleteAuthenticatorsRequestTypeFromJson(
  Object? v1DeleteAuthenticatorsRequestType, [
  enums.V1DeleteAuthenticatorsRequestType? defaultValue,
]) {
  return enums.V1DeleteAuthenticatorsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeleteAuthenticatorsRequestType) ??
      defaultValue ??
      enums.V1DeleteAuthenticatorsRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteAuthenticatorsRequestType?
    v1DeleteAuthenticatorsRequestTypeNullableFromJson(
  Object? v1DeleteAuthenticatorsRequestType, [
  enums.V1DeleteAuthenticatorsRequestType? defaultValue,
]) {
  if (v1DeleteAuthenticatorsRequestType == null) {
    return null;
  }
  return enums.V1DeleteAuthenticatorsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeleteAuthenticatorsRequestType) ??
      defaultValue;
}

String v1DeleteAuthenticatorsRequestTypeExplodedListToJson(
    List<enums.V1DeleteAuthenticatorsRequestType>?
        v1DeleteAuthenticatorsRequestType) {
  return v1DeleteAuthenticatorsRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1DeleteAuthenticatorsRequestTypeListToJson(
    List<enums.V1DeleteAuthenticatorsRequestType>?
        v1DeleteAuthenticatorsRequestType) {
  if (v1DeleteAuthenticatorsRequestType == null) {
    return [];
  }

  return v1DeleteAuthenticatorsRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteAuthenticatorsRequestType>
    v1DeleteAuthenticatorsRequestTypeListFromJson(
  List? v1DeleteAuthenticatorsRequestType, [
  List<enums.V1DeleteAuthenticatorsRequestType>? defaultValue,
]) {
  if (v1DeleteAuthenticatorsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteAuthenticatorsRequestType
      .map((e) => v1DeleteAuthenticatorsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteAuthenticatorsRequestType>?
    v1DeleteAuthenticatorsRequestTypeNullableListFromJson(
  List? v1DeleteAuthenticatorsRequestType, [
  List<enums.V1DeleteAuthenticatorsRequestType>? defaultValue,
]) {
  if (v1DeleteAuthenticatorsRequestType == null) {
    return defaultValue;
  }

  return v1DeleteAuthenticatorsRequestType
      .map((e) => v1DeleteAuthenticatorsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteInvitationRequestTypeNullableToJson(
    enums.V1DeleteInvitationRequestType? v1DeleteInvitationRequestType) {
  return v1DeleteInvitationRequestType?.value;
}

String? v1DeleteInvitationRequestTypeToJson(
    enums.V1DeleteInvitationRequestType v1DeleteInvitationRequestType) {
  return v1DeleteInvitationRequestType.value;
}

enums.V1DeleteInvitationRequestType v1DeleteInvitationRequestTypeFromJson(
  Object? v1DeleteInvitationRequestType, [
  enums.V1DeleteInvitationRequestType? defaultValue,
]) {
  return enums.V1DeleteInvitationRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteInvitationRequestType) ??
      defaultValue ??
      enums.V1DeleteInvitationRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteInvitationRequestType?
    v1DeleteInvitationRequestTypeNullableFromJson(
  Object? v1DeleteInvitationRequestType, [
  enums.V1DeleteInvitationRequestType? defaultValue,
]) {
  if (v1DeleteInvitationRequestType == null) {
    return null;
  }
  return enums.V1DeleteInvitationRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteInvitationRequestType) ??
      defaultValue;
}

String v1DeleteInvitationRequestTypeExplodedListToJson(
    List<enums.V1DeleteInvitationRequestType>? v1DeleteInvitationRequestType) {
  return v1DeleteInvitationRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeleteInvitationRequestTypeListToJson(
    List<enums.V1DeleteInvitationRequestType>? v1DeleteInvitationRequestType) {
  if (v1DeleteInvitationRequestType == null) {
    return [];
  }

  return v1DeleteInvitationRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteInvitationRequestType>
    v1DeleteInvitationRequestTypeListFromJson(
  List? v1DeleteInvitationRequestType, [
  List<enums.V1DeleteInvitationRequestType>? defaultValue,
]) {
  if (v1DeleteInvitationRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteInvitationRequestType
      .map((e) => v1DeleteInvitationRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteInvitationRequestType>?
    v1DeleteInvitationRequestTypeNullableListFromJson(
  List? v1DeleteInvitationRequestType, [
  List<enums.V1DeleteInvitationRequestType>? defaultValue,
]) {
  if (v1DeleteInvitationRequestType == null) {
    return defaultValue;
  }

  return v1DeleteInvitationRequestType
      .map((e) => v1DeleteInvitationRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteOauthProvidersRequestTypeNullableToJson(
    enums.V1DeleteOauthProvidersRequestType?
        v1DeleteOauthProvidersRequestType) {
  return v1DeleteOauthProvidersRequestType?.value;
}

String? v1DeleteOauthProvidersRequestTypeToJson(
    enums.V1DeleteOauthProvidersRequestType v1DeleteOauthProvidersRequestType) {
  return v1DeleteOauthProvidersRequestType.value;
}

enums.V1DeleteOauthProvidersRequestType
    v1DeleteOauthProvidersRequestTypeFromJson(
  Object? v1DeleteOauthProvidersRequestType, [
  enums.V1DeleteOauthProvidersRequestType? defaultValue,
]) {
  return enums.V1DeleteOauthProvidersRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeleteOauthProvidersRequestType) ??
      defaultValue ??
      enums.V1DeleteOauthProvidersRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteOauthProvidersRequestType?
    v1DeleteOauthProvidersRequestTypeNullableFromJson(
  Object? v1DeleteOauthProvidersRequestType, [
  enums.V1DeleteOauthProvidersRequestType? defaultValue,
]) {
  if (v1DeleteOauthProvidersRequestType == null) {
    return null;
  }
  return enums.V1DeleteOauthProvidersRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeleteOauthProvidersRequestType) ??
      defaultValue;
}

String v1DeleteOauthProvidersRequestTypeExplodedListToJson(
    List<enums.V1DeleteOauthProvidersRequestType>?
        v1DeleteOauthProvidersRequestType) {
  return v1DeleteOauthProvidersRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1DeleteOauthProvidersRequestTypeListToJson(
    List<enums.V1DeleteOauthProvidersRequestType>?
        v1DeleteOauthProvidersRequestType) {
  if (v1DeleteOauthProvidersRequestType == null) {
    return [];
  }

  return v1DeleteOauthProvidersRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteOauthProvidersRequestType>
    v1DeleteOauthProvidersRequestTypeListFromJson(
  List? v1DeleteOauthProvidersRequestType, [
  List<enums.V1DeleteOauthProvidersRequestType>? defaultValue,
]) {
  if (v1DeleteOauthProvidersRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteOauthProvidersRequestType
      .map((e) => v1DeleteOauthProvidersRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteOauthProvidersRequestType>?
    v1DeleteOauthProvidersRequestTypeNullableListFromJson(
  List? v1DeleteOauthProvidersRequestType, [
  List<enums.V1DeleteOauthProvidersRequestType>? defaultValue,
]) {
  if (v1DeleteOauthProvidersRequestType == null) {
    return defaultValue;
  }

  return v1DeleteOauthProvidersRequestType
      .map((e) => v1DeleteOauthProvidersRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeletePolicyRequestTypeNullableToJson(
    enums.V1DeletePolicyRequestType? v1DeletePolicyRequestType) {
  return v1DeletePolicyRequestType?.value;
}

String? v1DeletePolicyRequestTypeToJson(
    enums.V1DeletePolicyRequestType v1DeletePolicyRequestType) {
  return v1DeletePolicyRequestType.value;
}

enums.V1DeletePolicyRequestType v1DeletePolicyRequestTypeFromJson(
  Object? v1DeletePolicyRequestType, [
  enums.V1DeletePolicyRequestType? defaultValue,
]) {
  return enums.V1DeletePolicyRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeletePolicyRequestType) ??
      defaultValue ??
      enums.V1DeletePolicyRequestType.swaggerGeneratedUnknown;
}

enums.V1DeletePolicyRequestType? v1DeletePolicyRequestTypeNullableFromJson(
  Object? v1DeletePolicyRequestType, [
  enums.V1DeletePolicyRequestType? defaultValue,
]) {
  if (v1DeletePolicyRequestType == null) {
    return null;
  }
  return enums.V1DeletePolicyRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeletePolicyRequestType) ??
      defaultValue;
}

String v1DeletePolicyRequestTypeExplodedListToJson(
    List<enums.V1DeletePolicyRequestType>? v1DeletePolicyRequestType) {
  return v1DeletePolicyRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeletePolicyRequestTypeListToJson(
    List<enums.V1DeletePolicyRequestType>? v1DeletePolicyRequestType) {
  if (v1DeletePolicyRequestType == null) {
    return [];
  }

  return v1DeletePolicyRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeletePolicyRequestType> v1DeletePolicyRequestTypeListFromJson(
  List? v1DeletePolicyRequestType, [
  List<enums.V1DeletePolicyRequestType>? defaultValue,
]) {
  if (v1DeletePolicyRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeletePolicyRequestType
      .map((e) => v1DeletePolicyRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeletePolicyRequestType>?
    v1DeletePolicyRequestTypeNullableListFromJson(
  List? v1DeletePolicyRequestType, [
  List<enums.V1DeletePolicyRequestType>? defaultValue,
]) {
  if (v1DeletePolicyRequestType == null) {
    return defaultValue;
  }

  return v1DeletePolicyRequestType
      .map((e) => v1DeletePolicyRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeletePrivateKeyTagsRequestTypeNullableToJson(
    enums.V1DeletePrivateKeyTagsRequestType?
        v1DeletePrivateKeyTagsRequestType) {
  return v1DeletePrivateKeyTagsRequestType?.value;
}

String? v1DeletePrivateKeyTagsRequestTypeToJson(
    enums.V1DeletePrivateKeyTagsRequestType v1DeletePrivateKeyTagsRequestType) {
  return v1DeletePrivateKeyTagsRequestType.value;
}

enums.V1DeletePrivateKeyTagsRequestType
    v1DeletePrivateKeyTagsRequestTypeFromJson(
  Object? v1DeletePrivateKeyTagsRequestType, [
  enums.V1DeletePrivateKeyTagsRequestType? defaultValue,
]) {
  return enums.V1DeletePrivateKeyTagsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeletePrivateKeyTagsRequestType) ??
      defaultValue ??
      enums.V1DeletePrivateKeyTagsRequestType.swaggerGeneratedUnknown;
}

enums.V1DeletePrivateKeyTagsRequestType?
    v1DeletePrivateKeyTagsRequestTypeNullableFromJson(
  Object? v1DeletePrivateKeyTagsRequestType, [
  enums.V1DeletePrivateKeyTagsRequestType? defaultValue,
]) {
  if (v1DeletePrivateKeyTagsRequestType == null) {
    return null;
  }
  return enums.V1DeletePrivateKeyTagsRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeletePrivateKeyTagsRequestType) ??
      defaultValue;
}

String v1DeletePrivateKeyTagsRequestTypeExplodedListToJson(
    List<enums.V1DeletePrivateKeyTagsRequestType>?
        v1DeletePrivateKeyTagsRequestType) {
  return v1DeletePrivateKeyTagsRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1DeletePrivateKeyTagsRequestTypeListToJson(
    List<enums.V1DeletePrivateKeyTagsRequestType>?
        v1DeletePrivateKeyTagsRequestType) {
  if (v1DeletePrivateKeyTagsRequestType == null) {
    return [];
  }

  return v1DeletePrivateKeyTagsRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeletePrivateKeyTagsRequestType>
    v1DeletePrivateKeyTagsRequestTypeListFromJson(
  List? v1DeletePrivateKeyTagsRequestType, [
  List<enums.V1DeletePrivateKeyTagsRequestType>? defaultValue,
]) {
  if (v1DeletePrivateKeyTagsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeletePrivateKeyTagsRequestType
      .map((e) => v1DeletePrivateKeyTagsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeletePrivateKeyTagsRequestType>?
    v1DeletePrivateKeyTagsRequestTypeNullableListFromJson(
  List? v1DeletePrivateKeyTagsRequestType, [
  List<enums.V1DeletePrivateKeyTagsRequestType>? defaultValue,
]) {
  if (v1DeletePrivateKeyTagsRequestType == null) {
    return defaultValue;
  }

  return v1DeletePrivateKeyTagsRequestType
      .map((e) => v1DeletePrivateKeyTagsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeletePrivateKeysRequestTypeNullableToJson(
    enums.V1DeletePrivateKeysRequestType? v1DeletePrivateKeysRequestType) {
  return v1DeletePrivateKeysRequestType?.value;
}

String? v1DeletePrivateKeysRequestTypeToJson(
    enums.V1DeletePrivateKeysRequestType v1DeletePrivateKeysRequestType) {
  return v1DeletePrivateKeysRequestType.value;
}

enums.V1DeletePrivateKeysRequestType v1DeletePrivateKeysRequestTypeFromJson(
  Object? v1DeletePrivateKeysRequestType, [
  enums.V1DeletePrivateKeysRequestType? defaultValue,
]) {
  return enums.V1DeletePrivateKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeletePrivateKeysRequestType) ??
      defaultValue ??
      enums.V1DeletePrivateKeysRequestType.swaggerGeneratedUnknown;
}

enums.V1DeletePrivateKeysRequestType?
    v1DeletePrivateKeysRequestTypeNullableFromJson(
  Object? v1DeletePrivateKeysRequestType, [
  enums.V1DeletePrivateKeysRequestType? defaultValue,
]) {
  if (v1DeletePrivateKeysRequestType == null) {
    return null;
  }
  return enums.V1DeletePrivateKeysRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeletePrivateKeysRequestType) ??
      defaultValue;
}

String v1DeletePrivateKeysRequestTypeExplodedListToJson(
    List<enums.V1DeletePrivateKeysRequestType>?
        v1DeletePrivateKeysRequestType) {
  return v1DeletePrivateKeysRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeletePrivateKeysRequestTypeListToJson(
    List<enums.V1DeletePrivateKeysRequestType>?
        v1DeletePrivateKeysRequestType) {
  if (v1DeletePrivateKeysRequestType == null) {
    return [];
  }

  return v1DeletePrivateKeysRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeletePrivateKeysRequestType>
    v1DeletePrivateKeysRequestTypeListFromJson(
  List? v1DeletePrivateKeysRequestType, [
  List<enums.V1DeletePrivateKeysRequestType>? defaultValue,
]) {
  if (v1DeletePrivateKeysRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeletePrivateKeysRequestType
      .map((e) => v1DeletePrivateKeysRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeletePrivateKeysRequestType>?
    v1DeletePrivateKeysRequestTypeNullableListFromJson(
  List? v1DeletePrivateKeysRequestType, [
  List<enums.V1DeletePrivateKeysRequestType>? defaultValue,
]) {
  if (v1DeletePrivateKeysRequestType == null) {
    return defaultValue;
  }

  return v1DeletePrivateKeysRequestType
      .map((e) => v1DeletePrivateKeysRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteSubOrganizationRequestTypeNullableToJson(
    enums.V1DeleteSubOrganizationRequestType?
        v1DeleteSubOrganizationRequestType) {
  return v1DeleteSubOrganizationRequestType?.value;
}

String? v1DeleteSubOrganizationRequestTypeToJson(
    enums.V1DeleteSubOrganizationRequestType
        v1DeleteSubOrganizationRequestType) {
  return v1DeleteSubOrganizationRequestType.value;
}

enums.V1DeleteSubOrganizationRequestType
    v1DeleteSubOrganizationRequestTypeFromJson(
  Object? v1DeleteSubOrganizationRequestType, [
  enums.V1DeleteSubOrganizationRequestType? defaultValue,
]) {
  return enums.V1DeleteSubOrganizationRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeleteSubOrganizationRequestType) ??
      defaultValue ??
      enums.V1DeleteSubOrganizationRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteSubOrganizationRequestType?
    v1DeleteSubOrganizationRequestTypeNullableFromJson(
  Object? v1DeleteSubOrganizationRequestType, [
  enums.V1DeleteSubOrganizationRequestType? defaultValue,
]) {
  if (v1DeleteSubOrganizationRequestType == null) {
    return null;
  }
  return enums.V1DeleteSubOrganizationRequestType.values.firstWhereOrNull(
          (e) => e.value == v1DeleteSubOrganizationRequestType) ??
      defaultValue;
}

String v1DeleteSubOrganizationRequestTypeExplodedListToJson(
    List<enums.V1DeleteSubOrganizationRequestType>?
        v1DeleteSubOrganizationRequestType) {
  return v1DeleteSubOrganizationRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1DeleteSubOrganizationRequestTypeListToJson(
    List<enums.V1DeleteSubOrganizationRequestType>?
        v1DeleteSubOrganizationRequestType) {
  if (v1DeleteSubOrganizationRequestType == null) {
    return [];
  }

  return v1DeleteSubOrganizationRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteSubOrganizationRequestType>
    v1DeleteSubOrganizationRequestTypeListFromJson(
  List? v1DeleteSubOrganizationRequestType, [
  List<enums.V1DeleteSubOrganizationRequestType>? defaultValue,
]) {
  if (v1DeleteSubOrganizationRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteSubOrganizationRequestType
      .map((e) => v1DeleteSubOrganizationRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteSubOrganizationRequestType>?
    v1DeleteSubOrganizationRequestTypeNullableListFromJson(
  List? v1DeleteSubOrganizationRequestType, [
  List<enums.V1DeleteSubOrganizationRequestType>? defaultValue,
]) {
  if (v1DeleteSubOrganizationRequestType == null) {
    return defaultValue;
  }

  return v1DeleteSubOrganizationRequestType
      .map((e) => v1DeleteSubOrganizationRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteUserTagsRequestTypeNullableToJson(
    enums.V1DeleteUserTagsRequestType? v1DeleteUserTagsRequestType) {
  return v1DeleteUserTagsRequestType?.value;
}

String? v1DeleteUserTagsRequestTypeToJson(
    enums.V1DeleteUserTagsRequestType v1DeleteUserTagsRequestType) {
  return v1DeleteUserTagsRequestType.value;
}

enums.V1DeleteUserTagsRequestType v1DeleteUserTagsRequestTypeFromJson(
  Object? v1DeleteUserTagsRequestType, [
  enums.V1DeleteUserTagsRequestType? defaultValue,
]) {
  return enums.V1DeleteUserTagsRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteUserTagsRequestType) ??
      defaultValue ??
      enums.V1DeleteUserTagsRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteUserTagsRequestType? v1DeleteUserTagsRequestTypeNullableFromJson(
  Object? v1DeleteUserTagsRequestType, [
  enums.V1DeleteUserTagsRequestType? defaultValue,
]) {
  if (v1DeleteUserTagsRequestType == null) {
    return null;
  }
  return enums.V1DeleteUserTagsRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteUserTagsRequestType) ??
      defaultValue;
}

String v1DeleteUserTagsRequestTypeExplodedListToJson(
    List<enums.V1DeleteUserTagsRequestType>? v1DeleteUserTagsRequestType) {
  return v1DeleteUserTagsRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeleteUserTagsRequestTypeListToJson(
    List<enums.V1DeleteUserTagsRequestType>? v1DeleteUserTagsRequestType) {
  if (v1DeleteUserTagsRequestType == null) {
    return [];
  }

  return v1DeleteUserTagsRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteUserTagsRequestType> v1DeleteUserTagsRequestTypeListFromJson(
  List? v1DeleteUserTagsRequestType, [
  List<enums.V1DeleteUserTagsRequestType>? defaultValue,
]) {
  if (v1DeleteUserTagsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteUserTagsRequestType
      .map((e) => v1DeleteUserTagsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteUserTagsRequestType>?
    v1DeleteUserTagsRequestTypeNullableListFromJson(
  List? v1DeleteUserTagsRequestType, [
  List<enums.V1DeleteUserTagsRequestType>? defaultValue,
]) {
  if (v1DeleteUserTagsRequestType == null) {
    return defaultValue;
  }

  return v1DeleteUserTagsRequestType
      .map((e) => v1DeleteUserTagsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteUsersRequestTypeNullableToJson(
    enums.V1DeleteUsersRequestType? v1DeleteUsersRequestType) {
  return v1DeleteUsersRequestType?.value;
}

String? v1DeleteUsersRequestTypeToJson(
    enums.V1DeleteUsersRequestType v1DeleteUsersRequestType) {
  return v1DeleteUsersRequestType.value;
}

enums.V1DeleteUsersRequestType v1DeleteUsersRequestTypeFromJson(
  Object? v1DeleteUsersRequestType, [
  enums.V1DeleteUsersRequestType? defaultValue,
]) {
  return enums.V1DeleteUsersRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteUsersRequestType) ??
      defaultValue ??
      enums.V1DeleteUsersRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteUsersRequestType? v1DeleteUsersRequestTypeNullableFromJson(
  Object? v1DeleteUsersRequestType, [
  enums.V1DeleteUsersRequestType? defaultValue,
]) {
  if (v1DeleteUsersRequestType == null) {
    return null;
  }
  return enums.V1DeleteUsersRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteUsersRequestType) ??
      defaultValue;
}

String v1DeleteUsersRequestTypeExplodedListToJson(
    List<enums.V1DeleteUsersRequestType>? v1DeleteUsersRequestType) {
  return v1DeleteUsersRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeleteUsersRequestTypeListToJson(
    List<enums.V1DeleteUsersRequestType>? v1DeleteUsersRequestType) {
  if (v1DeleteUsersRequestType == null) {
    return [];
  }

  return v1DeleteUsersRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteUsersRequestType> v1DeleteUsersRequestTypeListFromJson(
  List? v1DeleteUsersRequestType, [
  List<enums.V1DeleteUsersRequestType>? defaultValue,
]) {
  if (v1DeleteUsersRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteUsersRequestType
      .map((e) => v1DeleteUsersRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteUsersRequestType>?
    v1DeleteUsersRequestTypeNullableListFromJson(
  List? v1DeleteUsersRequestType, [
  List<enums.V1DeleteUsersRequestType>? defaultValue,
]) {
  if (v1DeleteUsersRequestType == null) {
    return defaultValue;
  }

  return v1DeleteUsersRequestType
      .map((e) => v1DeleteUsersRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1DeleteWalletsRequestTypeNullableToJson(
    enums.V1DeleteWalletsRequestType? v1DeleteWalletsRequestType) {
  return v1DeleteWalletsRequestType?.value;
}

String? v1DeleteWalletsRequestTypeToJson(
    enums.V1DeleteWalletsRequestType v1DeleteWalletsRequestType) {
  return v1DeleteWalletsRequestType.value;
}

enums.V1DeleteWalletsRequestType v1DeleteWalletsRequestTypeFromJson(
  Object? v1DeleteWalletsRequestType, [
  enums.V1DeleteWalletsRequestType? defaultValue,
]) {
  return enums.V1DeleteWalletsRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteWalletsRequestType) ??
      defaultValue ??
      enums.V1DeleteWalletsRequestType.swaggerGeneratedUnknown;
}

enums.V1DeleteWalletsRequestType? v1DeleteWalletsRequestTypeNullableFromJson(
  Object? v1DeleteWalletsRequestType, [
  enums.V1DeleteWalletsRequestType? defaultValue,
]) {
  if (v1DeleteWalletsRequestType == null) {
    return null;
  }
  return enums.V1DeleteWalletsRequestType.values
          .firstWhereOrNull((e) => e.value == v1DeleteWalletsRequestType) ??
      defaultValue;
}

String v1DeleteWalletsRequestTypeExplodedListToJson(
    List<enums.V1DeleteWalletsRequestType>? v1DeleteWalletsRequestType) {
  return v1DeleteWalletsRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1DeleteWalletsRequestTypeListToJson(
    List<enums.V1DeleteWalletsRequestType>? v1DeleteWalletsRequestType) {
  if (v1DeleteWalletsRequestType == null) {
    return [];
  }

  return v1DeleteWalletsRequestType.map((e) => e.value!).toList();
}

List<enums.V1DeleteWalletsRequestType> v1DeleteWalletsRequestTypeListFromJson(
  List? v1DeleteWalletsRequestType, [
  List<enums.V1DeleteWalletsRequestType>? defaultValue,
]) {
  if (v1DeleteWalletsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1DeleteWalletsRequestType
      .map((e) => v1DeleteWalletsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1DeleteWalletsRequestType>?
    v1DeleteWalletsRequestTypeNullableListFromJson(
  List? v1DeleteWalletsRequestType, [
  List<enums.V1DeleteWalletsRequestType>? defaultValue,
]) {
  if (v1DeleteWalletsRequestType == null) {
    return defaultValue;
  }

  return v1DeleteWalletsRequestType
      .map((e) => v1DeleteWalletsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1EffectNullableToJson(enums.V1Effect? v1Effect) {
  return v1Effect?.value;
}

String? v1EffectToJson(enums.V1Effect v1Effect) {
  return v1Effect.value;
}

enums.V1Effect v1EffectFromJson(
  Object? v1Effect, [
  enums.V1Effect? defaultValue,
]) {
  return enums.V1Effect.values.firstWhereOrNull((e) => e.value == v1Effect) ??
      defaultValue ??
      enums.V1Effect.swaggerGeneratedUnknown;
}

enums.V1Effect? v1EffectNullableFromJson(
  Object? v1Effect, [
  enums.V1Effect? defaultValue,
]) {
  if (v1Effect == null) {
    return null;
  }
  return enums.V1Effect.values.firstWhereOrNull((e) => e.value == v1Effect) ??
      defaultValue;
}

String v1EffectExplodedListToJson(List<enums.V1Effect>? v1Effect) {
  return v1Effect?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1EffectListToJson(List<enums.V1Effect>? v1Effect) {
  if (v1Effect == null) {
    return [];
  }

  return v1Effect.map((e) => e.value!).toList();
}

List<enums.V1Effect> v1EffectListFromJson(
  List? v1Effect, [
  List<enums.V1Effect>? defaultValue,
]) {
  if (v1Effect == null) {
    return defaultValue ?? [];
  }

  return v1Effect.map((e) => v1EffectFromJson(e.toString())).toList();
}

List<enums.V1Effect>? v1EffectNullableListFromJson(
  List? v1Effect, [
  List<enums.V1Effect>? defaultValue,
]) {
  if (v1Effect == null) {
    return defaultValue;
  }

  return v1Effect.map((e) => v1EffectFromJson(e.toString())).toList();
}

String? v1EmailAuthRequestTypeNullableToJson(
    enums.V1EmailAuthRequestType? v1EmailAuthRequestType) {
  return v1EmailAuthRequestType?.value;
}

String? v1EmailAuthRequestTypeToJson(
    enums.V1EmailAuthRequestType v1EmailAuthRequestType) {
  return v1EmailAuthRequestType.value;
}

enums.V1EmailAuthRequestType v1EmailAuthRequestTypeFromJson(
  Object? v1EmailAuthRequestType, [
  enums.V1EmailAuthRequestType? defaultValue,
]) {
  return enums.V1EmailAuthRequestType.values
          .firstWhereOrNull((e) => e.value == v1EmailAuthRequestType) ??
      defaultValue ??
      enums.V1EmailAuthRequestType.swaggerGeneratedUnknown;
}

enums.V1EmailAuthRequestType? v1EmailAuthRequestTypeNullableFromJson(
  Object? v1EmailAuthRequestType, [
  enums.V1EmailAuthRequestType? defaultValue,
]) {
  if (v1EmailAuthRequestType == null) {
    return null;
  }
  return enums.V1EmailAuthRequestType.values
          .firstWhereOrNull((e) => e.value == v1EmailAuthRequestType) ??
      defaultValue;
}

String v1EmailAuthRequestTypeExplodedListToJson(
    List<enums.V1EmailAuthRequestType>? v1EmailAuthRequestType) {
  return v1EmailAuthRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1EmailAuthRequestTypeListToJson(
    List<enums.V1EmailAuthRequestType>? v1EmailAuthRequestType) {
  if (v1EmailAuthRequestType == null) {
    return [];
  }

  return v1EmailAuthRequestType.map((e) => e.value!).toList();
}

List<enums.V1EmailAuthRequestType> v1EmailAuthRequestTypeListFromJson(
  List? v1EmailAuthRequestType, [
  List<enums.V1EmailAuthRequestType>? defaultValue,
]) {
  if (v1EmailAuthRequestType == null) {
    return defaultValue ?? [];
  }

  return v1EmailAuthRequestType
      .map((e) => v1EmailAuthRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1EmailAuthRequestType>? v1EmailAuthRequestTypeNullableListFromJson(
  List? v1EmailAuthRequestType, [
  List<enums.V1EmailAuthRequestType>? defaultValue,
]) {
  if (v1EmailAuthRequestType == null) {
    return defaultValue;
  }

  return v1EmailAuthRequestType
      .map((e) => v1EmailAuthRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1ExportPrivateKeyRequestTypeNullableToJson(
    enums.V1ExportPrivateKeyRequestType? v1ExportPrivateKeyRequestType) {
  return v1ExportPrivateKeyRequestType?.value;
}

String? v1ExportPrivateKeyRequestTypeToJson(
    enums.V1ExportPrivateKeyRequestType v1ExportPrivateKeyRequestType) {
  return v1ExportPrivateKeyRequestType.value;
}

enums.V1ExportPrivateKeyRequestType v1ExportPrivateKeyRequestTypeFromJson(
  Object? v1ExportPrivateKeyRequestType, [
  enums.V1ExportPrivateKeyRequestType? defaultValue,
]) {
  return enums.V1ExportPrivateKeyRequestType.values
          .firstWhereOrNull((e) => e.value == v1ExportPrivateKeyRequestType) ??
      defaultValue ??
      enums.V1ExportPrivateKeyRequestType.swaggerGeneratedUnknown;
}

enums.V1ExportPrivateKeyRequestType?
    v1ExportPrivateKeyRequestTypeNullableFromJson(
  Object? v1ExportPrivateKeyRequestType, [
  enums.V1ExportPrivateKeyRequestType? defaultValue,
]) {
  if (v1ExportPrivateKeyRequestType == null) {
    return null;
  }
  return enums.V1ExportPrivateKeyRequestType.values
          .firstWhereOrNull((e) => e.value == v1ExportPrivateKeyRequestType) ??
      defaultValue;
}

String v1ExportPrivateKeyRequestTypeExplodedListToJson(
    List<enums.V1ExportPrivateKeyRequestType>? v1ExportPrivateKeyRequestType) {
  return v1ExportPrivateKeyRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ExportPrivateKeyRequestTypeListToJson(
    List<enums.V1ExportPrivateKeyRequestType>? v1ExportPrivateKeyRequestType) {
  if (v1ExportPrivateKeyRequestType == null) {
    return [];
  }

  return v1ExportPrivateKeyRequestType.map((e) => e.value!).toList();
}

List<enums.V1ExportPrivateKeyRequestType>
    v1ExportPrivateKeyRequestTypeListFromJson(
  List? v1ExportPrivateKeyRequestType, [
  List<enums.V1ExportPrivateKeyRequestType>? defaultValue,
]) {
  if (v1ExportPrivateKeyRequestType == null) {
    return defaultValue ?? [];
  }

  return v1ExportPrivateKeyRequestType
      .map((e) => v1ExportPrivateKeyRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ExportPrivateKeyRequestType>?
    v1ExportPrivateKeyRequestTypeNullableListFromJson(
  List? v1ExportPrivateKeyRequestType, [
  List<enums.V1ExportPrivateKeyRequestType>? defaultValue,
]) {
  if (v1ExportPrivateKeyRequestType == null) {
    return defaultValue;
  }

  return v1ExportPrivateKeyRequestType
      .map((e) => v1ExportPrivateKeyRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1ExportWalletAccountRequestTypeNullableToJson(
    enums.V1ExportWalletAccountRequestType? v1ExportWalletAccountRequestType) {
  return v1ExportWalletAccountRequestType?.value;
}

String? v1ExportWalletAccountRequestTypeToJson(
    enums.V1ExportWalletAccountRequestType v1ExportWalletAccountRequestType) {
  return v1ExportWalletAccountRequestType.value;
}

enums.V1ExportWalletAccountRequestType v1ExportWalletAccountRequestTypeFromJson(
  Object? v1ExportWalletAccountRequestType, [
  enums.V1ExportWalletAccountRequestType? defaultValue,
]) {
  return enums.V1ExportWalletAccountRequestType.values.firstWhereOrNull(
          (e) => e.value == v1ExportWalletAccountRequestType) ??
      defaultValue ??
      enums.V1ExportWalletAccountRequestType.swaggerGeneratedUnknown;
}

enums.V1ExportWalletAccountRequestType?
    v1ExportWalletAccountRequestTypeNullableFromJson(
  Object? v1ExportWalletAccountRequestType, [
  enums.V1ExportWalletAccountRequestType? defaultValue,
]) {
  if (v1ExportWalletAccountRequestType == null) {
    return null;
  }
  return enums.V1ExportWalletAccountRequestType.values.firstWhereOrNull(
          (e) => e.value == v1ExportWalletAccountRequestType) ??
      defaultValue;
}

String v1ExportWalletAccountRequestTypeExplodedListToJson(
    List<enums.V1ExportWalletAccountRequestType>?
        v1ExportWalletAccountRequestType) {
  return v1ExportWalletAccountRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ExportWalletAccountRequestTypeListToJson(
    List<enums.V1ExportWalletAccountRequestType>?
        v1ExportWalletAccountRequestType) {
  if (v1ExportWalletAccountRequestType == null) {
    return [];
  }

  return v1ExportWalletAccountRequestType.map((e) => e.value!).toList();
}

List<enums.V1ExportWalletAccountRequestType>
    v1ExportWalletAccountRequestTypeListFromJson(
  List? v1ExportWalletAccountRequestType, [
  List<enums.V1ExportWalletAccountRequestType>? defaultValue,
]) {
  if (v1ExportWalletAccountRequestType == null) {
    return defaultValue ?? [];
  }

  return v1ExportWalletAccountRequestType
      .map((e) => v1ExportWalletAccountRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ExportWalletAccountRequestType>?
    v1ExportWalletAccountRequestTypeNullableListFromJson(
  List? v1ExportWalletAccountRequestType, [
  List<enums.V1ExportWalletAccountRequestType>? defaultValue,
]) {
  if (v1ExportWalletAccountRequestType == null) {
    return defaultValue;
  }

  return v1ExportWalletAccountRequestType
      .map((e) => v1ExportWalletAccountRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1ExportWalletRequestTypeNullableToJson(
    enums.V1ExportWalletRequestType? v1ExportWalletRequestType) {
  return v1ExportWalletRequestType?.value;
}

String? v1ExportWalletRequestTypeToJson(
    enums.V1ExportWalletRequestType v1ExportWalletRequestType) {
  return v1ExportWalletRequestType.value;
}

enums.V1ExportWalletRequestType v1ExportWalletRequestTypeFromJson(
  Object? v1ExportWalletRequestType, [
  enums.V1ExportWalletRequestType? defaultValue,
]) {
  return enums.V1ExportWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1ExportWalletRequestType) ??
      defaultValue ??
      enums.V1ExportWalletRequestType.swaggerGeneratedUnknown;
}

enums.V1ExportWalletRequestType? v1ExportWalletRequestTypeNullableFromJson(
  Object? v1ExportWalletRequestType, [
  enums.V1ExportWalletRequestType? defaultValue,
]) {
  if (v1ExportWalletRequestType == null) {
    return null;
  }
  return enums.V1ExportWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1ExportWalletRequestType) ??
      defaultValue;
}

String v1ExportWalletRequestTypeExplodedListToJson(
    List<enums.V1ExportWalletRequestType>? v1ExportWalletRequestType) {
  return v1ExportWalletRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ExportWalletRequestTypeListToJson(
    List<enums.V1ExportWalletRequestType>? v1ExportWalletRequestType) {
  if (v1ExportWalletRequestType == null) {
    return [];
  }

  return v1ExportWalletRequestType.map((e) => e.value!).toList();
}

List<enums.V1ExportWalletRequestType> v1ExportWalletRequestTypeListFromJson(
  List? v1ExportWalletRequestType, [
  List<enums.V1ExportWalletRequestType>? defaultValue,
]) {
  if (v1ExportWalletRequestType == null) {
    return defaultValue ?? [];
  }

  return v1ExportWalletRequestType
      .map((e) => v1ExportWalletRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ExportWalletRequestType>?
    v1ExportWalletRequestTypeNullableListFromJson(
  List? v1ExportWalletRequestType, [
  List<enums.V1ExportWalletRequestType>? defaultValue,
]) {
  if (v1ExportWalletRequestType == null) {
    return defaultValue;
  }

  return v1ExportWalletRequestType
      .map((e) => v1ExportWalletRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1FeatureNameNullableToJson(enums.V1FeatureName? v1FeatureName) {
  return v1FeatureName?.value;
}

String? v1FeatureNameToJson(enums.V1FeatureName v1FeatureName) {
  return v1FeatureName.value;
}

enums.V1FeatureName v1FeatureNameFromJson(
  Object? v1FeatureName, [
  enums.V1FeatureName? defaultValue,
]) {
  return enums.V1FeatureName.values
          .firstWhereOrNull((e) => e.value == v1FeatureName) ??
      defaultValue ??
      enums.V1FeatureName.swaggerGeneratedUnknown;
}

enums.V1FeatureName? v1FeatureNameNullableFromJson(
  Object? v1FeatureName, [
  enums.V1FeatureName? defaultValue,
]) {
  if (v1FeatureName == null) {
    return null;
  }
  return enums.V1FeatureName.values
          .firstWhereOrNull((e) => e.value == v1FeatureName) ??
      defaultValue;
}

String v1FeatureNameExplodedListToJson(
    List<enums.V1FeatureName>? v1FeatureName) {
  return v1FeatureName?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1FeatureNameListToJson(List<enums.V1FeatureName>? v1FeatureName) {
  if (v1FeatureName == null) {
    return [];
  }

  return v1FeatureName.map((e) => e.value!).toList();
}

List<enums.V1FeatureName> v1FeatureNameListFromJson(
  List? v1FeatureName, [
  List<enums.V1FeatureName>? defaultValue,
]) {
  if (v1FeatureName == null) {
    return defaultValue ?? [];
  }

  return v1FeatureName.map((e) => v1FeatureNameFromJson(e.toString())).toList();
}

List<enums.V1FeatureName>? v1FeatureNameNullableListFromJson(
  List? v1FeatureName, [
  List<enums.V1FeatureName>? defaultValue,
]) {
  if (v1FeatureName == null) {
    return defaultValue;
  }

  return v1FeatureName.map((e) => v1FeatureNameFromJson(e.toString())).toList();
}

String? v1HashFunctionNullableToJson(enums.V1HashFunction? v1HashFunction) {
  return v1HashFunction?.value;
}

String? v1HashFunctionToJson(enums.V1HashFunction v1HashFunction) {
  return v1HashFunction.value;
}

enums.V1HashFunction v1HashFunctionFromJson(
  Object? v1HashFunction, [
  enums.V1HashFunction? defaultValue,
]) {
  return enums.V1HashFunction.values
          .firstWhereOrNull((e) => e.value == v1HashFunction) ??
      defaultValue ??
      enums.V1HashFunction.swaggerGeneratedUnknown;
}

enums.V1HashFunction? v1HashFunctionNullableFromJson(
  Object? v1HashFunction, [
  enums.V1HashFunction? defaultValue,
]) {
  if (v1HashFunction == null) {
    return null;
  }
  return enums.V1HashFunction.values
          .firstWhereOrNull((e) => e.value == v1HashFunction) ??
      defaultValue;
}

String v1HashFunctionExplodedListToJson(
    List<enums.V1HashFunction>? v1HashFunction) {
  return v1HashFunction?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1HashFunctionListToJson(
    List<enums.V1HashFunction>? v1HashFunction) {
  if (v1HashFunction == null) {
    return [];
  }

  return v1HashFunction.map((e) => e.value!).toList();
}

List<enums.V1HashFunction> v1HashFunctionListFromJson(
  List? v1HashFunction, [
  List<enums.V1HashFunction>? defaultValue,
]) {
  if (v1HashFunction == null) {
    return defaultValue ?? [];
  }

  return v1HashFunction
      .map((e) => v1HashFunctionFromJson(e.toString()))
      .toList();
}

List<enums.V1HashFunction>? v1HashFunctionNullableListFromJson(
  List? v1HashFunction, [
  List<enums.V1HashFunction>? defaultValue,
]) {
  if (v1HashFunction == null) {
    return defaultValue;
  }

  return v1HashFunction
      .map((e) => v1HashFunctionFromJson(e.toString()))
      .toList();
}

String? v1ImportPrivateKeyRequestTypeNullableToJson(
    enums.V1ImportPrivateKeyRequestType? v1ImportPrivateKeyRequestType) {
  return v1ImportPrivateKeyRequestType?.value;
}

String? v1ImportPrivateKeyRequestTypeToJson(
    enums.V1ImportPrivateKeyRequestType v1ImportPrivateKeyRequestType) {
  return v1ImportPrivateKeyRequestType.value;
}

enums.V1ImportPrivateKeyRequestType v1ImportPrivateKeyRequestTypeFromJson(
  Object? v1ImportPrivateKeyRequestType, [
  enums.V1ImportPrivateKeyRequestType? defaultValue,
]) {
  return enums.V1ImportPrivateKeyRequestType.values
          .firstWhereOrNull((e) => e.value == v1ImportPrivateKeyRequestType) ??
      defaultValue ??
      enums.V1ImportPrivateKeyRequestType.swaggerGeneratedUnknown;
}

enums.V1ImportPrivateKeyRequestType?
    v1ImportPrivateKeyRequestTypeNullableFromJson(
  Object? v1ImportPrivateKeyRequestType, [
  enums.V1ImportPrivateKeyRequestType? defaultValue,
]) {
  if (v1ImportPrivateKeyRequestType == null) {
    return null;
  }
  return enums.V1ImportPrivateKeyRequestType.values
          .firstWhereOrNull((e) => e.value == v1ImportPrivateKeyRequestType) ??
      defaultValue;
}

String v1ImportPrivateKeyRequestTypeExplodedListToJson(
    List<enums.V1ImportPrivateKeyRequestType>? v1ImportPrivateKeyRequestType) {
  return v1ImportPrivateKeyRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ImportPrivateKeyRequestTypeListToJson(
    List<enums.V1ImportPrivateKeyRequestType>? v1ImportPrivateKeyRequestType) {
  if (v1ImportPrivateKeyRequestType == null) {
    return [];
  }

  return v1ImportPrivateKeyRequestType.map((e) => e.value!).toList();
}

List<enums.V1ImportPrivateKeyRequestType>
    v1ImportPrivateKeyRequestTypeListFromJson(
  List? v1ImportPrivateKeyRequestType, [
  List<enums.V1ImportPrivateKeyRequestType>? defaultValue,
]) {
  if (v1ImportPrivateKeyRequestType == null) {
    return defaultValue ?? [];
  }

  return v1ImportPrivateKeyRequestType
      .map((e) => v1ImportPrivateKeyRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ImportPrivateKeyRequestType>?
    v1ImportPrivateKeyRequestTypeNullableListFromJson(
  List? v1ImportPrivateKeyRequestType, [
  List<enums.V1ImportPrivateKeyRequestType>? defaultValue,
]) {
  if (v1ImportPrivateKeyRequestType == null) {
    return defaultValue;
  }

  return v1ImportPrivateKeyRequestType
      .map((e) => v1ImportPrivateKeyRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1ImportWalletRequestTypeNullableToJson(
    enums.V1ImportWalletRequestType? v1ImportWalletRequestType) {
  return v1ImportWalletRequestType?.value;
}

String? v1ImportWalletRequestTypeToJson(
    enums.V1ImportWalletRequestType v1ImportWalletRequestType) {
  return v1ImportWalletRequestType.value;
}

enums.V1ImportWalletRequestType v1ImportWalletRequestTypeFromJson(
  Object? v1ImportWalletRequestType, [
  enums.V1ImportWalletRequestType? defaultValue,
]) {
  return enums.V1ImportWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1ImportWalletRequestType) ??
      defaultValue ??
      enums.V1ImportWalletRequestType.swaggerGeneratedUnknown;
}

enums.V1ImportWalletRequestType? v1ImportWalletRequestTypeNullableFromJson(
  Object? v1ImportWalletRequestType, [
  enums.V1ImportWalletRequestType? defaultValue,
]) {
  if (v1ImportWalletRequestType == null) {
    return null;
  }
  return enums.V1ImportWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1ImportWalletRequestType) ??
      defaultValue;
}

String v1ImportWalletRequestTypeExplodedListToJson(
    List<enums.V1ImportWalletRequestType>? v1ImportWalletRequestType) {
  return v1ImportWalletRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1ImportWalletRequestTypeListToJson(
    List<enums.V1ImportWalletRequestType>? v1ImportWalletRequestType) {
  if (v1ImportWalletRequestType == null) {
    return [];
  }

  return v1ImportWalletRequestType.map((e) => e.value!).toList();
}

List<enums.V1ImportWalletRequestType> v1ImportWalletRequestTypeListFromJson(
  List? v1ImportWalletRequestType, [
  List<enums.V1ImportWalletRequestType>? defaultValue,
]) {
  if (v1ImportWalletRequestType == null) {
    return defaultValue ?? [];
  }

  return v1ImportWalletRequestType
      .map((e) => v1ImportWalletRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1ImportWalletRequestType>?
    v1ImportWalletRequestTypeNullableListFromJson(
  List? v1ImportWalletRequestType, [
  List<enums.V1ImportWalletRequestType>? defaultValue,
]) {
  if (v1ImportWalletRequestType == null) {
    return defaultValue;
  }

  return v1ImportWalletRequestType
      .map((e) => v1ImportWalletRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1InitImportPrivateKeyRequestTypeNullableToJson(
    enums.V1InitImportPrivateKeyRequestType?
        v1InitImportPrivateKeyRequestType) {
  return v1InitImportPrivateKeyRequestType?.value;
}

String? v1InitImportPrivateKeyRequestTypeToJson(
    enums.V1InitImportPrivateKeyRequestType v1InitImportPrivateKeyRequestType) {
  return v1InitImportPrivateKeyRequestType.value;
}

enums.V1InitImportPrivateKeyRequestType
    v1InitImportPrivateKeyRequestTypeFromJson(
  Object? v1InitImportPrivateKeyRequestType, [
  enums.V1InitImportPrivateKeyRequestType? defaultValue,
]) {
  return enums.V1InitImportPrivateKeyRequestType.values.firstWhereOrNull(
          (e) => e.value == v1InitImportPrivateKeyRequestType) ??
      defaultValue ??
      enums.V1InitImportPrivateKeyRequestType.swaggerGeneratedUnknown;
}

enums.V1InitImportPrivateKeyRequestType?
    v1InitImportPrivateKeyRequestTypeNullableFromJson(
  Object? v1InitImportPrivateKeyRequestType, [
  enums.V1InitImportPrivateKeyRequestType? defaultValue,
]) {
  if (v1InitImportPrivateKeyRequestType == null) {
    return null;
  }
  return enums.V1InitImportPrivateKeyRequestType.values.firstWhereOrNull(
          (e) => e.value == v1InitImportPrivateKeyRequestType) ??
      defaultValue;
}

String v1InitImportPrivateKeyRequestTypeExplodedListToJson(
    List<enums.V1InitImportPrivateKeyRequestType>?
        v1InitImportPrivateKeyRequestType) {
  return v1InitImportPrivateKeyRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1InitImportPrivateKeyRequestTypeListToJson(
    List<enums.V1InitImportPrivateKeyRequestType>?
        v1InitImportPrivateKeyRequestType) {
  if (v1InitImportPrivateKeyRequestType == null) {
    return [];
  }

  return v1InitImportPrivateKeyRequestType.map((e) => e.value!).toList();
}

List<enums.V1InitImportPrivateKeyRequestType>
    v1InitImportPrivateKeyRequestTypeListFromJson(
  List? v1InitImportPrivateKeyRequestType, [
  List<enums.V1InitImportPrivateKeyRequestType>? defaultValue,
]) {
  if (v1InitImportPrivateKeyRequestType == null) {
    return defaultValue ?? [];
  }

  return v1InitImportPrivateKeyRequestType
      .map((e) => v1InitImportPrivateKeyRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1InitImportPrivateKeyRequestType>?
    v1InitImportPrivateKeyRequestTypeNullableListFromJson(
  List? v1InitImportPrivateKeyRequestType, [
  List<enums.V1InitImportPrivateKeyRequestType>? defaultValue,
]) {
  if (v1InitImportPrivateKeyRequestType == null) {
    return defaultValue;
  }

  return v1InitImportPrivateKeyRequestType
      .map((e) => v1InitImportPrivateKeyRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1InitImportWalletRequestTypeNullableToJson(
    enums.V1InitImportWalletRequestType? v1InitImportWalletRequestType) {
  return v1InitImportWalletRequestType?.value;
}

String? v1InitImportWalletRequestTypeToJson(
    enums.V1InitImportWalletRequestType v1InitImportWalletRequestType) {
  return v1InitImportWalletRequestType.value;
}

enums.V1InitImportWalletRequestType v1InitImportWalletRequestTypeFromJson(
  Object? v1InitImportWalletRequestType, [
  enums.V1InitImportWalletRequestType? defaultValue,
]) {
  return enums.V1InitImportWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1InitImportWalletRequestType) ??
      defaultValue ??
      enums.V1InitImportWalletRequestType.swaggerGeneratedUnknown;
}

enums.V1InitImportWalletRequestType?
    v1InitImportWalletRequestTypeNullableFromJson(
  Object? v1InitImportWalletRequestType, [
  enums.V1InitImportWalletRequestType? defaultValue,
]) {
  if (v1InitImportWalletRequestType == null) {
    return null;
  }
  return enums.V1InitImportWalletRequestType.values
          .firstWhereOrNull((e) => e.value == v1InitImportWalletRequestType) ??
      defaultValue;
}

String v1InitImportWalletRequestTypeExplodedListToJson(
    List<enums.V1InitImportWalletRequestType>? v1InitImportWalletRequestType) {
  return v1InitImportWalletRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1InitImportWalletRequestTypeListToJson(
    List<enums.V1InitImportWalletRequestType>? v1InitImportWalletRequestType) {
  if (v1InitImportWalletRequestType == null) {
    return [];
  }

  return v1InitImportWalletRequestType.map((e) => e.value!).toList();
}

List<enums.V1InitImportWalletRequestType>
    v1InitImportWalletRequestTypeListFromJson(
  List? v1InitImportWalletRequestType, [
  List<enums.V1InitImportWalletRequestType>? defaultValue,
]) {
  if (v1InitImportWalletRequestType == null) {
    return defaultValue ?? [];
  }

  return v1InitImportWalletRequestType
      .map((e) => v1InitImportWalletRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1InitImportWalletRequestType>?
    v1InitImportWalletRequestTypeNullableListFromJson(
  List? v1InitImportWalletRequestType, [
  List<enums.V1InitImportWalletRequestType>? defaultValue,
]) {
  if (v1InitImportWalletRequestType == null) {
    return defaultValue;
  }

  return v1InitImportWalletRequestType
      .map((e) => v1InitImportWalletRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1InitOtpAuthRequestTypeNullableToJson(
    enums.V1InitOtpAuthRequestType? v1InitOtpAuthRequestType) {
  return v1InitOtpAuthRequestType?.value;
}

String? v1InitOtpAuthRequestTypeToJson(
    enums.V1InitOtpAuthRequestType v1InitOtpAuthRequestType) {
  return v1InitOtpAuthRequestType.value;
}

enums.V1InitOtpAuthRequestType v1InitOtpAuthRequestTypeFromJson(
  Object? v1InitOtpAuthRequestType, [
  enums.V1InitOtpAuthRequestType? defaultValue,
]) {
  return enums.V1InitOtpAuthRequestType.values
          .firstWhereOrNull((e) => e.value == v1InitOtpAuthRequestType) ??
      defaultValue ??
      enums.V1InitOtpAuthRequestType.swaggerGeneratedUnknown;
}

enums.V1InitOtpAuthRequestType? v1InitOtpAuthRequestTypeNullableFromJson(
  Object? v1InitOtpAuthRequestType, [
  enums.V1InitOtpAuthRequestType? defaultValue,
]) {
  if (v1InitOtpAuthRequestType == null) {
    return null;
  }
  return enums.V1InitOtpAuthRequestType.values
          .firstWhereOrNull((e) => e.value == v1InitOtpAuthRequestType) ??
      defaultValue;
}

String v1InitOtpAuthRequestTypeExplodedListToJson(
    List<enums.V1InitOtpAuthRequestType>? v1InitOtpAuthRequestType) {
  return v1InitOtpAuthRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1InitOtpAuthRequestTypeListToJson(
    List<enums.V1InitOtpAuthRequestType>? v1InitOtpAuthRequestType) {
  if (v1InitOtpAuthRequestType == null) {
    return [];
  }

  return v1InitOtpAuthRequestType.map((e) => e.value!).toList();
}

List<enums.V1InitOtpAuthRequestType> v1InitOtpAuthRequestTypeListFromJson(
  List? v1InitOtpAuthRequestType, [
  List<enums.V1InitOtpAuthRequestType>? defaultValue,
]) {
  if (v1InitOtpAuthRequestType == null) {
    return defaultValue ?? [];
  }

  return v1InitOtpAuthRequestType
      .map((e) => v1InitOtpAuthRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1InitOtpAuthRequestType>?
    v1InitOtpAuthRequestTypeNullableListFromJson(
  List? v1InitOtpAuthRequestType, [
  List<enums.V1InitOtpAuthRequestType>? defaultValue,
]) {
  if (v1InitOtpAuthRequestType == null) {
    return defaultValue;
  }

  return v1InitOtpAuthRequestType
      .map((e) => v1InitOtpAuthRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1InitUserEmailRecoveryRequestTypeNullableToJson(
    enums.V1InitUserEmailRecoveryRequestType?
        v1InitUserEmailRecoveryRequestType) {
  return v1InitUserEmailRecoveryRequestType?.value;
}

String? v1InitUserEmailRecoveryRequestTypeToJson(
    enums.V1InitUserEmailRecoveryRequestType
        v1InitUserEmailRecoveryRequestType) {
  return v1InitUserEmailRecoveryRequestType.value;
}

enums.V1InitUserEmailRecoveryRequestType
    v1InitUserEmailRecoveryRequestTypeFromJson(
  Object? v1InitUserEmailRecoveryRequestType, [
  enums.V1InitUserEmailRecoveryRequestType? defaultValue,
]) {
  return enums.V1InitUserEmailRecoveryRequestType.values.firstWhereOrNull(
          (e) => e.value == v1InitUserEmailRecoveryRequestType) ??
      defaultValue ??
      enums.V1InitUserEmailRecoveryRequestType.swaggerGeneratedUnknown;
}

enums.V1InitUserEmailRecoveryRequestType?
    v1InitUserEmailRecoveryRequestTypeNullableFromJson(
  Object? v1InitUserEmailRecoveryRequestType, [
  enums.V1InitUserEmailRecoveryRequestType? defaultValue,
]) {
  if (v1InitUserEmailRecoveryRequestType == null) {
    return null;
  }
  return enums.V1InitUserEmailRecoveryRequestType.values.firstWhereOrNull(
          (e) => e.value == v1InitUserEmailRecoveryRequestType) ??
      defaultValue;
}

String v1InitUserEmailRecoveryRequestTypeExplodedListToJson(
    List<enums.V1InitUserEmailRecoveryRequestType>?
        v1InitUserEmailRecoveryRequestType) {
  return v1InitUserEmailRecoveryRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1InitUserEmailRecoveryRequestTypeListToJson(
    List<enums.V1InitUserEmailRecoveryRequestType>?
        v1InitUserEmailRecoveryRequestType) {
  if (v1InitUserEmailRecoveryRequestType == null) {
    return [];
  }

  return v1InitUserEmailRecoveryRequestType.map((e) => e.value!).toList();
}

List<enums.V1InitUserEmailRecoveryRequestType>
    v1InitUserEmailRecoveryRequestTypeListFromJson(
  List? v1InitUserEmailRecoveryRequestType, [
  List<enums.V1InitUserEmailRecoveryRequestType>? defaultValue,
]) {
  if (v1InitUserEmailRecoveryRequestType == null) {
    return defaultValue ?? [];
  }

  return v1InitUserEmailRecoveryRequestType
      .map((e) => v1InitUserEmailRecoveryRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1InitUserEmailRecoveryRequestType>?
    v1InitUserEmailRecoveryRequestTypeNullableListFromJson(
  List? v1InitUserEmailRecoveryRequestType, [
  List<enums.V1InitUserEmailRecoveryRequestType>? defaultValue,
]) {
  if (v1InitUserEmailRecoveryRequestType == null) {
    return defaultValue;
  }

  return v1InitUserEmailRecoveryRequestType
      .map((e) => v1InitUserEmailRecoveryRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1InvitationStatusNullableToJson(
    enums.V1InvitationStatus? v1InvitationStatus) {
  return v1InvitationStatus?.value;
}

String? v1InvitationStatusToJson(enums.V1InvitationStatus v1InvitationStatus) {
  return v1InvitationStatus.value;
}

enums.V1InvitationStatus v1InvitationStatusFromJson(
  Object? v1InvitationStatus, [
  enums.V1InvitationStatus? defaultValue,
]) {
  return enums.V1InvitationStatus.values
          .firstWhereOrNull((e) => e.value == v1InvitationStatus) ??
      defaultValue ??
      enums.V1InvitationStatus.swaggerGeneratedUnknown;
}

enums.V1InvitationStatus? v1InvitationStatusNullableFromJson(
  Object? v1InvitationStatus, [
  enums.V1InvitationStatus? defaultValue,
]) {
  if (v1InvitationStatus == null) {
    return null;
  }
  return enums.V1InvitationStatus.values
          .firstWhereOrNull((e) => e.value == v1InvitationStatus) ??
      defaultValue;
}

String v1InvitationStatusExplodedListToJson(
    List<enums.V1InvitationStatus>? v1InvitationStatus) {
  return v1InvitationStatus?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1InvitationStatusListToJson(
    List<enums.V1InvitationStatus>? v1InvitationStatus) {
  if (v1InvitationStatus == null) {
    return [];
  }

  return v1InvitationStatus.map((e) => e.value!).toList();
}

List<enums.V1InvitationStatus> v1InvitationStatusListFromJson(
  List? v1InvitationStatus, [
  List<enums.V1InvitationStatus>? defaultValue,
]) {
  if (v1InvitationStatus == null) {
    return defaultValue ?? [];
  }

  return v1InvitationStatus
      .map((e) => v1InvitationStatusFromJson(e.toString()))
      .toList();
}

List<enums.V1InvitationStatus>? v1InvitationStatusNullableListFromJson(
  List? v1InvitationStatus, [
  List<enums.V1InvitationStatus>? defaultValue,
]) {
  if (v1InvitationStatus == null) {
    return defaultValue;
  }

  return v1InvitationStatus
      .map((e) => v1InvitationStatusFromJson(e.toString()))
      .toList();
}

String? v1MnemonicLanguageNullableToJson(
    enums.V1MnemonicLanguage? v1MnemonicLanguage) {
  return v1MnemonicLanguage?.value;
}

String? v1MnemonicLanguageToJson(enums.V1MnemonicLanguage v1MnemonicLanguage) {
  return v1MnemonicLanguage.value;
}

enums.V1MnemonicLanguage v1MnemonicLanguageFromJson(
  Object? v1MnemonicLanguage, [
  enums.V1MnemonicLanguage? defaultValue,
]) {
  return enums.V1MnemonicLanguage.values
          .firstWhereOrNull((e) => e.value == v1MnemonicLanguage) ??
      defaultValue ??
      enums.V1MnemonicLanguage.swaggerGeneratedUnknown;
}

enums.V1MnemonicLanguage? v1MnemonicLanguageNullableFromJson(
  Object? v1MnemonicLanguage, [
  enums.V1MnemonicLanguage? defaultValue,
]) {
  if (v1MnemonicLanguage == null) {
    return null;
  }
  return enums.V1MnemonicLanguage.values
          .firstWhereOrNull((e) => e.value == v1MnemonicLanguage) ??
      defaultValue;
}

String v1MnemonicLanguageExplodedListToJson(
    List<enums.V1MnemonicLanguage>? v1MnemonicLanguage) {
  return v1MnemonicLanguage?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1MnemonicLanguageListToJson(
    List<enums.V1MnemonicLanguage>? v1MnemonicLanguage) {
  if (v1MnemonicLanguage == null) {
    return [];
  }

  return v1MnemonicLanguage.map((e) => e.value!).toList();
}

List<enums.V1MnemonicLanguage> v1MnemonicLanguageListFromJson(
  List? v1MnemonicLanguage, [
  List<enums.V1MnemonicLanguage>? defaultValue,
]) {
  if (v1MnemonicLanguage == null) {
    return defaultValue ?? [];
  }

  return v1MnemonicLanguage
      .map((e) => v1MnemonicLanguageFromJson(e.toString()))
      .toList();
}

List<enums.V1MnemonicLanguage>? v1MnemonicLanguageNullableListFromJson(
  List? v1MnemonicLanguage, [
  List<enums.V1MnemonicLanguage>? defaultValue,
]) {
  if (v1MnemonicLanguage == null) {
    return defaultValue;
  }

  return v1MnemonicLanguage
      .map((e) => v1MnemonicLanguageFromJson(e.toString()))
      .toList();
}

String? v1OauthRequestTypeNullableToJson(
    enums.V1OauthRequestType? v1OauthRequestType) {
  return v1OauthRequestType?.value;
}

String? v1OauthRequestTypeToJson(enums.V1OauthRequestType v1OauthRequestType) {
  return v1OauthRequestType.value;
}

enums.V1OauthRequestType v1OauthRequestTypeFromJson(
  Object? v1OauthRequestType, [
  enums.V1OauthRequestType? defaultValue,
]) {
  return enums.V1OauthRequestType.values
          .firstWhereOrNull((e) => e.value == v1OauthRequestType) ??
      defaultValue ??
      enums.V1OauthRequestType.swaggerGeneratedUnknown;
}

enums.V1OauthRequestType? v1OauthRequestTypeNullableFromJson(
  Object? v1OauthRequestType, [
  enums.V1OauthRequestType? defaultValue,
]) {
  if (v1OauthRequestType == null) {
    return null;
  }
  return enums.V1OauthRequestType.values
          .firstWhereOrNull((e) => e.value == v1OauthRequestType) ??
      defaultValue;
}

String v1OauthRequestTypeExplodedListToJson(
    List<enums.V1OauthRequestType>? v1OauthRequestType) {
  return v1OauthRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1OauthRequestTypeListToJson(
    List<enums.V1OauthRequestType>? v1OauthRequestType) {
  if (v1OauthRequestType == null) {
    return [];
  }

  return v1OauthRequestType.map((e) => e.value!).toList();
}

List<enums.V1OauthRequestType> v1OauthRequestTypeListFromJson(
  List? v1OauthRequestType, [
  List<enums.V1OauthRequestType>? defaultValue,
]) {
  if (v1OauthRequestType == null) {
    return defaultValue ?? [];
  }

  return v1OauthRequestType
      .map((e) => v1OauthRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1OauthRequestType>? v1OauthRequestTypeNullableListFromJson(
  List? v1OauthRequestType, [
  List<enums.V1OauthRequestType>? defaultValue,
]) {
  if (v1OauthRequestType == null) {
    return defaultValue;
  }

  return v1OauthRequestType
      .map((e) => v1OauthRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1OperatorNullableToJson(enums.V1Operator? v1Operator) {
  return v1Operator?.value;
}

String? v1OperatorToJson(enums.V1Operator v1Operator) {
  return v1Operator.value;
}

enums.V1Operator v1OperatorFromJson(
  Object? v1Operator, [
  enums.V1Operator? defaultValue,
]) {
  return enums.V1Operator.values
          .firstWhereOrNull((e) => e.value == v1Operator) ??
      defaultValue ??
      enums.V1Operator.swaggerGeneratedUnknown;
}

enums.V1Operator? v1OperatorNullableFromJson(
  Object? v1Operator, [
  enums.V1Operator? defaultValue,
]) {
  if (v1Operator == null) {
    return null;
  }
  return enums.V1Operator.values
          .firstWhereOrNull((e) => e.value == v1Operator) ??
      defaultValue;
}

String v1OperatorExplodedListToJson(List<enums.V1Operator>? v1Operator) {
  return v1Operator?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1OperatorListToJson(List<enums.V1Operator>? v1Operator) {
  if (v1Operator == null) {
    return [];
  }

  return v1Operator.map((e) => e.value!).toList();
}

List<enums.V1Operator> v1OperatorListFromJson(
  List? v1Operator, [
  List<enums.V1Operator>? defaultValue,
]) {
  if (v1Operator == null) {
    return defaultValue ?? [];
  }

  return v1Operator.map((e) => v1OperatorFromJson(e.toString())).toList();
}

List<enums.V1Operator>? v1OperatorNullableListFromJson(
  List? v1Operator, [
  List<enums.V1Operator>? defaultValue,
]) {
  if (v1Operator == null) {
    return defaultValue;
  }

  return v1Operator.map((e) => v1OperatorFromJson(e.toString())).toList();
}

String? v1OtpAuthRequestTypeNullableToJson(
    enums.V1OtpAuthRequestType? v1OtpAuthRequestType) {
  return v1OtpAuthRequestType?.value;
}

String? v1OtpAuthRequestTypeToJson(
    enums.V1OtpAuthRequestType v1OtpAuthRequestType) {
  return v1OtpAuthRequestType.value;
}

enums.V1OtpAuthRequestType v1OtpAuthRequestTypeFromJson(
  Object? v1OtpAuthRequestType, [
  enums.V1OtpAuthRequestType? defaultValue,
]) {
  return enums.V1OtpAuthRequestType.values
          .firstWhereOrNull((e) => e.value == v1OtpAuthRequestType) ??
      defaultValue ??
      enums.V1OtpAuthRequestType.swaggerGeneratedUnknown;
}

enums.V1OtpAuthRequestType? v1OtpAuthRequestTypeNullableFromJson(
  Object? v1OtpAuthRequestType, [
  enums.V1OtpAuthRequestType? defaultValue,
]) {
  if (v1OtpAuthRequestType == null) {
    return null;
  }
  return enums.V1OtpAuthRequestType.values
          .firstWhereOrNull((e) => e.value == v1OtpAuthRequestType) ??
      defaultValue;
}

String v1OtpAuthRequestTypeExplodedListToJson(
    List<enums.V1OtpAuthRequestType>? v1OtpAuthRequestType) {
  return v1OtpAuthRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1OtpAuthRequestTypeListToJson(
    List<enums.V1OtpAuthRequestType>? v1OtpAuthRequestType) {
  if (v1OtpAuthRequestType == null) {
    return [];
  }

  return v1OtpAuthRequestType.map((e) => e.value!).toList();
}

List<enums.V1OtpAuthRequestType> v1OtpAuthRequestTypeListFromJson(
  List? v1OtpAuthRequestType, [
  List<enums.V1OtpAuthRequestType>? defaultValue,
]) {
  if (v1OtpAuthRequestType == null) {
    return defaultValue ?? [];
  }

  return v1OtpAuthRequestType
      .map((e) => v1OtpAuthRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1OtpAuthRequestType>? v1OtpAuthRequestTypeNullableListFromJson(
  List? v1OtpAuthRequestType, [
  List<enums.V1OtpAuthRequestType>? defaultValue,
]) {
  if (v1OtpAuthRequestType == null) {
    return defaultValue;
  }

  return v1OtpAuthRequestType
      .map((e) => v1OtpAuthRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1PathFormatNullableToJson(enums.V1PathFormat? v1PathFormat) {
  return v1PathFormat?.value;
}

String? v1PathFormatToJson(enums.V1PathFormat v1PathFormat) {
  return v1PathFormat.value;
}

enums.V1PathFormat v1PathFormatFromJson(
  Object? v1PathFormat, [
  enums.V1PathFormat? defaultValue,
]) {
  return enums.V1PathFormat.values
          .firstWhereOrNull((e) => e.value == v1PathFormat) ??
      defaultValue ??
      enums.V1PathFormat.swaggerGeneratedUnknown;
}

enums.V1PathFormat? v1PathFormatNullableFromJson(
  Object? v1PathFormat, [
  enums.V1PathFormat? defaultValue,
]) {
  if (v1PathFormat == null) {
    return null;
  }
  return enums.V1PathFormat.values
          .firstWhereOrNull((e) => e.value == v1PathFormat) ??
      defaultValue;
}

String v1PathFormatExplodedListToJson(List<enums.V1PathFormat>? v1PathFormat) {
  return v1PathFormat?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1PathFormatListToJson(List<enums.V1PathFormat>? v1PathFormat) {
  if (v1PathFormat == null) {
    return [];
  }

  return v1PathFormat.map((e) => e.value!).toList();
}

List<enums.V1PathFormat> v1PathFormatListFromJson(
  List? v1PathFormat, [
  List<enums.V1PathFormat>? defaultValue,
]) {
  if (v1PathFormat == null) {
    return defaultValue ?? [];
  }

  return v1PathFormat.map((e) => v1PathFormatFromJson(e.toString())).toList();
}

List<enums.V1PathFormat>? v1PathFormatNullableListFromJson(
  List? v1PathFormat, [
  List<enums.V1PathFormat>? defaultValue,
]) {
  if (v1PathFormat == null) {
    return defaultValue;
  }

  return v1PathFormat.map((e) => v1PathFormatFromJson(e.toString())).toList();
}

String? v1PayloadEncodingNullableToJson(
    enums.V1PayloadEncoding? v1PayloadEncoding) {
  return v1PayloadEncoding?.value;
}

String? v1PayloadEncodingToJson(enums.V1PayloadEncoding v1PayloadEncoding) {
  return v1PayloadEncoding.value;
}

enums.V1PayloadEncoding v1PayloadEncodingFromJson(
  Object? v1PayloadEncoding, [
  enums.V1PayloadEncoding? defaultValue,
]) {
  return enums.V1PayloadEncoding.values
          .firstWhereOrNull((e) => e.value == v1PayloadEncoding) ??
      defaultValue ??
      enums.V1PayloadEncoding.swaggerGeneratedUnknown;
}

enums.V1PayloadEncoding? v1PayloadEncodingNullableFromJson(
  Object? v1PayloadEncoding, [
  enums.V1PayloadEncoding? defaultValue,
]) {
  if (v1PayloadEncoding == null) {
    return null;
  }
  return enums.V1PayloadEncoding.values
          .firstWhereOrNull((e) => e.value == v1PayloadEncoding) ??
      defaultValue;
}

String v1PayloadEncodingExplodedListToJson(
    List<enums.V1PayloadEncoding>? v1PayloadEncoding) {
  return v1PayloadEncoding?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1PayloadEncodingListToJson(
    List<enums.V1PayloadEncoding>? v1PayloadEncoding) {
  if (v1PayloadEncoding == null) {
    return [];
  }

  return v1PayloadEncoding.map((e) => e.value!).toList();
}

List<enums.V1PayloadEncoding> v1PayloadEncodingListFromJson(
  List? v1PayloadEncoding, [
  List<enums.V1PayloadEncoding>? defaultValue,
]) {
  if (v1PayloadEncoding == null) {
    return defaultValue ?? [];
  }

  return v1PayloadEncoding
      .map((e) => v1PayloadEncodingFromJson(e.toString()))
      .toList();
}

List<enums.V1PayloadEncoding>? v1PayloadEncodingNullableListFromJson(
  List? v1PayloadEncoding, [
  List<enums.V1PayloadEncoding>? defaultValue,
]) {
  if (v1PayloadEncoding == null) {
    return defaultValue;
  }

  return v1PayloadEncoding
      .map((e) => v1PayloadEncodingFromJson(e.toString()))
      .toList();
}

String? v1PublicKeyCredentialWithAttestationTypeNullableToJson(
    enums.V1PublicKeyCredentialWithAttestationType?
        v1PublicKeyCredentialWithAttestationType) {
  return v1PublicKeyCredentialWithAttestationType?.value;
}

String? v1PublicKeyCredentialWithAttestationTypeToJson(
    enums.V1PublicKeyCredentialWithAttestationType
        v1PublicKeyCredentialWithAttestationType) {
  return v1PublicKeyCredentialWithAttestationType.value;
}

enums.V1PublicKeyCredentialWithAttestationType
    v1PublicKeyCredentialWithAttestationTypeFromJson(
  Object? v1PublicKeyCredentialWithAttestationType, [
  enums.V1PublicKeyCredentialWithAttestationType? defaultValue,
]) {
  return enums.V1PublicKeyCredentialWithAttestationType.values.firstWhereOrNull(
          (e) => e.value == v1PublicKeyCredentialWithAttestationType) ??
      defaultValue ??
      enums.V1PublicKeyCredentialWithAttestationType.swaggerGeneratedUnknown;
}

enums.V1PublicKeyCredentialWithAttestationType?
    v1PublicKeyCredentialWithAttestationTypeNullableFromJson(
  Object? v1PublicKeyCredentialWithAttestationType, [
  enums.V1PublicKeyCredentialWithAttestationType? defaultValue,
]) {
  if (v1PublicKeyCredentialWithAttestationType == null) {
    return null;
  }
  return enums.V1PublicKeyCredentialWithAttestationType.values.firstWhereOrNull(
          (e) => e.value == v1PublicKeyCredentialWithAttestationType) ??
      defaultValue;
}

String v1PublicKeyCredentialWithAttestationTypeExplodedListToJson(
    List<enums.V1PublicKeyCredentialWithAttestationType>?
        v1PublicKeyCredentialWithAttestationType) {
  return v1PublicKeyCredentialWithAttestationType
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> v1PublicKeyCredentialWithAttestationTypeListToJson(
    List<enums.V1PublicKeyCredentialWithAttestationType>?
        v1PublicKeyCredentialWithAttestationType) {
  if (v1PublicKeyCredentialWithAttestationType == null) {
    return [];
  }

  return v1PublicKeyCredentialWithAttestationType.map((e) => e.value!).toList();
}

List<enums.V1PublicKeyCredentialWithAttestationType>
    v1PublicKeyCredentialWithAttestationTypeListFromJson(
  List? v1PublicKeyCredentialWithAttestationType, [
  List<enums.V1PublicKeyCredentialWithAttestationType>? defaultValue,
]) {
  if (v1PublicKeyCredentialWithAttestationType == null) {
    return defaultValue ?? [];
  }

  return v1PublicKeyCredentialWithAttestationType
      .map(
          (e) => v1PublicKeyCredentialWithAttestationTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1PublicKeyCredentialWithAttestationType>?
    v1PublicKeyCredentialWithAttestationTypeNullableListFromJson(
  List? v1PublicKeyCredentialWithAttestationType, [
  List<enums.V1PublicKeyCredentialWithAttestationType>? defaultValue,
]) {
  if (v1PublicKeyCredentialWithAttestationType == null) {
    return defaultValue;
  }

  return v1PublicKeyCredentialWithAttestationType
      .map(
          (e) => v1PublicKeyCredentialWithAttestationTypeFromJson(e.toString()))
      .toList();
}

String?
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentNullableToJson(
        enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?
            v1PublicKeyCredentialWithAttestationAuthenticatorAttachment) {
  return v1PublicKeyCredentialWithAttestationAuthenticatorAttachment?.value;
}

String? v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentToJson(
    enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment
        v1PublicKeyCredentialWithAttestationAuthenticatorAttachment) {
  return v1PublicKeyCredentialWithAttestationAuthenticatorAttachment.value;
}

enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentFromJson(
  Object? v1PublicKeyCredentialWithAttestationAuthenticatorAttachment, [
  enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?
      defaultValue,
]) {
  return enums
          .V1PublicKeyCredentialWithAttestationAuthenticatorAttachment.values
          .firstWhereOrNull((e) =>
              e.value ==
              v1PublicKeyCredentialWithAttestationAuthenticatorAttachment) ??
      defaultValue ??
      enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment
          .swaggerGeneratedUnknown;
}

enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentNullableFromJson(
  Object? v1PublicKeyCredentialWithAttestationAuthenticatorAttachment, [
  enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment?
      defaultValue,
]) {
  if (v1PublicKeyCredentialWithAttestationAuthenticatorAttachment == null) {
    return null;
  }
  return enums
          .V1PublicKeyCredentialWithAttestationAuthenticatorAttachment.values
          .firstWhereOrNull((e) =>
              e.value ==
              v1PublicKeyCredentialWithAttestationAuthenticatorAttachment) ??
      defaultValue;
}

String
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentExplodedListToJson(
        List<enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment>?
            v1PublicKeyCredentialWithAttestationAuthenticatorAttachment) {
  return v1PublicKeyCredentialWithAttestationAuthenticatorAttachment
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String>
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentListToJson(
        List<enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment>?
            v1PublicKeyCredentialWithAttestationAuthenticatorAttachment) {
  if (v1PublicKeyCredentialWithAttestationAuthenticatorAttachment == null) {
    return [];
  }

  return v1PublicKeyCredentialWithAttestationAuthenticatorAttachment
      .map((e) => e.value!)
      .toList();
}

List<enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment>
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentListFromJson(
  List? v1PublicKeyCredentialWithAttestationAuthenticatorAttachment, [
  List<enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment>?
      defaultValue,
]) {
  if (v1PublicKeyCredentialWithAttestationAuthenticatorAttachment == null) {
    return defaultValue ?? [];
  }

  return v1PublicKeyCredentialWithAttestationAuthenticatorAttachment
      .map((e) =>
          v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentFromJson(
              e.toString()))
      .toList();
}

List<enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment>?
    v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentNullableListFromJson(
  List? v1PublicKeyCredentialWithAttestationAuthenticatorAttachment, [
  List<enums.V1PublicKeyCredentialWithAttestationAuthenticatorAttachment>?
      defaultValue,
]) {
  if (v1PublicKeyCredentialWithAttestationAuthenticatorAttachment == null) {
    return defaultValue;
  }

  return v1PublicKeyCredentialWithAttestationAuthenticatorAttachment
      .map((e) =>
          v1PublicKeyCredentialWithAttestationAuthenticatorAttachmentFromJson(
              e.toString()))
      .toList();
}

String? v1RecoverUserRequestTypeNullableToJson(
    enums.V1RecoverUserRequestType? v1RecoverUserRequestType) {
  return v1RecoverUserRequestType?.value;
}

String? v1RecoverUserRequestTypeToJson(
    enums.V1RecoverUserRequestType v1RecoverUserRequestType) {
  return v1RecoverUserRequestType.value;
}

enums.V1RecoverUserRequestType v1RecoverUserRequestTypeFromJson(
  Object? v1RecoverUserRequestType, [
  enums.V1RecoverUserRequestType? defaultValue,
]) {
  return enums.V1RecoverUserRequestType.values
          .firstWhereOrNull((e) => e.value == v1RecoverUserRequestType) ??
      defaultValue ??
      enums.V1RecoverUserRequestType.swaggerGeneratedUnknown;
}

enums.V1RecoverUserRequestType? v1RecoverUserRequestTypeNullableFromJson(
  Object? v1RecoverUserRequestType, [
  enums.V1RecoverUserRequestType? defaultValue,
]) {
  if (v1RecoverUserRequestType == null) {
    return null;
  }
  return enums.V1RecoverUserRequestType.values
          .firstWhereOrNull((e) => e.value == v1RecoverUserRequestType) ??
      defaultValue;
}

String v1RecoverUserRequestTypeExplodedListToJson(
    List<enums.V1RecoverUserRequestType>? v1RecoverUserRequestType) {
  return v1RecoverUserRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1RecoverUserRequestTypeListToJson(
    List<enums.V1RecoverUserRequestType>? v1RecoverUserRequestType) {
  if (v1RecoverUserRequestType == null) {
    return [];
  }

  return v1RecoverUserRequestType.map((e) => e.value!).toList();
}

List<enums.V1RecoverUserRequestType> v1RecoverUserRequestTypeListFromJson(
  List? v1RecoverUserRequestType, [
  List<enums.V1RecoverUserRequestType>? defaultValue,
]) {
  if (v1RecoverUserRequestType == null) {
    return defaultValue ?? [];
  }

  return v1RecoverUserRequestType
      .map((e) => v1RecoverUserRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1RecoverUserRequestType>?
    v1RecoverUserRequestTypeNullableListFromJson(
  List? v1RecoverUserRequestType, [
  List<enums.V1RecoverUserRequestType>? defaultValue,
]) {
  if (v1RecoverUserRequestType == null) {
    return defaultValue;
  }

  return v1RecoverUserRequestType
      .map((e) => v1RecoverUserRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1RejectActivityRequestTypeNullableToJson(
    enums.V1RejectActivityRequestType? v1RejectActivityRequestType) {
  return v1RejectActivityRequestType?.value;
}

String? v1RejectActivityRequestTypeToJson(
    enums.V1RejectActivityRequestType v1RejectActivityRequestType) {
  return v1RejectActivityRequestType.value;
}

enums.V1RejectActivityRequestType v1RejectActivityRequestTypeFromJson(
  Object? v1RejectActivityRequestType, [
  enums.V1RejectActivityRequestType? defaultValue,
]) {
  return enums.V1RejectActivityRequestType.values
          .firstWhereOrNull((e) => e.value == v1RejectActivityRequestType) ??
      defaultValue ??
      enums.V1RejectActivityRequestType.swaggerGeneratedUnknown;
}

enums.V1RejectActivityRequestType? v1RejectActivityRequestTypeNullableFromJson(
  Object? v1RejectActivityRequestType, [
  enums.V1RejectActivityRequestType? defaultValue,
]) {
  if (v1RejectActivityRequestType == null) {
    return null;
  }
  return enums.V1RejectActivityRequestType.values
          .firstWhereOrNull((e) => e.value == v1RejectActivityRequestType) ??
      defaultValue;
}

String v1RejectActivityRequestTypeExplodedListToJson(
    List<enums.V1RejectActivityRequestType>? v1RejectActivityRequestType) {
  return v1RejectActivityRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1RejectActivityRequestTypeListToJson(
    List<enums.V1RejectActivityRequestType>? v1RejectActivityRequestType) {
  if (v1RejectActivityRequestType == null) {
    return [];
  }

  return v1RejectActivityRequestType.map((e) => e.value!).toList();
}

List<enums.V1RejectActivityRequestType> v1RejectActivityRequestTypeListFromJson(
  List? v1RejectActivityRequestType, [
  List<enums.V1RejectActivityRequestType>? defaultValue,
]) {
  if (v1RejectActivityRequestType == null) {
    return defaultValue ?? [];
  }

  return v1RejectActivityRequestType
      .map((e) => v1RejectActivityRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1RejectActivityRequestType>?
    v1RejectActivityRequestTypeNullableListFromJson(
  List? v1RejectActivityRequestType, [
  List<enums.V1RejectActivityRequestType>? defaultValue,
]) {
  if (v1RejectActivityRequestType == null) {
    return defaultValue;
  }

  return v1RejectActivityRequestType
      .map((e) => v1RejectActivityRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1RemoveOrganizationFeatureRequestTypeNullableToJson(
    enums.V1RemoveOrganizationFeatureRequestType?
        v1RemoveOrganizationFeatureRequestType) {
  return v1RemoveOrganizationFeatureRequestType?.value;
}

String? v1RemoveOrganizationFeatureRequestTypeToJson(
    enums.V1RemoveOrganizationFeatureRequestType
        v1RemoveOrganizationFeatureRequestType) {
  return v1RemoveOrganizationFeatureRequestType.value;
}

enums.V1RemoveOrganizationFeatureRequestType
    v1RemoveOrganizationFeatureRequestTypeFromJson(
  Object? v1RemoveOrganizationFeatureRequestType, [
  enums.V1RemoveOrganizationFeatureRequestType? defaultValue,
]) {
  return enums.V1RemoveOrganizationFeatureRequestType.values.firstWhereOrNull(
          (e) => e.value == v1RemoveOrganizationFeatureRequestType) ??
      defaultValue ??
      enums.V1RemoveOrganizationFeatureRequestType.swaggerGeneratedUnknown;
}

enums.V1RemoveOrganizationFeatureRequestType?
    v1RemoveOrganizationFeatureRequestTypeNullableFromJson(
  Object? v1RemoveOrganizationFeatureRequestType, [
  enums.V1RemoveOrganizationFeatureRequestType? defaultValue,
]) {
  if (v1RemoveOrganizationFeatureRequestType == null) {
    return null;
  }
  return enums.V1RemoveOrganizationFeatureRequestType.values.firstWhereOrNull(
          (e) => e.value == v1RemoveOrganizationFeatureRequestType) ??
      defaultValue;
}

String v1RemoveOrganizationFeatureRequestTypeExplodedListToJson(
    List<enums.V1RemoveOrganizationFeatureRequestType>?
        v1RemoveOrganizationFeatureRequestType) {
  return v1RemoveOrganizationFeatureRequestType
          ?.map((e) => e.value!)
          .join(',') ??
      '';
}

List<String> v1RemoveOrganizationFeatureRequestTypeListToJson(
    List<enums.V1RemoveOrganizationFeatureRequestType>?
        v1RemoveOrganizationFeatureRequestType) {
  if (v1RemoveOrganizationFeatureRequestType == null) {
    return [];
  }

  return v1RemoveOrganizationFeatureRequestType.map((e) => e.value!).toList();
}

List<enums.V1RemoveOrganizationFeatureRequestType>
    v1RemoveOrganizationFeatureRequestTypeListFromJson(
  List? v1RemoveOrganizationFeatureRequestType, [
  List<enums.V1RemoveOrganizationFeatureRequestType>? defaultValue,
]) {
  if (v1RemoveOrganizationFeatureRequestType == null) {
    return defaultValue ?? [];
  }

  return v1RemoveOrganizationFeatureRequestType
      .map((e) => v1RemoveOrganizationFeatureRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1RemoveOrganizationFeatureRequestType>?
    v1RemoveOrganizationFeatureRequestTypeNullableListFromJson(
  List? v1RemoveOrganizationFeatureRequestType, [
  List<enums.V1RemoveOrganizationFeatureRequestType>? defaultValue,
]) {
  if (v1RemoveOrganizationFeatureRequestType == null) {
    return defaultValue;
  }

  return v1RemoveOrganizationFeatureRequestType
      .map((e) => v1RemoveOrganizationFeatureRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1SetOrganizationFeatureRequestTypeNullableToJson(
    enums.V1SetOrganizationFeatureRequestType?
        v1SetOrganizationFeatureRequestType) {
  return v1SetOrganizationFeatureRequestType?.value;
}

String? v1SetOrganizationFeatureRequestTypeToJson(
    enums.V1SetOrganizationFeatureRequestType
        v1SetOrganizationFeatureRequestType) {
  return v1SetOrganizationFeatureRequestType.value;
}

enums.V1SetOrganizationFeatureRequestType
    v1SetOrganizationFeatureRequestTypeFromJson(
  Object? v1SetOrganizationFeatureRequestType, [
  enums.V1SetOrganizationFeatureRequestType? defaultValue,
]) {
  return enums.V1SetOrganizationFeatureRequestType.values.firstWhereOrNull(
          (e) => e.value == v1SetOrganizationFeatureRequestType) ??
      defaultValue ??
      enums.V1SetOrganizationFeatureRequestType.swaggerGeneratedUnknown;
}

enums.V1SetOrganizationFeatureRequestType?
    v1SetOrganizationFeatureRequestTypeNullableFromJson(
  Object? v1SetOrganizationFeatureRequestType, [
  enums.V1SetOrganizationFeatureRequestType? defaultValue,
]) {
  if (v1SetOrganizationFeatureRequestType == null) {
    return null;
  }
  return enums.V1SetOrganizationFeatureRequestType.values.firstWhereOrNull(
          (e) => e.value == v1SetOrganizationFeatureRequestType) ??
      defaultValue;
}

String v1SetOrganizationFeatureRequestTypeExplodedListToJson(
    List<enums.V1SetOrganizationFeatureRequestType>?
        v1SetOrganizationFeatureRequestType) {
  return v1SetOrganizationFeatureRequestType?.map((e) => e.value!).join(',') ??
      '';
}

List<String> v1SetOrganizationFeatureRequestTypeListToJson(
    List<enums.V1SetOrganizationFeatureRequestType>?
        v1SetOrganizationFeatureRequestType) {
  if (v1SetOrganizationFeatureRequestType == null) {
    return [];
  }

  return v1SetOrganizationFeatureRequestType.map((e) => e.value!).toList();
}

List<enums.V1SetOrganizationFeatureRequestType>
    v1SetOrganizationFeatureRequestTypeListFromJson(
  List? v1SetOrganizationFeatureRequestType, [
  List<enums.V1SetOrganizationFeatureRequestType>? defaultValue,
]) {
  if (v1SetOrganizationFeatureRequestType == null) {
    return defaultValue ?? [];
  }

  return v1SetOrganizationFeatureRequestType
      .map((e) => v1SetOrganizationFeatureRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1SetOrganizationFeatureRequestType>?
    v1SetOrganizationFeatureRequestTypeNullableListFromJson(
  List? v1SetOrganizationFeatureRequestType, [
  List<enums.V1SetOrganizationFeatureRequestType>? defaultValue,
]) {
  if (v1SetOrganizationFeatureRequestType == null) {
    return defaultValue;
  }

  return v1SetOrganizationFeatureRequestType
      .map((e) => v1SetOrganizationFeatureRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1SignRawPayloadRequestTypeNullableToJson(
    enums.V1SignRawPayloadRequestType? v1SignRawPayloadRequestType) {
  return v1SignRawPayloadRequestType?.value;
}

String? v1SignRawPayloadRequestTypeToJson(
    enums.V1SignRawPayloadRequestType v1SignRawPayloadRequestType) {
  return v1SignRawPayloadRequestType.value;
}

enums.V1SignRawPayloadRequestType v1SignRawPayloadRequestTypeFromJson(
  Object? v1SignRawPayloadRequestType, [
  enums.V1SignRawPayloadRequestType? defaultValue,
]) {
  return enums.V1SignRawPayloadRequestType.values
          .firstWhereOrNull((e) => e.value == v1SignRawPayloadRequestType) ??
      defaultValue ??
      enums.V1SignRawPayloadRequestType.swaggerGeneratedUnknown;
}

enums.V1SignRawPayloadRequestType? v1SignRawPayloadRequestTypeNullableFromJson(
  Object? v1SignRawPayloadRequestType, [
  enums.V1SignRawPayloadRequestType? defaultValue,
]) {
  if (v1SignRawPayloadRequestType == null) {
    return null;
  }
  return enums.V1SignRawPayloadRequestType.values
          .firstWhereOrNull((e) => e.value == v1SignRawPayloadRequestType) ??
      defaultValue;
}

String v1SignRawPayloadRequestTypeExplodedListToJson(
    List<enums.V1SignRawPayloadRequestType>? v1SignRawPayloadRequestType) {
  return v1SignRawPayloadRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1SignRawPayloadRequestTypeListToJson(
    List<enums.V1SignRawPayloadRequestType>? v1SignRawPayloadRequestType) {
  if (v1SignRawPayloadRequestType == null) {
    return [];
  }

  return v1SignRawPayloadRequestType.map((e) => e.value!).toList();
}

List<enums.V1SignRawPayloadRequestType> v1SignRawPayloadRequestTypeListFromJson(
  List? v1SignRawPayloadRequestType, [
  List<enums.V1SignRawPayloadRequestType>? defaultValue,
]) {
  if (v1SignRawPayloadRequestType == null) {
    return defaultValue ?? [];
  }

  return v1SignRawPayloadRequestType
      .map((e) => v1SignRawPayloadRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1SignRawPayloadRequestType>?
    v1SignRawPayloadRequestTypeNullableListFromJson(
  List? v1SignRawPayloadRequestType, [
  List<enums.V1SignRawPayloadRequestType>? defaultValue,
]) {
  if (v1SignRawPayloadRequestType == null) {
    return defaultValue;
  }

  return v1SignRawPayloadRequestType
      .map((e) => v1SignRawPayloadRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1SignRawPayloadsRequestTypeNullableToJson(
    enums.V1SignRawPayloadsRequestType? v1SignRawPayloadsRequestType) {
  return v1SignRawPayloadsRequestType?.value;
}

String? v1SignRawPayloadsRequestTypeToJson(
    enums.V1SignRawPayloadsRequestType v1SignRawPayloadsRequestType) {
  return v1SignRawPayloadsRequestType.value;
}

enums.V1SignRawPayloadsRequestType v1SignRawPayloadsRequestTypeFromJson(
  Object? v1SignRawPayloadsRequestType, [
  enums.V1SignRawPayloadsRequestType? defaultValue,
]) {
  return enums.V1SignRawPayloadsRequestType.values
          .firstWhereOrNull((e) => e.value == v1SignRawPayloadsRequestType) ??
      defaultValue ??
      enums.V1SignRawPayloadsRequestType.swaggerGeneratedUnknown;
}

enums.V1SignRawPayloadsRequestType?
    v1SignRawPayloadsRequestTypeNullableFromJson(
  Object? v1SignRawPayloadsRequestType, [
  enums.V1SignRawPayloadsRequestType? defaultValue,
]) {
  if (v1SignRawPayloadsRequestType == null) {
    return null;
  }
  return enums.V1SignRawPayloadsRequestType.values
          .firstWhereOrNull((e) => e.value == v1SignRawPayloadsRequestType) ??
      defaultValue;
}

String v1SignRawPayloadsRequestTypeExplodedListToJson(
    List<enums.V1SignRawPayloadsRequestType>? v1SignRawPayloadsRequestType) {
  return v1SignRawPayloadsRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1SignRawPayloadsRequestTypeListToJson(
    List<enums.V1SignRawPayloadsRequestType>? v1SignRawPayloadsRequestType) {
  if (v1SignRawPayloadsRequestType == null) {
    return [];
  }

  return v1SignRawPayloadsRequestType.map((e) => e.value!).toList();
}

List<enums.V1SignRawPayloadsRequestType>
    v1SignRawPayloadsRequestTypeListFromJson(
  List? v1SignRawPayloadsRequestType, [
  List<enums.V1SignRawPayloadsRequestType>? defaultValue,
]) {
  if (v1SignRawPayloadsRequestType == null) {
    return defaultValue ?? [];
  }

  return v1SignRawPayloadsRequestType
      .map((e) => v1SignRawPayloadsRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1SignRawPayloadsRequestType>?
    v1SignRawPayloadsRequestTypeNullableListFromJson(
  List? v1SignRawPayloadsRequestType, [
  List<enums.V1SignRawPayloadsRequestType>? defaultValue,
]) {
  if (v1SignRawPayloadsRequestType == null) {
    return defaultValue;
  }

  return v1SignRawPayloadsRequestType
      .map((e) => v1SignRawPayloadsRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1SignTransactionRequestTypeNullableToJson(
    enums.V1SignTransactionRequestType? v1SignTransactionRequestType) {
  return v1SignTransactionRequestType?.value;
}

String? v1SignTransactionRequestTypeToJson(
    enums.V1SignTransactionRequestType v1SignTransactionRequestType) {
  return v1SignTransactionRequestType.value;
}

enums.V1SignTransactionRequestType v1SignTransactionRequestTypeFromJson(
  Object? v1SignTransactionRequestType, [
  enums.V1SignTransactionRequestType? defaultValue,
]) {
  return enums.V1SignTransactionRequestType.values
          .firstWhereOrNull((e) => e.value == v1SignTransactionRequestType) ??
      defaultValue ??
      enums.V1SignTransactionRequestType.swaggerGeneratedUnknown;
}

enums.V1SignTransactionRequestType?
    v1SignTransactionRequestTypeNullableFromJson(
  Object? v1SignTransactionRequestType, [
  enums.V1SignTransactionRequestType? defaultValue,
]) {
  if (v1SignTransactionRequestType == null) {
    return null;
  }
  return enums.V1SignTransactionRequestType.values
          .firstWhereOrNull((e) => e.value == v1SignTransactionRequestType) ??
      defaultValue;
}

String v1SignTransactionRequestTypeExplodedListToJson(
    List<enums.V1SignTransactionRequestType>? v1SignTransactionRequestType) {
  return v1SignTransactionRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1SignTransactionRequestTypeListToJson(
    List<enums.V1SignTransactionRequestType>? v1SignTransactionRequestType) {
  if (v1SignTransactionRequestType == null) {
    return [];
  }

  return v1SignTransactionRequestType.map((e) => e.value!).toList();
}

List<enums.V1SignTransactionRequestType>
    v1SignTransactionRequestTypeListFromJson(
  List? v1SignTransactionRequestType, [
  List<enums.V1SignTransactionRequestType>? defaultValue,
]) {
  if (v1SignTransactionRequestType == null) {
    return defaultValue ?? [];
  }

  return v1SignTransactionRequestType
      .map((e) => v1SignTransactionRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1SignTransactionRequestType>?
    v1SignTransactionRequestTypeNullableListFromJson(
  List? v1SignTransactionRequestType, [
  List<enums.V1SignTransactionRequestType>? defaultValue,
]) {
  if (v1SignTransactionRequestType == null) {
    return defaultValue;
  }

  return v1SignTransactionRequestType
      .map((e) => v1SignTransactionRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1TagTypeNullableToJson(enums.V1TagType? v1TagType) {
  return v1TagType?.value;
}

String? v1TagTypeToJson(enums.V1TagType v1TagType) {
  return v1TagType.value;
}

enums.V1TagType v1TagTypeFromJson(
  Object? v1TagType, [
  enums.V1TagType? defaultValue,
]) {
  return enums.V1TagType.values.firstWhereOrNull((e) => e.value == v1TagType) ??
      defaultValue ??
      enums.V1TagType.swaggerGeneratedUnknown;
}

enums.V1TagType? v1TagTypeNullableFromJson(
  Object? v1TagType, [
  enums.V1TagType? defaultValue,
]) {
  if (v1TagType == null) {
    return null;
  }
  return enums.V1TagType.values.firstWhereOrNull((e) => e.value == v1TagType) ??
      defaultValue;
}

String v1TagTypeExplodedListToJson(List<enums.V1TagType>? v1TagType) {
  return v1TagType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1TagTypeListToJson(List<enums.V1TagType>? v1TagType) {
  if (v1TagType == null) {
    return [];
  }

  return v1TagType.map((e) => e.value!).toList();
}

List<enums.V1TagType> v1TagTypeListFromJson(
  List? v1TagType, [
  List<enums.V1TagType>? defaultValue,
]) {
  if (v1TagType == null) {
    return defaultValue ?? [];
  }

  return v1TagType.map((e) => v1TagTypeFromJson(e.toString())).toList();
}

List<enums.V1TagType>? v1TagTypeNullableListFromJson(
  List? v1TagType, [
  List<enums.V1TagType>? defaultValue,
]) {
  if (v1TagType == null) {
    return defaultValue;
  }

  return v1TagType.map((e) => v1TagTypeFromJson(e.toString())).toList();
}

String? v1TransactionTypeNullableToJson(
    enums.V1TransactionType? v1TransactionType) {
  return v1TransactionType?.value;
}

String? v1TransactionTypeToJson(enums.V1TransactionType v1TransactionType) {
  return v1TransactionType.value;
}

enums.V1TransactionType v1TransactionTypeFromJson(
  Object? v1TransactionType, [
  enums.V1TransactionType? defaultValue,
]) {
  return enums.V1TransactionType.values
          .firstWhereOrNull((e) => e.value == v1TransactionType) ??
      defaultValue ??
      enums.V1TransactionType.swaggerGeneratedUnknown;
}

enums.V1TransactionType? v1TransactionTypeNullableFromJson(
  Object? v1TransactionType, [
  enums.V1TransactionType? defaultValue,
]) {
  if (v1TransactionType == null) {
    return null;
  }
  return enums.V1TransactionType.values
          .firstWhereOrNull((e) => e.value == v1TransactionType) ??
      defaultValue;
}

String v1TransactionTypeExplodedListToJson(
    List<enums.V1TransactionType>? v1TransactionType) {
  return v1TransactionType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1TransactionTypeListToJson(
    List<enums.V1TransactionType>? v1TransactionType) {
  if (v1TransactionType == null) {
    return [];
  }

  return v1TransactionType.map((e) => e.value!).toList();
}

List<enums.V1TransactionType> v1TransactionTypeListFromJson(
  List? v1TransactionType, [
  List<enums.V1TransactionType>? defaultValue,
]) {
  if (v1TransactionType == null) {
    return defaultValue ?? [];
  }

  return v1TransactionType
      .map((e) => v1TransactionTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1TransactionType>? v1TransactionTypeNullableListFromJson(
  List? v1TransactionType, [
  List<enums.V1TransactionType>? defaultValue,
]) {
  if (v1TransactionType == null) {
    return defaultValue;
  }

  return v1TransactionType
      .map((e) => v1TransactionTypeFromJson(e.toString()))
      .toList();
}

String? v1UpdatePolicyRequestTypeNullableToJson(
    enums.V1UpdatePolicyRequestType? v1UpdatePolicyRequestType) {
  return v1UpdatePolicyRequestType?.value;
}

String? v1UpdatePolicyRequestTypeToJson(
    enums.V1UpdatePolicyRequestType v1UpdatePolicyRequestType) {
  return v1UpdatePolicyRequestType.value;
}

enums.V1UpdatePolicyRequestType v1UpdatePolicyRequestTypeFromJson(
  Object? v1UpdatePolicyRequestType, [
  enums.V1UpdatePolicyRequestType? defaultValue,
]) {
  return enums.V1UpdatePolicyRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdatePolicyRequestType) ??
      defaultValue ??
      enums.V1UpdatePolicyRequestType.swaggerGeneratedUnknown;
}

enums.V1UpdatePolicyRequestType? v1UpdatePolicyRequestTypeNullableFromJson(
  Object? v1UpdatePolicyRequestType, [
  enums.V1UpdatePolicyRequestType? defaultValue,
]) {
  if (v1UpdatePolicyRequestType == null) {
    return null;
  }
  return enums.V1UpdatePolicyRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdatePolicyRequestType) ??
      defaultValue;
}

String v1UpdatePolicyRequestTypeExplodedListToJson(
    List<enums.V1UpdatePolicyRequestType>? v1UpdatePolicyRequestType) {
  return v1UpdatePolicyRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1UpdatePolicyRequestTypeListToJson(
    List<enums.V1UpdatePolicyRequestType>? v1UpdatePolicyRequestType) {
  if (v1UpdatePolicyRequestType == null) {
    return [];
  }

  return v1UpdatePolicyRequestType.map((e) => e.value!).toList();
}

List<enums.V1UpdatePolicyRequestType> v1UpdatePolicyRequestTypeListFromJson(
  List? v1UpdatePolicyRequestType, [
  List<enums.V1UpdatePolicyRequestType>? defaultValue,
]) {
  if (v1UpdatePolicyRequestType == null) {
    return defaultValue ?? [];
  }

  return v1UpdatePolicyRequestType
      .map((e) => v1UpdatePolicyRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1UpdatePolicyRequestType>?
    v1UpdatePolicyRequestTypeNullableListFromJson(
  List? v1UpdatePolicyRequestType, [
  List<enums.V1UpdatePolicyRequestType>? defaultValue,
]) {
  if (v1UpdatePolicyRequestType == null) {
    return defaultValue;
  }

  return v1UpdatePolicyRequestType
      .map((e) => v1UpdatePolicyRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1UpdatePrivateKeyTagRequestTypeNullableToJson(
    enums.V1UpdatePrivateKeyTagRequestType? v1UpdatePrivateKeyTagRequestType) {
  return v1UpdatePrivateKeyTagRequestType?.value;
}

String? v1UpdatePrivateKeyTagRequestTypeToJson(
    enums.V1UpdatePrivateKeyTagRequestType v1UpdatePrivateKeyTagRequestType) {
  return v1UpdatePrivateKeyTagRequestType.value;
}

enums.V1UpdatePrivateKeyTagRequestType v1UpdatePrivateKeyTagRequestTypeFromJson(
  Object? v1UpdatePrivateKeyTagRequestType, [
  enums.V1UpdatePrivateKeyTagRequestType? defaultValue,
]) {
  return enums.V1UpdatePrivateKeyTagRequestType.values.firstWhereOrNull(
          (e) => e.value == v1UpdatePrivateKeyTagRequestType) ??
      defaultValue ??
      enums.V1UpdatePrivateKeyTagRequestType.swaggerGeneratedUnknown;
}

enums.V1UpdatePrivateKeyTagRequestType?
    v1UpdatePrivateKeyTagRequestTypeNullableFromJson(
  Object? v1UpdatePrivateKeyTagRequestType, [
  enums.V1UpdatePrivateKeyTagRequestType? defaultValue,
]) {
  if (v1UpdatePrivateKeyTagRequestType == null) {
    return null;
  }
  return enums.V1UpdatePrivateKeyTagRequestType.values.firstWhereOrNull(
          (e) => e.value == v1UpdatePrivateKeyTagRequestType) ??
      defaultValue;
}

String v1UpdatePrivateKeyTagRequestTypeExplodedListToJson(
    List<enums.V1UpdatePrivateKeyTagRequestType>?
        v1UpdatePrivateKeyTagRequestType) {
  return v1UpdatePrivateKeyTagRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1UpdatePrivateKeyTagRequestTypeListToJson(
    List<enums.V1UpdatePrivateKeyTagRequestType>?
        v1UpdatePrivateKeyTagRequestType) {
  if (v1UpdatePrivateKeyTagRequestType == null) {
    return [];
  }

  return v1UpdatePrivateKeyTagRequestType.map((e) => e.value!).toList();
}

List<enums.V1UpdatePrivateKeyTagRequestType>
    v1UpdatePrivateKeyTagRequestTypeListFromJson(
  List? v1UpdatePrivateKeyTagRequestType, [
  List<enums.V1UpdatePrivateKeyTagRequestType>? defaultValue,
]) {
  if (v1UpdatePrivateKeyTagRequestType == null) {
    return defaultValue ?? [];
  }

  return v1UpdatePrivateKeyTagRequestType
      .map((e) => v1UpdatePrivateKeyTagRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1UpdatePrivateKeyTagRequestType>?
    v1UpdatePrivateKeyTagRequestTypeNullableListFromJson(
  List? v1UpdatePrivateKeyTagRequestType, [
  List<enums.V1UpdatePrivateKeyTagRequestType>? defaultValue,
]) {
  if (v1UpdatePrivateKeyTagRequestType == null) {
    return defaultValue;
  }

  return v1UpdatePrivateKeyTagRequestType
      .map((e) => v1UpdatePrivateKeyTagRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1UpdateRootQuorumRequestTypeNullableToJson(
    enums.V1UpdateRootQuorumRequestType? v1UpdateRootQuorumRequestType) {
  return v1UpdateRootQuorumRequestType?.value;
}

String? v1UpdateRootQuorumRequestTypeToJson(
    enums.V1UpdateRootQuorumRequestType v1UpdateRootQuorumRequestType) {
  return v1UpdateRootQuorumRequestType.value;
}

enums.V1UpdateRootQuorumRequestType v1UpdateRootQuorumRequestTypeFromJson(
  Object? v1UpdateRootQuorumRequestType, [
  enums.V1UpdateRootQuorumRequestType? defaultValue,
]) {
  return enums.V1UpdateRootQuorumRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdateRootQuorumRequestType) ??
      defaultValue ??
      enums.V1UpdateRootQuorumRequestType.swaggerGeneratedUnknown;
}

enums.V1UpdateRootQuorumRequestType?
    v1UpdateRootQuorumRequestTypeNullableFromJson(
  Object? v1UpdateRootQuorumRequestType, [
  enums.V1UpdateRootQuorumRequestType? defaultValue,
]) {
  if (v1UpdateRootQuorumRequestType == null) {
    return null;
  }
  return enums.V1UpdateRootQuorumRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdateRootQuorumRequestType) ??
      defaultValue;
}

String v1UpdateRootQuorumRequestTypeExplodedListToJson(
    List<enums.V1UpdateRootQuorumRequestType>? v1UpdateRootQuorumRequestType) {
  return v1UpdateRootQuorumRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1UpdateRootQuorumRequestTypeListToJson(
    List<enums.V1UpdateRootQuorumRequestType>? v1UpdateRootQuorumRequestType) {
  if (v1UpdateRootQuorumRequestType == null) {
    return [];
  }

  return v1UpdateRootQuorumRequestType.map((e) => e.value!).toList();
}

List<enums.V1UpdateRootQuorumRequestType>
    v1UpdateRootQuorumRequestTypeListFromJson(
  List? v1UpdateRootQuorumRequestType, [
  List<enums.V1UpdateRootQuorumRequestType>? defaultValue,
]) {
  if (v1UpdateRootQuorumRequestType == null) {
    return defaultValue ?? [];
  }

  return v1UpdateRootQuorumRequestType
      .map((e) => v1UpdateRootQuorumRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1UpdateRootQuorumRequestType>?
    v1UpdateRootQuorumRequestTypeNullableListFromJson(
  List? v1UpdateRootQuorumRequestType, [
  List<enums.V1UpdateRootQuorumRequestType>? defaultValue,
]) {
  if (v1UpdateRootQuorumRequestType == null) {
    return defaultValue;
  }

  return v1UpdateRootQuorumRequestType
      .map((e) => v1UpdateRootQuorumRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1UpdateUserRequestTypeNullableToJson(
    enums.V1UpdateUserRequestType? v1UpdateUserRequestType) {
  return v1UpdateUserRequestType?.value;
}

String? v1UpdateUserRequestTypeToJson(
    enums.V1UpdateUserRequestType v1UpdateUserRequestType) {
  return v1UpdateUserRequestType.value;
}

enums.V1UpdateUserRequestType v1UpdateUserRequestTypeFromJson(
  Object? v1UpdateUserRequestType, [
  enums.V1UpdateUserRequestType? defaultValue,
]) {
  return enums.V1UpdateUserRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdateUserRequestType) ??
      defaultValue ??
      enums.V1UpdateUserRequestType.swaggerGeneratedUnknown;
}

enums.V1UpdateUserRequestType? v1UpdateUserRequestTypeNullableFromJson(
  Object? v1UpdateUserRequestType, [
  enums.V1UpdateUserRequestType? defaultValue,
]) {
  if (v1UpdateUserRequestType == null) {
    return null;
  }
  return enums.V1UpdateUserRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdateUserRequestType) ??
      defaultValue;
}

String v1UpdateUserRequestTypeExplodedListToJson(
    List<enums.V1UpdateUserRequestType>? v1UpdateUserRequestType) {
  return v1UpdateUserRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1UpdateUserRequestTypeListToJson(
    List<enums.V1UpdateUserRequestType>? v1UpdateUserRequestType) {
  if (v1UpdateUserRequestType == null) {
    return [];
  }

  return v1UpdateUserRequestType.map((e) => e.value!).toList();
}

List<enums.V1UpdateUserRequestType> v1UpdateUserRequestTypeListFromJson(
  List? v1UpdateUserRequestType, [
  List<enums.V1UpdateUserRequestType>? defaultValue,
]) {
  if (v1UpdateUserRequestType == null) {
    return defaultValue ?? [];
  }

  return v1UpdateUserRequestType
      .map((e) => v1UpdateUserRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1UpdateUserRequestType>?
    v1UpdateUserRequestTypeNullableListFromJson(
  List? v1UpdateUserRequestType, [
  List<enums.V1UpdateUserRequestType>? defaultValue,
]) {
  if (v1UpdateUserRequestType == null) {
    return defaultValue;
  }

  return v1UpdateUserRequestType
      .map((e) => v1UpdateUserRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1UpdateUserTagRequestTypeNullableToJson(
    enums.V1UpdateUserTagRequestType? v1UpdateUserTagRequestType) {
  return v1UpdateUserTagRequestType?.value;
}

String? v1UpdateUserTagRequestTypeToJson(
    enums.V1UpdateUserTagRequestType v1UpdateUserTagRequestType) {
  return v1UpdateUserTagRequestType.value;
}

enums.V1UpdateUserTagRequestType v1UpdateUserTagRequestTypeFromJson(
  Object? v1UpdateUserTagRequestType, [
  enums.V1UpdateUserTagRequestType? defaultValue,
]) {
  return enums.V1UpdateUserTagRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdateUserTagRequestType) ??
      defaultValue ??
      enums.V1UpdateUserTagRequestType.swaggerGeneratedUnknown;
}

enums.V1UpdateUserTagRequestType? v1UpdateUserTagRequestTypeNullableFromJson(
  Object? v1UpdateUserTagRequestType, [
  enums.V1UpdateUserTagRequestType? defaultValue,
]) {
  if (v1UpdateUserTagRequestType == null) {
    return null;
  }
  return enums.V1UpdateUserTagRequestType.values
          .firstWhereOrNull((e) => e.value == v1UpdateUserTagRequestType) ??
      defaultValue;
}

String v1UpdateUserTagRequestTypeExplodedListToJson(
    List<enums.V1UpdateUserTagRequestType>? v1UpdateUserTagRequestType) {
  return v1UpdateUserTagRequestType?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1UpdateUserTagRequestTypeListToJson(
    List<enums.V1UpdateUserTagRequestType>? v1UpdateUserTagRequestType) {
  if (v1UpdateUserTagRequestType == null) {
    return [];
  }

  return v1UpdateUserTagRequestType.map((e) => e.value!).toList();
}

List<enums.V1UpdateUserTagRequestType> v1UpdateUserTagRequestTypeListFromJson(
  List? v1UpdateUserTagRequestType, [
  List<enums.V1UpdateUserTagRequestType>? defaultValue,
]) {
  if (v1UpdateUserTagRequestType == null) {
    return defaultValue ?? [];
  }

  return v1UpdateUserTagRequestType
      .map((e) => v1UpdateUserTagRequestTypeFromJson(e.toString()))
      .toList();
}

List<enums.V1UpdateUserTagRequestType>?
    v1UpdateUserTagRequestTypeNullableListFromJson(
  List? v1UpdateUserTagRequestType, [
  List<enums.V1UpdateUserTagRequestType>? defaultValue,
]) {
  if (v1UpdateUserTagRequestType == null) {
    return defaultValue;
  }

  return v1UpdateUserTagRequestType
      .map((e) => v1UpdateUserTagRequestTypeFromJson(e.toString()))
      .toList();
}

String? v1VoteSelectionNullableToJson(enums.V1VoteSelection? v1VoteSelection) {
  return v1VoteSelection?.value;
}

String? v1VoteSelectionToJson(enums.V1VoteSelection v1VoteSelection) {
  return v1VoteSelection.value;
}

enums.V1VoteSelection v1VoteSelectionFromJson(
  Object? v1VoteSelection, [
  enums.V1VoteSelection? defaultValue,
]) {
  return enums.V1VoteSelection.values
          .firstWhereOrNull((e) => e.value == v1VoteSelection) ??
      defaultValue ??
      enums.V1VoteSelection.swaggerGeneratedUnknown;
}

enums.V1VoteSelection? v1VoteSelectionNullableFromJson(
  Object? v1VoteSelection, [
  enums.V1VoteSelection? defaultValue,
]) {
  if (v1VoteSelection == null) {
    return null;
  }
  return enums.V1VoteSelection.values
          .firstWhereOrNull((e) => e.value == v1VoteSelection) ??
      defaultValue;
}

String v1VoteSelectionExplodedListToJson(
    List<enums.V1VoteSelection>? v1VoteSelection) {
  return v1VoteSelection?.map((e) => e.value!).join(',') ?? '';
}

List<String> v1VoteSelectionListToJson(
    List<enums.V1VoteSelection>? v1VoteSelection) {
  if (v1VoteSelection == null) {
    return [];
  }

  return v1VoteSelection.map((e) => e.value!).toList();
}

List<enums.V1VoteSelection> v1VoteSelectionListFromJson(
  List? v1VoteSelection, [
  List<enums.V1VoteSelection>? defaultValue,
]) {
  if (v1VoteSelection == null) {
    return defaultValue ?? [];
  }

  return v1VoteSelection
      .map((e) => v1VoteSelectionFromJson(e.toString()))
      .toList();
}

List<enums.V1VoteSelection>? v1VoteSelectionNullableListFromJson(
  List? v1VoteSelection, [
  List<enums.V1VoteSelection>? defaultValue,
]) {
  if (v1VoteSelection == null) {
    return defaultValue;
  }

  return v1VoteSelection
      .map((e) => v1VoteSelectionFromJson(e.toString()))
      .toList();
}

typedef $JsonFactory<T> = T Function(Map<String, dynamic> json);

class $CustomJsonDecoder {
  $CustomJsonDecoder(this.factories);

  final Map<Type, $JsonFactory> factories;

  dynamic decode<T>(dynamic entity) {
    if (entity is Iterable) {
      return _decodeList<T>(entity);
    }

    if (entity is T) {
      return entity;
    }

    if (isTypeOf<T, Map>()) {
      return entity;
    }

    if (isTypeOf<T, Iterable>()) {
      return entity;
    }

    if (entity is Map<String, dynamic>) {
      return _decodeMap<T>(entity);
    }

    return entity;
  }

  T _decodeMap<T>(Map<String, dynamic> values) {
    final jsonFactory = factories[T];
    if (jsonFactory == null || jsonFactory is! $JsonFactory<T>) {
      return throw "Could not find factory for type $T. Is '$T: $T.fromJsonFactory' included in the CustomJsonDecoder instance creation in bootstrapper.dart?";
    }

    return jsonFactory(values);
  }

  List<T> _decodeList<T>(Iterable values) =>
      values.where((v) => v != null).map<T>((v) => decode<T>(v) as T).toList();
}

class $JsonSerializableConverter extends chopper.JsonConverter {
  @override
  FutureOr<chopper.Response<ResultType>> convertResponse<ResultType, Item>(
      chopper.Response response) async {
    if (response.bodyString.isEmpty) {
      // In rare cases, when let's say 204 (no content) is returned -
      // we cannot decode the missing json with the result type specified
      return chopper.Response(response.base, null, error: response.error);
    }

    if (ResultType == String) {
      return response.copyWith();
    }

    if (ResultType == DateTime) {
      return response.copyWith(
          body: DateTime.parse((response.body as String).replaceAll('"', ''))
              as ResultType);
    }

    final jsonRes = await super.convertResponse(response);
    return jsonRes.copyWith<ResultType>(
        body: $jsonDecoder.decode<Item>(jsonRes.body) as ResultType);
  }
}

final $jsonDecoder = $CustomJsonDecoder(generatedMapping);

// ignore: unused_element
String? _dateToJson(DateTime? date) {
  if (date == null) {
    return null;
  }

  final year = date.year.toString();
  final month = date.month < 10 ? '0${date.month}' : date.month.toString();
  final day = date.day < 10 ? '0${date.day}' : date.day.toString();

  return '$year-$month-$day';
}

class Wrapped<T> {
  final T value;
  const Wrapped.value(this.value);
}
