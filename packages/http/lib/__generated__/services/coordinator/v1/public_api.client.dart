/* @generated by `turnkey_codegen`. DO NOT EDIT BY HAND */

import "public_api.types.dart";
import "../../../../base.dart";
import "../../../../version.dart";
import "dart:convert";
import "dart:async";
import "dart:io";

/// HTTP Client for interacting with Turnkey API
class TurnkeyClient {
  final THttpConfig config;
  final TStamper stamper;

  TurnkeyClient({required this.config, required this.stamper}) {
    if (config.baseUrl.isEmpty) {
      throw Exception('Missing base URL. Please verify environment variables.');
    }
  }

  Future<TResponseType> request<TBodyType, TResponseType>(
    String url,
    TBodyType body,
    TResponseType Function(Map<String, dynamic>) fromJson,
  ) async {
    final fullUrl = '${config.baseUrl}$url';
    final stringifiedBody = jsonEncode(body);
    final stamp = await stamper.stamp(stringifiedBody);

    final client = HttpClient();
    try {
      final request = await client.postUrl(Uri.parse(fullUrl));
      request.headers.set(stamp.stampHeaderName, stamp.stampHeaderValue);
      request.headers.set('X-Client-Version', VERSION);
      request.headers.contentType = ContentType.json;
      request.write(stringifiedBody);

      final response = await request.close();

      if (response.statusCode != 200) {
        final errorBody = await response.transform(utf8.decoder).join();
        throw TurnkeyRequestError(
          GrpcStatus.fromJson(jsonDecode(errorBody)),
        );
      }

      final responseBody = await response.transform(utf8.decoder).join();
      final decodedJson = jsonDecode(responseBody) as Map<String, dynamic>;

      return fromJson(decodedJson);
    } finally {
      client.close();
    }
  }

  /// Get details about an activity.
  ///
  /// Sign the provided `TGetActivityBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_activity).
  ///
  /// See also: `stampGetActivity`.

  Future<TGetActivityResponse> getActivity({
    required TGetActivityBody input,
  }) async {
    return await request<TGetActivityBody, TGetActivityResponse>(
        "/public/v1/query/get_activity",
        input,
        (json) => TGetActivityResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
  ///
  /// See also: `GetActivity`.

  Future<TSignedRequest> stampGetActivity({
    required TGetActivityBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_activity';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about an API key.
  ///
  /// Sign the provided `TGetApiKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_api_key).
  ///
  /// See also: `stampGetApiKey`.

  Future<TGetApiKeyResponse> getApiKey({
    required TGetApiKeyBody input,
  }) async {
    return await request<TGetApiKeyBody, TGetApiKeyResponse>(
        "/public/v1/query/get_api_key",
        input,
        (json) => TGetApiKeyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `GetApiKey`.

  Future<TSignedRequest> stampGetApiKey({
    required TGetApiKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_api_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about API keys for a user.
  ///
  /// Sign the provided `TGetApiKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_api_keys).
  ///
  /// See also: `stampGetApiKeys`.

  Future<TGetApiKeysResponse> getApiKeys({
    required TGetApiKeysBody input,
  }) async {
    return await request<TGetApiKeysBody, TGetApiKeysResponse>(
        "/public/v1/query/get_api_keys",
        input,
        (json) => TGetApiKeysResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `GetApiKeys`.

  Future<TSignedRequest> stampGetApiKeys({
    required TGetApiKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_api_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about an authenticator.
  ///
  /// Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_authenticator).
  ///
  /// See also: `stampGetAuthenticator`.

  Future<TGetAuthenticatorResponse> getAuthenticator({
    required TGetAuthenticatorBody input,
  }) async {
    return await request<TGetAuthenticatorBody, TGetAuthenticatorResponse>(
        "/public/v1/query/get_authenticator",
        input,
        (json) => TGetAuthenticatorResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
  ///
  /// See also: `GetAuthenticator`.

  Future<TSignedRequest> stampGetAuthenticator({
    required TGetAuthenticatorBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_authenticator';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about authenticators for a user.
  ///
  /// Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_authenticators).
  ///
  /// See also: `stampGetAuthenticators`.

  Future<TGetAuthenticatorsResponse> getAuthenticators({
    required TGetAuthenticatorsBody input,
  }) async {
    return await request<TGetAuthenticatorsBody, TGetAuthenticatorsResponse>(
        "/public/v1/query/get_authenticators",
        input,
        (json) => TGetAuthenticatorsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetAuthenticators`.

  Future<TSignedRequest> stampGetAuthenticators({
    required TGetAuthenticatorsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_authenticators';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about Oauth providers for a user.
  ///
  /// Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_oauth_providers).
  ///
  /// See also: `stampGetOauthProviders`.

  Future<TGetOauthProvidersResponse> getOauthProviders({
    required TGetOauthProvidersBody input,
  }) async {
    return await request<TGetOauthProvidersBody, TGetOauthProvidersResponse>(
        "/public/v1/query/get_oauth_providers",
        input,
        (json) => TGetOauthProvidersResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
  ///
  /// See also: `GetOauthProviders`.

  Future<TSignedRequest> stampGetOauthProviders({
    required TGetOauthProvidersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_oauth_providers';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get quorum settings and features for an organization.
  ///
  /// Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_organization_configs).
  ///
  /// See also: `stampGetOrganizationConfigs`.

  Future<TGetOrganizationConfigsResponse> getOrganizationConfigs({
    required TGetOrganizationConfigsBody input,
  }) async {
    return await request<TGetOrganizationConfigsBody,
            TGetOrganizationConfigsResponse>(
        "/public/v1/query/get_organization_configs",
        input,
        (json) => TGetOrganizationConfigsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetOrganizationConfigs`.

  Future<TSignedRequest> stampGetOrganizationConfigs({
    required TGetOrganizationConfigsBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/query/get_organization_configs';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a policy.
  ///
  /// Sign the provided `TGetPolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_policy).
  ///
  /// See also: `stampGetPolicy`.

  Future<TGetPolicyResponse> getPolicy({
    required TGetPolicyBody input,
  }) async {
    return await request<TGetPolicyBody, TGetPolicyResponse>(
        "/public/v1/query/get_policy",
        input,
        (json) => TGetPolicyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPolicy`.

  Future<TSignedRequest> stampGetPolicy({
    required TGetPolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get the policy evaluations for an activity.
  ///
  /// Sign the provided `TGetPolicyEvaluationsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_policy_evaluations).
  ///
  /// See also: `stampGetPolicyEvaluations`.

  Future<TGetPolicyEvaluationsResponse> getPolicyEvaluations({
    required TGetPolicyEvaluationsBody input,
  }) async {
    return await request<TGetPolicyEvaluationsBody,
            TGetPolicyEvaluationsResponse>(
        "/public/v1/query/get_policy_evaluations",
        input,
        (json) => TGetPolicyEvaluationsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetPolicyEvaluationsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPolicyEvaluations`.

  Future<TSignedRequest> stampGetPolicyEvaluations({
    required TGetPolicyEvaluationsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_policy_evaluations';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a private key.
  ///
  /// Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_private_key).
  ///
  /// See also: `stampGetPrivateKey`.

  Future<TGetPrivateKeyResponse> getPrivateKey({
    required TGetPrivateKeyBody input,
  }) async {
    return await request<TGetPrivateKeyBody, TGetPrivateKeyResponse>(
        "/public/v1/query/get_private_key",
        input,
        (json) => TGetPrivateKeyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPrivateKey`.

  Future<TSignedRequest> stampGetPrivateKey({
    required TGetPrivateKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a smart contract interface.
  ///
  /// Sign the provided `TGetSmartContractInterfaceBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_smart_contract_interface).
  ///
  /// See also: `stampGetSmartContractInterface`.

  Future<TGetSmartContractInterfaceResponse> getSmartContractInterface({
    required TGetSmartContractInterfaceBody input,
  }) async {
    return await request<TGetSmartContractInterfaceBody,
            TGetSmartContractInterfaceResponse>(
        "/public/v1/query/get_smart_contract_interface",
        input,
        (json) => TGetSmartContractInterfaceResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetSmartContractInterfaceBody` by using the client's `stamp` function.
  ///
  /// See also: `GetSmartContractInterface`.

  Future<TSignedRequest> stampGetSmartContractInterface({
    required TGetSmartContractInterfaceBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/query/get_smart_contract_interface';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a user.
  ///
  /// Sign the provided `TGetUserBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_user).
  ///
  /// See also: `stampGetUser`.

  Future<TGetUserResponse> getUser({
    required TGetUserBody input,
  }) async {
    return await request<TGetUserBody, TGetUserResponse>(
        "/public/v1/query/get_user",
        input,
        (json) => TGetUserResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
  ///
  /// See also: `GetUser`.

  Future<TSignedRequest> stampGetUser({
    required TGetUserBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_user';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get details about a wallet.
  ///
  /// Sign the provided `TGetWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_wallet).
  ///
  /// See also: `stampGetWallet`.

  Future<TGetWalletResponse> getWallet({
    required TGetWalletBody input,
  }) async {
    return await request<TGetWalletBody, TGetWalletResponse>(
        "/public/v1/query/get_wallet",
        input,
        (json) => TGetWalletResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWallet`.

  Future<TSignedRequest> stampGetWallet({
    required TGetWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get a single wallet account.
  ///
  /// Sign the provided `TGetWalletAccountBody` with the client's `stamp` function and submit the request (POST /public/v1/query/get_wallet_account).
  ///
  /// See also: `stampGetWalletAccount`.

  Future<TGetWalletAccountResponse> getWalletAccount({
    required TGetWalletAccountBody input,
  }) async {
    return await request<TGetWalletAccountBody, TGetWalletAccountResponse>(
        "/public/v1/query/get_wallet_account",
        input,
        (json) => TGetWalletAccountResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetWalletAccountBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWalletAccount`.

  Future<TSignedRequest> stampGetWalletAccount({
    required TGetWalletAccountBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/get_wallet_account';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all activities within an organization.
  ///
  /// Sign the provided `TGetActivitiesBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_activities).
  ///
  /// See also: `stampGetActivities`.

  Future<TGetActivitiesResponse> getActivities({
    required TGetActivitiesBody input,
  }) async {
    return await request<TGetActivitiesBody, TGetActivitiesResponse>(
        "/public/v1/query/list_activities",
        input,
        (json) => TGetActivitiesResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
  ///
  /// See also: `GetActivities`.

  Future<TSignedRequest> stampGetActivities({
    required TGetActivitiesBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_activities';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all policies within an organization.
  ///
  /// Sign the provided `TGetPoliciesBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_policies).
  ///
  /// See also: `stampGetPolicies`.

  Future<TGetPoliciesResponse> getPolicies({
    required TGetPoliciesBody input,
  }) async {
    return await request<TGetPoliciesBody, TGetPoliciesResponse>(
        "/public/v1/query/list_policies",
        input,
        (json) => TGetPoliciesResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPolicies`.

  Future<TSignedRequest> stampGetPolicies({
    required TGetPoliciesBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_policies';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all private key tags within an organization.
  ///
  /// Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_private_key_tags).
  ///
  /// See also: `stampListPrivateKeyTags`.

  Future<TListPrivateKeyTagsResponse> listPrivateKeyTags({
    required TListPrivateKeyTagsBody input,
  }) async {
    return await request<TListPrivateKeyTagsBody, TListPrivateKeyTagsResponse>(
        "/public/v1/query/list_private_key_tags",
        input,
        (json) => TListPrivateKeyTagsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `ListPrivateKeyTags`.

  Future<TSignedRequest> stampListPrivateKeyTags({
    required TListPrivateKeyTagsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_private_key_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all private keys within an organization.
  ///
  /// Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_private_keys).
  ///
  /// See also: `stampGetPrivateKeys`.

  Future<TGetPrivateKeysResponse> getPrivateKeys({
    required TGetPrivateKeysBody input,
  }) async {
    return await request<TGetPrivateKeysBody, TGetPrivateKeysResponse>(
        "/public/v1/query/list_private_keys",
        input,
        (json) => TGetPrivateKeysResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `GetPrivateKeys`.

  Future<TSignedRequest> stampGetPrivateKeys({
    required TGetPrivateKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_private_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all smart contract interfaces within an organization.
  ///
  /// Sign the provided `TGetSmartContractInterfacesBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_smart_contract_interfaces).
  ///
  /// See also: `stampGetSmartContractInterfaces`.

  Future<TGetSmartContractInterfacesResponse> getSmartContractInterfaces({
    required TGetSmartContractInterfacesBody input,
  }) async {
    return await request<TGetSmartContractInterfacesBody,
            TGetSmartContractInterfacesResponse>(
        "/public/v1/query/list_smart_contract_interfaces",
        input,
        (json) => TGetSmartContractInterfacesResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetSmartContractInterfacesBody` by using the client's `stamp` function.
  ///
  /// See also: `GetSmartContractInterfaces`.

  Future<TSignedRequest> stampGetSmartContractInterfaces({
    required TGetSmartContractInterfacesBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/query/list_smart_contract_interfaces';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get all suborg IDs associated given a parent org ID and an optional filter.
  ///
  /// Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_suborgs).
  ///
  /// See also: `stampGetSubOrgIds`.

  Future<TGetSubOrgIdsResponse> getSubOrgIds({
    required TGetSubOrgIdsBody input,
  }) async {
    return await request<TGetSubOrgIdsBody, TGetSubOrgIdsResponse>(
        "/public/v1/query/list_suborgs",
        input,
        (json) => TGetSubOrgIdsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetSubOrgIds`.

  Future<TSignedRequest> stampGetSubOrgIds({
    required TGetSubOrgIdsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_suborgs';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all user tags within an organization.
  ///
  /// Sign the provided `TListUserTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_user_tags).
  ///
  /// See also: `stampListUserTags`.

  Future<TListUserTagsResponse> listUserTags({
    required TListUserTagsBody input,
  }) async {
    return await request<TListUserTagsBody, TListUserTagsResponse>(
        "/public/v1/query/list_user_tags",
        input,
        (json) => TListUserTagsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `ListUserTags`.

  Future<TSignedRequest> stampListUserTags({
    required TListUserTagsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_user_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all users within an organization.
  ///
  /// Sign the provided `TGetUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_users).
  ///
  /// See also: `stampGetUsers`.

  Future<TGetUsersResponse> getUsers({
    required TGetUsersBody input,
  }) async {
    return await request<TGetUsersBody, TGetUsersResponse>(
        "/public/v1/query/list_users",
        input,
        (json) => TGetUsersResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `GetUsers`.

  Future<TSignedRequest> stampGetUsers({
    required TGetUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get all email or phone verified suborg IDs associated given a parent org ID.
  ///
  /// Sign the provided `TGetVerifiedSubOrgIdsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_verified_suborgs).
  ///
  /// See also: `stampGetVerifiedSubOrgIds`.

  Future<TGetVerifiedSubOrgIdsResponse> getVerifiedSubOrgIds({
    required TGetVerifiedSubOrgIdsBody input,
  }) async {
    return await request<TGetVerifiedSubOrgIdsBody,
            TGetVerifiedSubOrgIdsResponse>(
        "/public/v1/query/list_verified_suborgs",
        input,
        (json) => TGetVerifiedSubOrgIdsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetVerifiedSubOrgIdsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetVerifiedSubOrgIds`.

  Future<TSignedRequest> stampGetVerifiedSubOrgIds({
    required TGetVerifiedSubOrgIdsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_verified_suborgs';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all accounts within a wallet.
  ///
  /// Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_wallet_accounts).
  ///
  /// See also: `stampGetWalletAccounts`.

  Future<TGetWalletAccountsResponse> getWalletAccounts({
    required TGetWalletAccountsBody input,
  }) async {
    return await request<TGetWalletAccountsBody, TGetWalletAccountsResponse>(
        "/public/v1/query/list_wallet_accounts",
        input,
        (json) => TGetWalletAccountsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWalletAccounts`.

  Future<TSignedRequest> stampGetWalletAccounts({
    required TGetWalletAccountsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_wallet_accounts';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// List all wallets within an organization.
  ///
  /// Sign the provided `TGetWalletsBody` with the client's `stamp` function and submit the request (POST /public/v1/query/list_wallets).
  ///
  /// See also: `stampGetWallets`.

  Future<TGetWalletsResponse> getWallets({
    required TGetWalletsBody input,
  }) async {
    return await request<TGetWalletsBody, TGetWalletsResponse>(
        "/public/v1/query/list_wallets",
        input,
        (json) => TGetWalletsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWallets`.

  Future<TSignedRequest> stampGetWallets({
    required TGetWalletsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/list_wallets';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Get basic information about your current API or WebAuthN user and their organization. Affords sub-organization look ups via parent organization for WebAuthN or API key users.
  ///
  /// Sign the provided `TGetWhoamiBody` with the client's `stamp` function and submit the request (POST /public/v1/query/whoami).
  ///
  /// See also: `stampGetWhoami`.

  Future<TGetWhoamiResponse> getWhoami({
    required TGetWhoamiBody input,
  }) async {
    return await request<TGetWhoamiBody, TGetWhoamiResponse>(
        "/public/v1/query/whoami",
        input,
        (json) => TGetWhoamiResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
  ///
  /// See also: `GetWhoami`.

  Future<TSignedRequest> stampGetWhoami({
    required TGetWhoamiBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/query/whoami';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Approve an activity.
  ///
  /// Sign the provided `TApproveActivityBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/approve_activity).
  ///
  /// See also: `stampApproveActivity`.

  Future<TApproveActivityResponse> approveActivity({
    required TApproveActivityBody input,
  }) async {
    return await request<TApproveActivityBody, TApproveActivityResponse>(
        "/public/v1/submit/approve_activity",
        input,
        (json) => TApproveActivityResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
  ///
  /// See also: `ApproveActivity`.

  Future<TSignedRequest> stampApproveActivity({
    required TApproveActivityBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/approve_activity';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Add API keys to an existing user.
  ///
  /// Sign the provided `TCreateApiKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_api_keys).
  ///
  /// See also: `stampCreateApiKeys`.

  Future<TCreateApiKeysResponse> createApiKeys({
    required TCreateApiKeysBody input,
  }) async {
    return await request<TCreateApiKeysBody, TCreateApiKeysResponse>(
        "/public/v1/submit/create_api_keys",
        input,
        (json) => TCreateApiKeysResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateApiKeys`.

  Future<TSignedRequest> stampCreateApiKeys({
    required TCreateApiKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_api_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create authenticators to authenticate requests to Turnkey.
  ///
  /// Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_authenticators).
  ///
  /// See also: `stampCreateAuthenticators`.

  Future<TCreateAuthenticatorsResponse> createAuthenticators({
    required TCreateAuthenticatorsBody input,
  }) async {
    return await request<TCreateAuthenticatorsBody,
            TCreateAuthenticatorsResponse>(
        "/public/v1/submit/create_authenticators",
        input,
        (json) => TCreateAuthenticatorsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateAuthenticators`.

  Future<TSignedRequest> stampCreateAuthenticators({
    required TCreateAuthenticatorsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_authenticators';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create invitations to join an existing organization.
  ///
  /// Sign the provided `TCreateInvitationsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_invitations).
  ///
  /// See also: `stampCreateInvitations`.

  Future<TCreateInvitationsResponse> createInvitations({
    required TCreateInvitationsBody input,
  }) async {
    return await request<TCreateInvitationsBody, TCreateInvitationsResponse>(
        "/public/v1/submit/create_invitations",
        input,
        (json) => TCreateInvitationsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateInvitations`.

  Future<TSignedRequest> stampCreateInvitations({
    required TCreateInvitationsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_invitations';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create Oauth providers for a specified user.
  ///
  /// Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_oauth_providers).
  ///
  /// See also: `stampCreateOauthProviders`.

  Future<TCreateOauthProvidersResponse> createOauthProviders({
    required TCreateOauthProvidersBody input,
  }) async {
    return await request<TCreateOauthProvidersBody,
            TCreateOauthProvidersResponse>(
        "/public/v1/submit/create_oauth_providers",
        input,
        (json) => TCreateOauthProvidersResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateOauthProviders`.

  Future<TSignedRequest> stampCreateOauthProviders({
    required TCreateOauthProvidersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_oauth_providers';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create new policies.
  ///
  /// Sign the provided `TCreatePoliciesBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_policies).
  ///
  /// See also: `stampCreatePolicies`.

  Future<TCreatePoliciesResponse> createPolicies({
    required TCreatePoliciesBody input,
  }) async {
    return await request<TCreatePoliciesBody, TCreatePoliciesResponse>(
        "/public/v1/submit/create_policies",
        input,
        (json) => TCreatePoliciesResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePolicies`.

  Future<TSignedRequest> stampCreatePolicies({
    required TCreatePoliciesBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_policies';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a new policy.
  ///
  /// Sign the provided `TCreatePolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_policy).
  ///
  /// See also: `stampCreatePolicy`.

  Future<TCreatePolicyResponse> createPolicy({
    required TCreatePolicyBody input,
  }) async {
    return await request<TCreatePolicyBody, TCreatePolicyResponse>(
        "/public/v1/submit/create_policy",
        input,
        (json) => TCreatePolicyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePolicy`.

  Future<TSignedRequest> stampCreatePolicy({
    required TCreatePolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a private key tag and add it to private keys.
  ///
  /// Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_private_key_tag).
  ///
  /// See also: `stampCreatePrivateKeyTag`.

  Future<TCreatePrivateKeyTagResponse> createPrivateKeyTag({
    required TCreatePrivateKeyTagBody input,
  }) async {
    return await request<TCreatePrivateKeyTagBody,
            TCreatePrivateKeyTagResponse>(
        "/public/v1/submit/create_private_key_tag",
        input,
        (json) => TCreatePrivateKeyTagResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePrivateKeyTag`.

  Future<TSignedRequest> stampCreatePrivateKeyTag({
    required TCreatePrivateKeyTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_private_key_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create new private keys.
  ///
  /// Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_private_keys).
  ///
  /// See also: `stampCreatePrivateKeys`.

  Future<TCreatePrivateKeysResponse> createPrivateKeys({
    required TCreatePrivateKeysBody input,
  }) async {
    return await request<TCreatePrivateKeysBody, TCreatePrivateKeysResponse>(
        "/public/v1/submit/create_private_keys",
        input,
        (json) => TCreatePrivateKeysResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `CreatePrivateKeys`.

  Future<TSignedRequest> stampCreatePrivateKeys({
    required TCreatePrivateKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_private_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a read only session for a user (valid for 1 hour).
  ///
  /// Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_read_only_session).
  ///
  /// See also: `stampCreateReadOnlySession`.

  Future<TCreateReadOnlySessionResponse> createReadOnlySession({
    required TCreateReadOnlySessionBody input,
  }) async {
    return await request<TCreateReadOnlySessionBody,
            TCreateReadOnlySessionResponse>(
        "/public/v1/submit/create_read_only_session",
        input,
        (json) => TCreateReadOnlySessionResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateReadOnlySession`.

  Future<TSignedRequest> stampCreateReadOnlySession({
    required TCreateReadOnlySessionBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_read_only_session';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a read write session for a user.
  ///
  /// Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_read_write_session).
  ///
  /// See also: `stampCreateReadWriteSession`.

  Future<TCreateReadWriteSessionResponse> createReadWriteSession({
    required TCreateReadWriteSessionBody input,
  }) async {
    return await request<TCreateReadWriteSessionBody,
            TCreateReadWriteSessionResponse>(
        "/public/v1/submit/create_read_write_session",
        input,
        (json) => TCreateReadWriteSessionResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateReadWriteSession`.

  Future<TSignedRequest> stampCreateReadWriteSession({
    required TCreateReadWriteSessionBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_read_write_session';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create an ABI/IDL in JSON.
  ///
  /// Sign the provided `TCreateSmartContractInterfaceBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_smart_contract_interface).
  ///
  /// See also: `stampCreateSmartContractInterface`.

  Future<TCreateSmartContractInterfaceResponse> createSmartContractInterface({
    required TCreateSmartContractInterfaceBody input,
  }) async {
    return await request<TCreateSmartContractInterfaceBody,
            TCreateSmartContractInterfaceResponse>(
        "/public/v1/submit/create_smart_contract_interface",
        input,
        (json) => TCreateSmartContractInterfaceResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateSmartContractInterfaceBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateSmartContractInterface`.

  Future<TSignedRequest> stampCreateSmartContractInterface({
    required TCreateSmartContractInterfaceBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_smart_contract_interface';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a new sub-organization.
  ///
  /// Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_sub_organization).
  ///
  /// See also: `stampCreateSubOrganization`.

  Future<TCreateSubOrganizationResponse> createSubOrganization({
    required TCreateSubOrganizationBody input,
  }) async {
    return await request<TCreateSubOrganizationBody,
            TCreateSubOrganizationResponse>(
        "/public/v1/submit/create_sub_organization",
        input,
        (json) => TCreateSubOrganizationResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateSubOrganization`.

  Future<TSignedRequest> stampCreateSubOrganization({
    required TCreateSubOrganizationBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/create_sub_organization';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a user tag and add it to users.
  ///
  /// Sign the provided `TCreateUserTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_user_tag).
  ///
  /// See also: `stampCreateUserTag`.

  Future<TCreateUserTagResponse> createUserTag({
    required TCreateUserTagBody input,
  }) async {
    return await request<TCreateUserTagBody, TCreateUserTagResponse>(
        "/public/v1/submit/create_user_tag",
        input,
        (json) => TCreateUserTagResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateUserTag`.

  Future<TSignedRequest> stampCreateUserTag({
    required TCreateUserTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_user_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create users in an existing organization.
  ///
  /// Sign the provided `TCreateUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_users).
  ///
  /// See also: `stampCreateUsers`.

  Future<TCreateUsersResponse> createUsers({
    required TCreateUsersBody input,
  }) async {
    return await request<TCreateUsersBody, TCreateUsersResponse>(
        "/public/v1/submit/create_users",
        input,
        (json) => TCreateUsersResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateUsers`.

  Future<TSignedRequest> stampCreateUsers({
    required TCreateUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a wallet and derive addresses.
  ///
  /// Sign the provided `TCreateWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_wallet).
  ///
  /// See also: `stampCreateWallet`.

  Future<TCreateWalletResponse> createWallet({
    required TCreateWalletBody input,
  }) async {
    return await request<TCreateWalletBody, TCreateWalletResponse>(
        "/public/v1/submit/create_wallet",
        input,
        (json) => TCreateWalletResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateWallet`.

  Future<TSignedRequest> stampCreateWallet({
    required TCreateWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Derive additional addresses using an existing wallet.
  ///
  /// Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/create_wallet_accounts).
  ///
  /// See also: `stampCreateWalletAccounts`.

  Future<TCreateWalletAccountsResponse> createWalletAccounts({
    required TCreateWalletAccountsBody input,
  }) async {
    return await request<TCreateWalletAccountsBody,
            TCreateWalletAccountsResponse>(
        "/public/v1/submit/create_wallet_accounts",
        input,
        (json) => TCreateWalletAccountsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
  ///
  /// See also: `CreateWalletAccounts`.

  Future<TSignedRequest> stampCreateWalletAccounts({
    required TCreateWalletAccountsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/create_wallet_accounts';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Remove api keys from a user.
  ///
  /// Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_api_keys).
  ///
  /// See also: `stampDeleteApiKeys`.

  Future<TDeleteApiKeysResponse> deleteApiKeys({
    required TDeleteApiKeysBody input,
  }) async {
    return await request<TDeleteApiKeysBody, TDeleteApiKeysResponse>(
        "/public/v1/submit/delete_api_keys",
        input,
        (json) => TDeleteApiKeysResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteApiKeys`.

  Future<TSignedRequest> stampDeleteApiKeys({
    required TDeleteApiKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_api_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Remove authenticators from a user.
  ///
  /// Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_authenticators).
  ///
  /// See also: `stampDeleteAuthenticators`.

  Future<TDeleteAuthenticatorsResponse> deleteAuthenticators({
    required TDeleteAuthenticatorsBody input,
  }) async {
    return await request<TDeleteAuthenticatorsBody,
            TDeleteAuthenticatorsResponse>(
        "/public/v1/submit/delete_authenticators",
        input,
        (json) => TDeleteAuthenticatorsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteAuthenticators`.

  Future<TSignedRequest> stampDeleteAuthenticators({
    required TDeleteAuthenticatorsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_authenticators';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete an existing invitation.
  ///
  /// Sign the provided `TDeleteInvitationBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_invitation).
  ///
  /// See also: `stampDeleteInvitation`.

  Future<TDeleteInvitationResponse> deleteInvitation({
    required TDeleteInvitationBody input,
  }) async {
    return await request<TDeleteInvitationBody, TDeleteInvitationResponse>(
        "/public/v1/submit/delete_invitation",
        input,
        (json) => TDeleteInvitationResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteInvitation`.

  Future<TSignedRequest> stampDeleteInvitation({
    required TDeleteInvitationBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_invitation';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Remove Oauth providers for a specified user.
  ///
  /// Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_oauth_providers).
  ///
  /// See also: `stampDeleteOauthProviders`.

  Future<TDeleteOauthProvidersResponse> deleteOauthProviders({
    required TDeleteOauthProvidersBody input,
  }) async {
    return await request<TDeleteOauthProvidersBody,
            TDeleteOauthProvidersResponse>(
        "/public/v1/submit/delete_oauth_providers",
        input,
        (json) => TDeleteOauthProvidersResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteOauthProviders`.

  Future<TSignedRequest> stampDeleteOauthProviders({
    required TDeleteOauthProvidersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_oauth_providers';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete an existing policy.
  ///
  /// Sign the provided `TDeletePolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_policy).
  ///
  /// See also: `stampDeletePolicy`.

  Future<TDeletePolicyResponse> deletePolicy({
    required TDeletePolicyBody input,
  }) async {
    return await request<TDeletePolicyBody, TDeletePolicyResponse>(
        "/public/v1/submit/delete_policy",
        input,
        (json) => TDeletePolicyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `DeletePolicy`.

  Future<TSignedRequest> stampDeletePolicy({
    required TDeletePolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete private key tags within an organization.
  ///
  /// Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_private_key_tags).
  ///
  /// See also: `stampDeletePrivateKeyTags`.

  Future<TDeletePrivateKeyTagsResponse> deletePrivateKeyTags({
    required TDeletePrivateKeyTagsBody input,
  }) async {
    return await request<TDeletePrivateKeyTagsBody,
            TDeletePrivateKeyTagsResponse>(
        "/public/v1/submit/delete_private_key_tags",
        input,
        (json) => TDeletePrivateKeyTagsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeletePrivateKeyTags`.

  Future<TSignedRequest> stampDeletePrivateKeyTags({
    required TDeletePrivateKeyTagsBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/delete_private_key_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete private keys for an organization.
  ///
  /// Sign the provided `TDeletePrivateKeysBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_private_keys).
  ///
  /// See also: `stampDeletePrivateKeys`.

  Future<TDeletePrivateKeysResponse> deletePrivateKeys({
    required TDeletePrivateKeysBody input,
  }) async {
    return await request<TDeletePrivateKeysBody, TDeletePrivateKeysResponse>(
        "/public/v1/submit/delete_private_keys",
        input,
        (json) => TDeletePrivateKeysResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeletePrivateKeysBody` by using the client's `stamp` function.
  ///
  /// See also: `DeletePrivateKeys`.

  Future<TSignedRequest> stampDeletePrivateKeys({
    required TDeletePrivateKeysBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_private_keys';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete a smart contract interface.
  ///
  /// Sign the provided `TDeleteSmartContractInterfaceBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_smart_contract_interface).
  ///
  /// See also: `stampDeleteSmartContractInterface`.

  Future<TDeleteSmartContractInterfaceResponse> deleteSmartContractInterface({
    required TDeleteSmartContractInterfaceBody input,
  }) async {
    return await request<TDeleteSmartContractInterfaceBody,
            TDeleteSmartContractInterfaceResponse>(
        "/public/v1/submit/delete_smart_contract_interface",
        input,
        (json) => TDeleteSmartContractInterfaceResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteSmartContractInterfaceBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteSmartContractInterface`.

  Future<TSignedRequest> stampDeleteSmartContractInterface({
    required TDeleteSmartContractInterfaceBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/delete_smart_contract_interface';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete a sub-organization.
  ///
  /// Sign the provided `TDeleteSubOrganizationBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_sub_organization).
  ///
  /// See also: `stampDeleteSubOrganization`.

  Future<TDeleteSubOrganizationResponse> deleteSubOrganization({
    required TDeleteSubOrganizationBody input,
  }) async {
    return await request<TDeleteSubOrganizationBody,
            TDeleteSubOrganizationResponse>(
        "/public/v1/submit/delete_sub_organization",
        input,
        (json) => TDeleteSubOrganizationResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteSubOrganizationBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteSubOrganization`.

  Future<TSignedRequest> stampDeleteSubOrganization({
    required TDeleteSubOrganizationBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/delete_sub_organization';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete user tags within an organization.
  ///
  /// Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_user_tags).
  ///
  /// See also: `stampDeleteUserTags`.

  Future<TDeleteUserTagsResponse> deleteUserTags({
    required TDeleteUserTagsBody input,
  }) async {
    return await request<TDeleteUserTagsBody, TDeleteUserTagsResponse>(
        "/public/v1/submit/delete_user_tags",
        input,
        (json) => TDeleteUserTagsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteUserTags`.

  Future<TSignedRequest> stampDeleteUserTags({
    required TDeleteUserTagsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_user_tags';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete users within an organization.
  ///
  /// Sign the provided `TDeleteUsersBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_users).
  ///
  /// See also: `stampDeleteUsers`.

  Future<TDeleteUsersResponse> deleteUsers({
    required TDeleteUsersBody input,
  }) async {
    return await request<TDeleteUsersBody, TDeleteUsersResponse>(
        "/public/v1/submit/delete_users",
        input,
        (json) => TDeleteUsersResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteUsers`.

  Future<TSignedRequest> stampDeleteUsers({
    required TDeleteUsersBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_users';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Delete wallets for an organization.
  ///
  /// Sign the provided `TDeleteWalletsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/delete_wallets).
  ///
  /// See also: `stampDeleteWallets`.

  Future<TDeleteWalletsResponse> deleteWallets({
    required TDeleteWalletsBody input,
  }) async {
    return await request<TDeleteWalletsBody, TDeleteWalletsResponse>(
        "/public/v1/submit/delete_wallets",
        input,
        (json) => TDeleteWalletsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TDeleteWalletsBody` by using the client's `stamp` function.
  ///
  /// See also: `DeleteWallets`.

  Future<TSignedRequest> stampDeleteWallets({
    required TDeleteWalletsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/delete_wallets';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Authenticate a user via email.
  ///
  /// Sign the provided `TEmailAuthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/email_auth).
  ///
  /// See also: `stampEmailAuth`.

  Future<TEmailAuthResponse> emailAuth({
    required TEmailAuthBody input,
  }) async {
    return await request<TEmailAuthBody, TEmailAuthResponse>(
        "/public/v1/submit/email_auth",
        input,
        (json) => TEmailAuthResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
  ///
  /// See also: `EmailAuth`.

  Future<TSignedRequest> stampEmailAuth({
    required TEmailAuthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/email_auth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Export a private key.
  ///
  /// Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/export_private_key).
  ///
  /// See also: `stampExportPrivateKey`.

  Future<TExportPrivateKeyResponse> exportPrivateKey({
    required TExportPrivateKeyBody input,
  }) async {
    return await request<TExportPrivateKeyBody, TExportPrivateKeyResponse>(
        "/public/v1/submit/export_private_key",
        input,
        (json) => TExportPrivateKeyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `ExportPrivateKey`.

  Future<TSignedRequest> stampExportPrivateKey({
    required TExportPrivateKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/export_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Export a wallet.
  ///
  /// Sign the provided `TExportWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/export_wallet).
  ///
  /// See also: `stampExportWallet`.

  Future<TExportWalletResponse> exportWallet({
    required TExportWalletBody input,
  }) async {
    return await request<TExportWalletBody, TExportWalletResponse>(
        "/public/v1/submit/export_wallet",
        input,
        (json) => TExportWalletResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `ExportWallet`.

  Future<TSignedRequest> stampExportWallet({
    required TExportWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/export_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Export a wallet account.
  ///
  /// Sign the provided `TExportWalletAccountBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/export_wallet_account).
  ///
  /// See also: `stampExportWalletAccount`.

  Future<TExportWalletAccountResponse> exportWalletAccount({
    required TExportWalletAccountBody input,
  }) async {
    return await request<TExportWalletAccountBody,
            TExportWalletAccountResponse>(
        "/public/v1/submit/export_wallet_account",
        input,
        (json) => TExportWalletAccountResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
  ///
  /// See also: `ExportWalletAccount`.

  Future<TSignedRequest> stampExportWalletAccount({
    required TExportWalletAccountBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/export_wallet_account';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Import a private key.
  ///
  /// Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/import_private_key).
  ///
  /// See also: `stampImportPrivateKey`.

  Future<TImportPrivateKeyResponse> importPrivateKey({
    required TImportPrivateKeyBody input,
  }) async {
    return await request<TImportPrivateKeyBody, TImportPrivateKeyResponse>(
        "/public/v1/submit/import_private_key",
        input,
        (json) => TImportPrivateKeyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `ImportPrivateKey`.

  Future<TSignedRequest> stampImportPrivateKey({
    required TImportPrivateKeyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/import_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Import a wallet.
  ///
  /// Sign the provided `TImportWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/import_wallet).
  ///
  /// See also: `stampImportWallet`.

  Future<TImportWalletResponse> importWallet({
    required TImportWalletBody input,
  }) async {
    return await request<TImportWalletBody, TImportWalletResponse>(
        "/public/v1/submit/import_wallet",
        input,
        (json) => TImportWalletResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `ImportWallet`.

  Future<TSignedRequest> stampImportWallet({
    required TImportWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/import_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initiate a fiat on ramp flow.
  ///
  /// Sign the provided `TInitFiatOnRampBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_fiat_on_ramp).
  ///
  /// See also: `stampInitFiatOnRamp`.

  Future<TInitFiatOnRampResponse> initFiatOnRamp({
    required TInitFiatOnRampBody input,
  }) async {
    return await request<TInitFiatOnRampBody, TInitFiatOnRampResponse>(
        "/public/v1/submit/init_fiat_on_ramp",
        input,
        (json) => TInitFiatOnRampResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TInitFiatOnRampBody` by using the client's `stamp` function.
  ///
  /// See also: `InitFiatOnRamp`.

  Future<TSignedRequest> stampInitFiatOnRamp({
    required TInitFiatOnRampBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/init_fiat_on_ramp';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initialize a new private key import.
  ///
  /// Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_import_private_key).
  ///
  /// See also: `stampInitImportPrivateKey`.

  Future<TInitImportPrivateKeyResponse> initImportPrivateKey({
    required TInitImportPrivateKeyBody input,
  }) async {
    return await request<TInitImportPrivateKeyBody,
            TInitImportPrivateKeyResponse>(
        "/public/v1/submit/init_import_private_key",
        input,
        (json) => TInitImportPrivateKeyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
  ///
  /// See also: `InitImportPrivateKey`.

  Future<TSignedRequest> stampInitImportPrivateKey({
    required TInitImportPrivateKeyBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/init_import_private_key';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initialize a new wallet import.
  ///
  /// Sign the provided `TInitImportWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_import_wallet).
  ///
  /// See also: `stampInitImportWallet`.

  Future<TInitImportWalletResponse> initImportWallet({
    required TInitImportWalletBody input,
  }) async {
    return await request<TInitImportWalletBody, TInitImportWalletResponse>(
        "/public/v1/submit/init_import_wallet",
        input,
        (json) => TInitImportWalletResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `InitImportWallet`.

  Future<TSignedRequest> stampInitImportWallet({
    required TInitImportWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/init_import_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initiate a generic OTP activity.
  ///
  /// Sign the provided `TInitOtpBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_otp).
  ///
  /// See also: `stampInitOtp`.

  Future<TInitOtpResponse> initOtp({
    required TInitOtpBody input,
  }) async {
    return await request<TInitOtpBody, TInitOtpResponse>(
        "/public/v1/submit/init_otp",
        input,
        (json) => TInitOtpResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TInitOtpBody` by using the client's `stamp` function.
  ///
  /// See also: `InitOtp`.

  Future<TSignedRequest> stampInitOtp({
    required TInitOtpBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/init_otp';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initiate an OTP auth activity.
  ///
  /// Sign the provided `TInitOtpAuthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_otp_auth).
  ///
  /// See also: `stampInitOtpAuth`.

  Future<TInitOtpAuthResponse> initOtpAuth({
    required TInitOtpAuthBody input,
  }) async {
    return await request<TInitOtpAuthBody, TInitOtpAuthResponse>(
        "/public/v1/submit/init_otp_auth",
        input,
        (json) => TInitOtpAuthResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TInitOtpAuthBody` by using the client's `stamp` function.
  ///
  /// See also: `InitOtpAuth`.

  Future<TSignedRequest> stampInitOtpAuth({
    required TInitOtpAuthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/init_otp_auth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Initialize a new email recovery.
  ///
  /// Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/init_user_email_recovery).
  ///
  /// See also: `stampInitUserEmailRecovery`.

  Future<TInitUserEmailRecoveryResponse> initUserEmailRecovery({
    required TInitUserEmailRecoveryBody input,
  }) async {
    return await request<TInitUserEmailRecoveryBody,
            TInitUserEmailRecoveryResponse>(
        "/public/v1/submit/init_user_email_recovery",
        input,
        (json) => TInitUserEmailRecoveryResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
  ///
  /// See also: `InitUserEmailRecovery`.

  Future<TSignedRequest> stampInitUserEmailRecovery({
    required TInitUserEmailRecoveryBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/init_user_email_recovery';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Authenticate a user with an OIDC token (Oauth).
  ///
  /// Sign the provided `TOauthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/oauth).
  ///
  /// See also: `stampOauth`.

  Future<TOauthResponse> oauth({
    required TOauthBody input,
  }) async {
    return await request<TOauthBody, TOauthResponse>("/public/v1/submit/oauth",
        input, (json) => TOauthResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
  ///
  /// See also: `Oauth`.

  Future<TSignedRequest> stampOauth({
    required TOauthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/oauth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create an Oauth session for a user.
  ///
  /// Sign the provided `TOauthLoginBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/oauth_login).
  ///
  /// See also: `stampOauthLogin`.

  Future<TOauthLoginResponse> oauthLogin({
    required TOauthLoginBody input,
  }) async {
    return await request<TOauthLoginBody, TOauthLoginResponse>(
        "/public/v1/submit/oauth_login",
        input,
        (json) => TOauthLoginResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TOauthLoginBody` by using the client's `stamp` function.
  ///
  /// See also: `OauthLogin`.

  Future<TSignedRequest> stampOauthLogin({
    required TOauthLoginBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/oauth_login';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Authenticate a user with an OTP code sent via email or SMS.
  ///
  /// Sign the provided `TOtpAuthBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/otp_auth).
  ///
  /// See also: `stampOtpAuth`.

  Future<TOtpAuthResponse> otpAuth({
    required TOtpAuthBody input,
  }) async {
    return await request<TOtpAuthBody, TOtpAuthResponse>(
        "/public/v1/submit/otp_auth",
        input,
        (json) => TOtpAuthResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TOtpAuthBody` by using the client's `stamp` function.
  ///
  /// See also: `OtpAuth`.

  Future<TSignedRequest> stampOtpAuth({
    required TOtpAuthBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/otp_auth';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create an OTP session for a user.
  ///
  /// Sign the provided `TOtpLoginBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/otp_login).
  ///
  /// See also: `stampOtpLogin`.

  Future<TOtpLoginResponse> otpLogin({
    required TOtpLoginBody input,
  }) async {
    return await request<TOtpLoginBody, TOtpLoginResponse>(
        "/public/v1/submit/otp_login",
        input,
        (json) => TOtpLoginResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TOtpLoginBody` by using the client's `stamp` function.
  ///
  /// See also: `OtpLogin`.

  Future<TSignedRequest> stampOtpLogin({
    required TOtpLoginBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/otp_login';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Complete the process of recovering a user by adding an authenticator.
  ///
  /// Sign the provided `TRecoverUserBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/recover_user).
  ///
  /// See also: `stampRecoverUser`.

  Future<TRecoverUserResponse> recoverUser({
    required TRecoverUserBody input,
  }) async {
    return await request<TRecoverUserBody, TRecoverUserResponse>(
        "/public/v1/submit/recover_user",
        input,
        (json) => TRecoverUserResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
  ///
  /// See also: `RecoverUser`.

  Future<TSignedRequest> stampRecoverUser({
    required TRecoverUserBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/recover_user';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Reject an activity.
  ///
  /// Sign the provided `TRejectActivityBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/reject_activity).
  ///
  /// See also: `stampRejectActivity`.

  Future<TRejectActivityResponse> rejectActivity({
    required TRejectActivityBody input,
  }) async {
    return await request<TRejectActivityBody, TRejectActivityResponse>(
        "/public/v1/submit/reject_activity",
        input,
        (json) => TRejectActivityResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
  ///
  /// See also: `RejectActivity`.

  Future<TSignedRequest> stampRejectActivity({
    required TRejectActivityBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/reject_activity';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Remove an organization feature. This activity must be approved by the current root quorum.
  ///
  /// Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/remove_organization_feature).
  ///
  /// See also: `stampRemoveOrganizationFeature`.

  Future<TRemoveOrganizationFeatureResponse> removeOrganizationFeature({
    required TRemoveOrganizationFeatureBody input,
  }) async {
    return await request<TRemoveOrganizationFeatureBody,
            TRemoveOrganizationFeatureResponse>(
        "/public/v1/submit/remove_organization_feature",
        input,
        (json) => TRemoveOrganizationFeatureResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
  ///
  /// See also: `RemoveOrganizationFeature`.

  Future<TSignedRequest> stampRemoveOrganizationFeature({
    required TRemoveOrganizationFeatureBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/remove_organization_feature';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Set an organization feature. This activity must be approved by the current root quorum.
  ///
  /// Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/set_organization_feature).
  ///
  /// See also: `stampSetOrganizationFeature`.

  Future<TSetOrganizationFeatureResponse> setOrganizationFeature({
    required TSetOrganizationFeatureBody input,
  }) async {
    return await request<TSetOrganizationFeatureBody,
            TSetOrganizationFeatureResponse>(
        "/public/v1/submit/set_organization_feature",
        input,
        (json) => TSetOrganizationFeatureResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
  ///
  /// See also: `SetOrganizationFeature`.

  Future<TSignedRequest> stampSetOrganizationFeature({
    required TSetOrganizationFeatureBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/set_organization_feature';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sign a raw payload.
  ///
  /// Sign the provided `TSignRawPayloadBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/sign_raw_payload).
  ///
  /// See also: `stampSignRawPayload`.

  Future<TSignRawPayloadResponse> signRawPayload({
    required TSignRawPayloadBody input,
  }) async {
    return await request<TSignRawPayloadBody, TSignRawPayloadResponse>(
        "/public/v1/submit/sign_raw_payload",
        input,
        (json) => TSignRawPayloadResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
  ///
  /// See also: `SignRawPayload`.

  Future<TSignedRequest> stampSignRawPayload({
    required TSignRawPayloadBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/sign_raw_payload';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sign multiple raw payloads with the same signing parameters.
  ///
  /// Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/sign_raw_payloads).
  ///
  /// See also: `stampSignRawPayloads`.

  Future<TSignRawPayloadsResponse> signRawPayloads({
    required TSignRawPayloadsBody input,
  }) async {
    return await request<TSignRawPayloadsBody, TSignRawPayloadsResponse>(
        "/public/v1/submit/sign_raw_payloads",
        input,
        (json) => TSignRawPayloadsResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
  ///
  /// See also: `SignRawPayloads`.

  Future<TSignedRequest> stampSignRawPayloads({
    required TSignRawPayloadsBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/sign_raw_payloads';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Sign a transaction.
  ///
  /// Sign the provided `TSignTransactionBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/sign_transaction).
  ///
  /// See also: `stampSignTransaction`.

  Future<TSignTransactionResponse> signTransaction({
    required TSignTransactionBody input,
  }) async {
    return await request<TSignTransactionBody, TSignTransactionResponse>(
        "/public/v1/submit/sign_transaction",
        input,
        (json) => TSignTransactionResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
  ///
  /// See also: `SignTransaction`.

  Future<TSignedRequest> stampSignTransaction({
    required TSignTransactionBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/sign_transaction';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Create a session for a user through stamping client side (API key, wallet client, or passkey client).
  ///
  /// Sign the provided `TStampLoginBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/stamp_login).
  ///
  /// See also: `stampStampLogin`.

  Future<TStampLoginResponse> stampLogin({
    required TStampLoginBody input,
  }) async {
    return await request<TStampLoginBody, TStampLoginResponse>(
        "/public/v1/submit/stamp_login",
        input,
        (json) => TStampLoginResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TStampLoginBody` by using the client's `stamp` function.
  ///
  /// See also: `StampLogin`.

  Future<TSignedRequest> stampStampLogin({
    required TStampLoginBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/stamp_login';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update an existing policy.
  ///
  /// Sign the provided `TUpdatePolicyBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_policy).
  ///
  /// See also: `stampUpdatePolicy`.

  Future<TUpdatePolicyResponse> updatePolicy({
    required TUpdatePolicyBody input,
  }) async {
    return await request<TUpdatePolicyBody, TUpdatePolicyResponse>(
        "/public/v1/submit/update_policy",
        input,
        (json) => TUpdatePolicyResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdatePolicy`.

  Future<TSignedRequest> stampUpdatePolicy({
    required TUpdatePolicyBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_policy';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_private_key_tag).
  ///
  /// See also: `stampUpdatePrivateKeyTag`.

  Future<TUpdatePrivateKeyTagResponse> updatePrivateKeyTag({
    required TUpdatePrivateKeyTagBody input,
  }) async {
    return await request<TUpdatePrivateKeyTagBody,
            TUpdatePrivateKeyTagResponse>(
        "/public/v1/submit/update_private_key_tag",
        input,
        (json) => TUpdatePrivateKeyTagResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdatePrivateKeyTag`.

  Future<TSignedRequest> stampUpdatePrivateKeyTag({
    required TUpdatePrivateKeyTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_private_key_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
  ///
  /// Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_root_quorum).
  ///
  /// See also: `stampUpdateRootQuorum`.

  Future<TUpdateRootQuorumResponse> updateRootQuorum({
    required TUpdateRootQuorumBody input,
  }) async {
    return await request<TUpdateRootQuorumBody, TUpdateRootQuorumResponse>(
        "/public/v1/submit/update_root_quorum",
        input,
        (json) => TUpdateRootQuorumResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateRootQuorum`.

  Future<TSignedRequest> stampUpdateRootQuorum({
    required TUpdateRootQuorumBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_root_quorum';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update a user in an existing organization.
  ///
  /// Sign the provided `TUpdateUserBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user).
  ///
  /// See also: `stampUpdateUser`.

  Future<TUpdateUserResponse> updateUser({
    required TUpdateUserBody input,
  }) async {
    return await request<TUpdateUserBody, TUpdateUserResponse>(
        "/public/v1/submit/update_user",
        input,
        (json) => TUpdateUserResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUser`.

  Future<TSignedRequest> stampUpdateUser({
    required TUpdateUserBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_user';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update a user's email in an existing organization.
  ///
  /// Sign the provided `TUpdateUserEmailBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user_email).
  ///
  /// See also: `stampUpdateUserEmail`.

  Future<TUpdateUserEmailResponse> updateUserEmail({
    required TUpdateUserEmailBody input,
  }) async {
    return await request<TUpdateUserEmailBody, TUpdateUserEmailResponse>(
        "/public/v1/submit/update_user_email",
        input,
        (json) => TUpdateUserEmailResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateUserEmailBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUserEmail`.

  Future<TSignedRequest> stampUpdateUserEmail({
    required TUpdateUserEmailBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_user_email';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update a user's name in an existing organization.
  ///
  /// Sign the provided `TUpdateUserNameBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user_name).
  ///
  /// See also: `stampUpdateUserName`.

  Future<TUpdateUserNameResponse> updateUserName({
    required TUpdateUserNameBody input,
  }) async {
    return await request<TUpdateUserNameBody, TUpdateUserNameResponse>(
        "/public/v1/submit/update_user_name",
        input,
        (json) => TUpdateUserNameResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateUserNameBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUserName`.

  Future<TSignedRequest> stampUpdateUserName({
    required TUpdateUserNameBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_user_name';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update a user's phone number in an existing organization.
  ///
  /// Sign the provided `TUpdateUserPhoneNumberBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user_phone_number).
  ///
  /// See also: `stampUpdateUserPhoneNumber`.

  Future<TUpdateUserPhoneNumberResponse> updateUserPhoneNumber({
    required TUpdateUserPhoneNumberBody input,
  }) async {
    return await request<TUpdateUserPhoneNumberBody,
            TUpdateUserPhoneNumberResponse>(
        "/public/v1/submit/update_user_phone_number",
        input,
        (json) => TUpdateUserPhoneNumberResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateUserPhoneNumberBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUserPhoneNumber`.

  Future<TSignedRequest> stampUpdateUserPhoneNumber({
    required TUpdateUserPhoneNumberBody input,
  }) async {
    final fullUrl =
        '${config.baseUrl}/public/v1/submit/update_user_phone_number';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
  ///
  /// Sign the provided `TUpdateUserTagBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_user_tag).
  ///
  /// See also: `stampUpdateUserTag`.

  Future<TUpdateUserTagResponse> updateUserTag({
    required TUpdateUserTagBody input,
  }) async {
    return await request<TUpdateUserTagBody, TUpdateUserTagResponse>(
        "/public/v1/submit/update_user_tag",
        input,
        (json) => TUpdateUserTagResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateUserTag`.

  Future<TSignedRequest> stampUpdateUserTag({
    required TUpdateUserTagBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_user_tag';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Update a wallet for an organization.
  ///
  /// Sign the provided `TUpdateWalletBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/update_wallet).
  ///
  /// See also: `stampUpdateWallet`.

  Future<TUpdateWalletResponse> updateWallet({
    required TUpdateWalletBody input,
  }) async {
    return await request<TUpdateWalletBody, TUpdateWalletResponse>(
        "/public/v1/submit/update_wallet",
        input,
        (json) => TUpdateWalletResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TUpdateWalletBody` by using the client's `stamp` function.
  ///
  /// See also: `UpdateWallet`.

  Future<TSignedRequest> stampUpdateWallet({
    required TUpdateWalletBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/update_wallet';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }

  /// Verify a generic OTP.
  ///
  /// Sign the provided `TVerifyOtpBody` with the client's `stamp` function and submit the request (POST /public/v1/submit/verify_otp).
  ///
  /// See also: `stampVerifyOtp`.

  Future<TVerifyOtpResponse> verifyOtp({
    required TVerifyOtpBody input,
  }) async {
    return await request<TVerifyOtpBody, TVerifyOtpResponse>(
        "/public/v1/submit/verify_otp",
        input,
        (json) => TVerifyOtpResponse.fromJson(json));
  }

  /// Produce a `SignedRequest` from `TVerifyOtpBody` by using the client's `stamp` function.
  ///
  /// See also: `VerifyOtp`.

  Future<TSignedRequest> stampVerifyOtp({
    required TVerifyOtpBody input,
  }) async {
    final fullUrl = '${config.baseUrl}/public/v1/submit/verify_otp';
    final body = jsonEncode(input);
    final stamp = await stamper.stamp(body);

    return TSignedRequest(
      body: body,
      stamp: stamp,
      url: fullUrl,
    );
  }
}
